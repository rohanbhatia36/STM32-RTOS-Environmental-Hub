
RTOS_Environmental_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800ca88  0800ca88  0000da88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d26c  0800d26c  0000f1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d26c  0800d26c  0000e26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d274  0800d274  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d274  0800d274  0000e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d278  0800d278  0000e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d27c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005170  200001e0  0800d45c  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005350  0800d45c  0000f350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206c7  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004372  00000000  00000000  0002f8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015da  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e7  00000000  00000000  00036e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209c9  00000000  00000000  0005d319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef10e  00000000  00000000  0007dce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016cdf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008888  00000000  00000000  0016ce34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001756bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ca6c 	.word	0x0800ca6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ca6c 	.word	0x0800ca6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__reg_write>:

// Write a new value to BMP280 register
// input:
//   reg - register number
//   value - new register value
static void __reg_write(uint8_t reg, uint8_t value) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] = { reg, value };
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	733b      	strb	r3, [r7, #12]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	21ec      	movs	r1, #236	@ 0xec
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <__reg_write+0x34>)
 8000f3c:	f002 fb5c 	bl	80035f8 <HAL_I2C_Master_Transmit>

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000260 	.word	0x20000260

08000f4c <__reg_read>:

// Read a value of the BMP280 register
// input:
//   reg - register number
// return: register value (zero in case of error on I2C bus)
static uint8_t __reg_read(uint8_t reg) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	21ec      	movs	r1, #236	@ 0xec
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <__reg_read+0x40>)
 8000f68:	f002 fb46 	bl	80035f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMP280_I2C_PORT, BMP280_ADDR, &value, 1, HAL_MAX_DELAY);;
 8000f6c:	f107 020f 	add.w	r2, r7, #15
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	21ec      	movs	r1, #236	@ 0xec
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <__reg_read+0x40>)
 8000f7c:	f002 fc3a 	bl	80037f4 <HAL_I2C_Master_Receive>

	return value;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000260 	.word	0x20000260

08000f90 <__reg_read_bulk>:
// input:
//   reg - starting register number
//   buf - pointer to the buffer to store data
//   len - number of registers to read
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
static BMP280_RESULT __reg_read_bulk(uint8_t reg, uint8_t *buf, uint32_t count) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000f9e:	f107 020f 	add.w	r2, r7, #15
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	21ec      	movs	r1, #236	@ 0xec
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <__reg_read_bulk+0x50>)
 8000fae:	f002 fb23 	bl	80035f8 <HAL_I2C_Master_Transmit>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <__reg_read_bulk+0x46>
		if (HAL_I2C_Master_Receive(BMP280_I2C_PORT, BMP280_ADDR, buf, count, HAL_MAX_DELAY) == HAL_OK) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	21ec      	movs	r1, #236	@ 0xec
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <__reg_read_bulk+0x50>)
 8000fc8:	f002 fc14 	bl	80037f4 <HAL_I2C_Master_Receive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <__reg_read_bulk+0x46>
			return BMP280_SUCCESS;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <__reg_read_bulk+0x48>
		}
	}

	return BMP280_ERROR;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000260 	.word	0x20000260

08000fe4 <BMP280_Check>:

// Check if BMP280 present on I2C bus
// return: BMP280_SUCCESS if BMP280 present, BMP280_ERROR otherwise
BMP280_RESULT BMP280_Check(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	switch (BMP280_GetVersion()) {
 8000fe8:	f000 f809 	bl	8000ffe <BMP280_GetVersion>
 8000fec:	4603      	mov	r3, r0
 8000fee:	3b56      	subs	r3, #86	@ 0x56
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d801      	bhi.n	8000ff8 <BMP280_Check+0x14>
		case BMP280_CHIP_ID1:
		case BMP280_CHIP_ID2:
		case BMP280_CHIP_ID3:
			return BMP280_SUCCESS;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <BMP280_Check+0x16>
		default:
			return BMP280_ERROR;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <BMP280_GetVersion>:
	__reg_write(BMP280_REG_RESET, BMP280_SOFT_RESET_KEY);
}

// Get version of the BMP280 chip
// return: version of BMP280 chip or zero in case of chip absence or error on I2C bus
inline uint8_t BMP280_GetVersion(void) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	return __reg_read(BMP280_REG_ID);
 8001002:	20d0      	movs	r0, #208	@ 0xd0
 8001004:	f7ff ffa2 	bl	8000f4c <__reg_read>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}

0800100e <BMP280_SetMode>:

// Set sensor mode of the BMP280 chip
// input:
//   mode - new mode (one of BMP280_MODE_xx values)
// note: always set the power mode after sensor configuration is done
void BMP280_SetMode(uint8_t mode) {
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
	// Configure 'mode' bits in 'ctrl_meas' (0xF4) register
	mode &= BMP280_MODE_MSK;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK);
 8001020:	20f4      	movs	r0, #244	@ 0xf4
 8001022:	f7ff ff93 	bl	8000f4c <__reg_read>
 8001026:	4603      	mov	r3, r0
 8001028:	f023 0303 	bic.w	r3, r3, #3
 800102c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | mode);
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4313      	orrs	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	20f4      	movs	r0, #244	@ 0xf4
 800103a:	f7ff ff6b 	bl	8000f14 <__reg_write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <BMP280_SetOSRST>:
}

// Set oversampling of temperature data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_T_Xx values)
void BMP280_SetOSRST(uint8_t osrs) {
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_t' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_T_MSK;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f023 031f 	bic.w	r3, r3, #31
 8001056:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_T_MSK);
 8001058:	20f4      	movs	r0, #244	@ 0xf4
 800105a:	f7ff ff77 	bl	8000f4c <__reg_read>
 800105e:	4603      	mov	r3, r0
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4313      	orrs	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	20f4      	movs	r0, #244	@ 0xf4
 8001072:	f7ff ff4f 	bl	8000f14 <__reg_write>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <BMP280_SetOSRSP>:

// Set oversampling of pressure data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_P_Xx values)
void BMP280_SetOSRSP(uint8_t osrs) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_p' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_P_MSK;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 031c 	and.w	r3, r3, #28
 800108e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK);
 8001090:	20f4      	movs	r0, #244	@ 0xf4
 8001092:	f7ff ff5b 	bl	8000f4c <__reg_read>
 8001096:	4603      	mov	r3, r0
 8001098:	f023 031c 	bic.w	r3, r3, #28
 800109c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	20f4      	movs	r0, #244	@ 0xf4
 80010aa:	f7ff ff33 	bl	8000f14 <__reg_write>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <BMP280_Read_Calibration>:

// Read calibration data
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
BMP280_RESULT BMP280_Read_Calibration(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// Bulk read from 'calib00' to 'calib25'
	return __reg_read_bulk(BMP280_REG_CALIB00, (uint8_t *)&cal_param, sizeof(cal_param));
 80010bc:	2218      	movs	r2, #24
 80010be:	4903      	ldr	r1, [pc, #12]	@ (80010cc <BMP280_Read_Calibration+0x14>)
 80010c0:	2088      	movs	r0, #136	@ 0x88
 80010c2:	f7ff ff65 	bl	8000f90 <__reg_read_bulk>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001fc 	.word	0x200001fc

080010d0 <BMP280_Read_UT>:
// input:
//   UT - pointer to store value (signed 32-bit)
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
// note: the '0x80000' value in UT means no temperature data is present,
//       i.e. that measurement is disabled or not ready yet
BMP280_RESULT BMP280_Read_UT(int32_t *UT) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	// Bulk read from 'temp_msb' to 'temp_xlsb'
	if (__reg_read_bulk(BMP280_REG_TEMP_MSB, buf, sizeof(buf)) == BMP280_SUCCESS) {
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2203      	movs	r2, #3
 80010de:	4619      	mov	r1, r3
 80010e0:	20fa      	movs	r0, #250	@ 0xfa
 80010e2:	f7ff ff55 	bl	8000f90 <__reg_read_bulk>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10c      	bne.n	8001106 <BMP280_Read_UT+0x36>
		*UT = (int32_t)((buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4));
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	031a      	lsls	r2, r3, #12
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4313      	orrs	r3, r2
 80010f6:	7bba      	ldrb	r2, [r7, #14]
 80010f8:	0912      	lsrs	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
		return BMP280_SUCCESS;
 8001102:	2301      	movs	r3, #1
 8001104:	e004      	b.n	8001110 <BMP280_Read_UT+0x40>
	}

	// Default result value
	*UT = BMP280_NO_TEMPERATURE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800110c:	601a      	str	r2, [r3, #0]

	return BMP280_ERROR;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <BMP280_CalcT>:
// Calculate temperature from raw value, resolution is 0.01 degree
// input:
//   UT - raw temperature value
// return: temperature in Celsius degrees (value of '5123' represents '51.23C')
// note: code from the BMP280 datasheet (rev 1.19)
int32_t BMP280_CalcT(int32_t UT) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
#if (BMP280_CALC_TYPE != 2)
	// Integer calculations

	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	10da      	asrs	r2, r3, #3
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <BMP280_CalcT+0x70>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	1ad3      	subs	r3, r2, r3
			* ((int32_t)cal_param.dig_T2)) >> 11;
 800112c:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <BMP280_CalcT+0x70>)
 800112e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	12db      	asrs	r3, r3, #11
	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <BMP280_CalcT+0x74>)
 800113a:	6013      	str	r3, [r2, #0]
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	111b      	asrs	r3, r3, #4
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <BMP280_CalcT+0x70>)
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	1a9b      	subs	r3, r3, r2
			* ((UT >> 4) - ((int32_t)cal_param.dig_T1))) >> 12) \
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1112      	asrs	r2, r2, #4
 800114a:	490f      	ldr	r1, [pc, #60]	@ (8001188 <BMP280_CalcT+0x70>)
 800114c:	8809      	ldrh	r1, [r1, #0]
 800114e:	1a52      	subs	r2, r2, r1
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	131b      	asrs	r3, r3, #12
			* ((int32_t)cal_param.dig_T3)) >> 14;
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <BMP280_CalcT+0x70>)
 8001158:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	139a      	asrs	r2, r3, #14
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <BMP280_CalcT+0x74>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <BMP280_CalcT+0x74>)
 800116a:	6013      	str	r3, [r2, #0]

	return ((t_fine * 5) + 128) >> 8;
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <BMP280_CalcT+0x74>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	3380      	adds	r3, #128	@ 0x80
 8001178:	121b      	asrs	r3, r3, #8
	v_x2 = (v_x2 * v_x2) * ((float)cal_param.dig_T3);
	t_fine_f = v_x1 + v_x2;

	return (int32_t)(((v_x1 + v_x2) / 5120.0F) * 100.0F);
#endif // BMP280_CALC_TYPE
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001fc 	.word	0x200001fc
 800118c:	20000214 	.word	0x20000214

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f001 f9b4 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f886 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fa48 	bl	8001630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 fa1c 	bl	80015dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011a4:	f000 f940 	bl	8001428 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011a8:	f000 f8ec 	bl	8001384 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011ac:	f000 f9a0 	bl	80014f0 <MX_TIM2_Init>
  MX_SPI2_Init();
 80011b0:	f000 f968 	bl	8001484 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	if (BMP280_Check() == BMP280_SUCCESS) {
 80011b4:	f7ff ff16 	bl	8000fe4 <BMP280_Check>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10a      	bne.n	80011d4 <main+0x44>
		BMP280_Read_Calibration();
 80011be:	f7ff ff7b 	bl	80010b8 <BMP280_Read_Calibration>

		BMP280_SetOSRST(BMP280_OSRS_T_x16);
 80011c2:	20a0      	movs	r0, #160	@ 0xa0
 80011c4:	f7ff ff3f 	bl	8001046 <BMP280_SetOSRST>
		BMP280_SetOSRSP(BMP280_OSRS_P_x16);
 80011c8:	2014      	movs	r0, #20
 80011ca:	f7ff ff58 	bl	800107e <BMP280_SetOSRSP>

		//set the sensor to Normal Mode to take continuous measurements
		BMP280_SetMode(BMP280_MODE_NORMAL);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff ff1d 	bl	800100e <BMP280_SetMode>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d4:	2104      	movs	r1, #4
 80011d6:	4821      	ldr	r0, [pc, #132]	@ (800125c <main+0xcc>)
 80011d8:	f004 faa2 	bl	8005720 <HAL_TIM_PWM_Start>

	sh1106_Init();
 80011dc:	f000 fc34 	bl	8001a48 <sh1106_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011e0:	f005 fdfe 	bl	8006de0 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (1, sizeof(float), &temperatureQueue_attributes);
 80011e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <main+0xd0>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	2001      	movs	r0, #1
 80011ea:	f005 fef0 	bl	8006fce <osMessageQueueNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001264 <main+0xd4>)
 80011f2:	6013      	str	r3, [r2, #0]

  /* creation of lightLevelQueue */
  lightLevelQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &lightLevelQueue_attributes);
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <main+0xd8>)
 80011f6:	2104      	movs	r1, #4
 80011f8:	2001      	movs	r0, #1
 80011fa:	f005 fee8 	bl	8006fce <osMessageQueueNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <main+0xdc>)
 8001202:	6013      	str	r3, [r2, #0]

  /* creation of pwmQueue */
  pwmQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &pwmQueue_attributes);
 8001204:	4a1a      	ldr	r2, [pc, #104]	@ (8001270 <main+0xe0>)
 8001206:	2104      	movs	r1, #4
 8001208:	2001      	movs	r0, #1
 800120a:	f005 fee0 	bl	8006fce <osMessageQueueNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <main+0xe4>)
 8001212:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001214:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <main+0xe8>)
 8001216:	2100      	movs	r1, #0
 8001218:	4818      	ldr	r0, [pc, #96]	@ (800127c <main+0xec>)
 800121a:	f005 fe2b 	bl	8006e74 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <main+0xf0>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of readSensorTask */
  readSensorTaskHandle = osThreadNew(StartReadSensorTask, NULL, &readSensorTask_attributes);
 8001224:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <main+0xf4>)
 8001226:	2100      	movs	r1, #0
 8001228:	4817      	ldr	r0, [pc, #92]	@ (8001288 <main+0xf8>)
 800122a:	f005 fe23 	bl	8006e74 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a16      	ldr	r2, [pc, #88]	@ (800128c <main+0xfc>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of readADCTask */
  readADCTaskHandle = osThreadNew(StartReadADCTask, NULL, &readADCTask_attributes);
 8001234:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <main+0x100>)
 8001236:	2100      	movs	r1, #0
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <main+0x104>)
 800123a:	f005 fe1b 	bl	8006e74 <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <main+0x108>)
 8001242:	6013      	str	r3, [r2, #0]

  /* creation of controlPWMTask */
  controlPWMTaskHandle = osThreadNew(StartControlPWMTask, NULL, &controlPWMTask_attributes);
 8001244:	4a15      	ldr	r2, [pc, #84]	@ (800129c <main+0x10c>)
 8001246:	2100      	movs	r1, #0
 8001248:	4815      	ldr	r0, [pc, #84]	@ (80012a0 <main+0x110>)
 800124a:	f005 fe13 	bl	8006e74 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <main+0x114>)
 8001252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001254:	f005 fde8 	bl	8006e28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <main+0xc8>
 800125c:	2000030c 	.word	0x2000030c
 8001260:	0800ce98 	.word	0x0800ce98
 8001264:	200003ac 	.word	0x200003ac
 8001268:	0800ceb0 	.word	0x0800ceb0
 800126c:	200003b0 	.word	0x200003b0
 8001270:	0800cec8 	.word	0x0800cec8
 8001274:	200003b4 	.word	0x200003b4
 8001278:	0800ce08 	.word	0x0800ce08
 800127c:	08001791 	.word	0x08001791
 8001280:	2000039c 	.word	0x2000039c
 8001284:	0800ce2c 	.word	0x0800ce2c
 8001288:	080018ad 	.word	0x080018ad
 800128c:	200003a0 	.word	0x200003a0
 8001290:	0800ce50 	.word	0x0800ce50
 8001294:	0800191d 	.word	0x0800191d
 8001298:	200003a4 	.word	0x200003a4
 800129c:	0800ce74 	.word	0x0800ce74
 80012a0:	0800197d 	.word	0x0800197d
 80012a4:	200003a8 	.word	0x200003a8

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2234      	movs	r2, #52	@ 0x34
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f009 faab 	bl	800a812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <SystemClock_Config+0xd4>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a29      	ldr	r2, [pc, #164]	@ (800137c <SystemClock_Config+0xd4>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <SystemClock_Config+0xd4>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <SystemClock_Config+0xd8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012f4:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SystemClock_Config+0xd8>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <SystemClock_Config+0xd8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800131c:	2310      	movs	r3, #16
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001320:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001324:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001326:	2304      	movs	r3, #4
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800132e:	2302      	movs	r3, #2
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fb90 	bl	8004a5c <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001342:	f000 fb7b 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	230f      	movs	r3, #15
 8001348:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134a:	2302      	movs	r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2102      	movs	r1, #2
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fffe 	bl	8004364 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800136e:	f000 fb65 	bl	8001a3c <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_ADC1_Init+0x98>)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <MX_ADC1_Init+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC1_Init+0x98>)
 800139e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_ADC1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_ADC1_Init+0xa0>)
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e6:	f001 f8f1 	bl	80025cc <HAL_ADC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013f0:	f000 fb24 	bl	8001a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_ADC1_Init+0x98>)
 8001406:	f001 fac3 	bl	8002990 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001410:	f000 fb14 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000218 	.word	0x20000218
 8001420:	40012000 	.word	0x40012000
 8001424:	0f000001 	.word	0x0f000001

08001428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x50>)
 800142e:	4a13      	ldr	r2, [pc, #76]	@ (800147c <MX_I2C1_Init+0x54>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <MX_I2C1_Init+0x58>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_I2C1_Init+0x50>)
 8001466:	f001 ff83 	bl	8003370 <HAL_I2C_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001470:	f000 fae4 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000260 	.word	0x20000260
 800147c:	40005400 	.word	0x40005400
 8001480:	000186a0 	.word	0x000186a0

08001484 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_SPI2_Init+0x64>)
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <MX_SPI2_Init+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_SPI2_Init+0x64>)
 8001490:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001494:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_SPI2_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_SPI2_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014d0:	220a      	movs	r2, #10
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_SPI2_Init+0x64>)
 80014d6:	f003 fd5f 	bl	8004f98 <HAL_SPI_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014e0:	f000 faac 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200002b4 	.word	0x200002b4
 80014ec:	40003800 	.word	0x40003800

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	@ 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001536:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800153a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001548:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 800154a:	f003 ffcf 	bl	80054ec <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001554:	f000 fa72 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001562:	4619      	mov	r1, r3
 8001564:	481c      	ldr	r0, [pc, #112]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001566:	f004 fb55 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001570:	f000 fa64 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001576:	f004 f879 	bl	800566c <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001580:	f000 fa5c 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 8001594:	f004 ff44 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800159e:	f000 fa4d 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	@ 0x60
 80015a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 80015ba:	f004 fa69 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015c4:	f000 fa3a 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM2_Init+0xe8>)
 80015ca:	f000 fd77 	bl	80020bc <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3738      	adds	r7, #56	@ 0x38
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000030c 	.word	0x2000030c

080015dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f004 ff94 	bl	8006540 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 fa0d 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000354 	.word	0x20000354
 800162c:	40004400 	.word	0x40004400

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b45      	ldr	r3, [pc, #276]	@ (8001760 <MX_GPIO_Init+0x130>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a44      	ldr	r2, [pc, #272]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b42      	ldr	r3, [pc, #264]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a3d      	ldr	r2, [pc, #244]	@ (8001760 <MX_GPIO_Init+0x130>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <MX_GPIO_Init+0x130>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <MX_GPIO_Init+0x130>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001760 <MX_GPIO_Init+0x130>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <MX_GPIO_Init+0x130>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80016bc:	4829      	ldr	r0, [pc, #164]	@ (8001764 <MX_GPIO_Init+0x134>)
 80016be:	f001 fe0b 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2180      	movs	r1, #128	@ 0x80
 80016c6:	4828      	ldr	r0, [pc, #160]	@ (8001768 <MX_GPIO_Init+0x138>)
 80016c8:	f001 fe06 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	@ 0x40
 80016d0:	4826      	ldr	r0, [pc, #152]	@ (800176c <MX_GPIO_Init+0x13c>)
 80016d2:	f001 fe01 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	481e      	ldr	r0, [pc, #120]	@ (8001768 <MX_GPIO_Init+0x138>)
 80016ee:	f001 fc5f 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin OLED_RES_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|OLED_RES_Pin;
 80016f2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4816      	ldr	r0, [pc, #88]	@ (8001764 <MX_GPIO_Init+0x134>)
 800170c:	f001 fc50 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4810      	ldr	r0, [pc, #64]	@ (8001768 <MX_GPIO_Init+0x138>)
 8001728:	f001 fc42 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800172c:	2340      	movs	r3, #64	@ 0x40
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	480a      	ldr	r0, [pc, #40]	@ (800176c <MX_GPIO_Init+0x13c>)
 8001744:	f001 fc34 	bl	8002fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2105      	movs	r1, #5
 800174c:	2028      	movs	r0, #40	@ 0x28
 800174e:	f001 fc05 	bl	8002f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001752:	2028      	movs	r0, #40	@ 0x28
 8001754:	f001 fc1e 	bl	8002f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020800 	.word	0x40020800
 800176c:	40020400 	.word	0x40020400

08001770 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800177a:	2120      	movs	r1, #32
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <HAL_GPIO_EXTI_Callback+0x1c>)
 800177e:	f001 fdc4 	bl	800330a <HAL_GPIO_TogglePin>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020000 	.word	0x40020000

08001790 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  static float temperatureF = 0.0f;
  static uint32_t lightLevel = 0;
  uint32_t scaledLightLevel = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Infinite loop */
  for(;;)
  {
    //check for a new temperature reading and update the variable if found
    if (osMessageQueueGet(temperatureQueueHandle, &temperatureF, NULL, 10) == osOK)
 800179c:	4b37      	ldr	r3, [pc, #220]	@ (800187c <StartDefaultTask+0xec>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	230a      	movs	r3, #10
 80017a2:	2200      	movs	r2, #0
 80017a4:	4936      	ldr	r1, [pc, #216]	@ (8001880 <StartDefaultTask+0xf0>)
 80017a6:	f005 fce5 	bl	8007174 <osMessageQueueGet>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <StartDefaultTask+0x26>
    {
        hasReceivedTemp = 1;
 80017b0:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <StartDefaultTask+0xf4>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
    }

    //check for a new light level reading and update the variable if found
    if (osMessageQueueGet(lightLevelQueueHandle, &lightLevel, NULL, 10) == osOK)
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <StartDefaultTask+0xf8>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	230a      	movs	r3, #10
 80017bc:	2200      	movs	r2, #0
 80017be:	4933      	ldr	r1, [pc, #204]	@ (800188c <StartDefaultTask+0xfc>)
 80017c0:	f005 fcd8 	bl	8007174 <osMessageQueueGet>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <StartDefaultTask+0x40>
    {
        hasReceivedLight = 1;
 80017ca:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <StartDefaultTask+0x100>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
    }

    //display content
    //clear the entire screen buffer before drawing new content
    sh1106_Fill(Black);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f9ab 	bl	8001b2c <sh1106_Fill>

    //always use the last known value.
    if (hasReceivedTemp) {
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <StartDefaultTask+0xf4>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <StartDefaultTask+0x68>
        sprintf(tempStr, "Temp: %.1f F", temperatureF);
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <StartDefaultTask+0xf0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fed0 	bl	8000588 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	f107 0020 	add.w	r0, r7, #32
 80017f0:	4928      	ldr	r1, [pc, #160]	@ (8001894 <StartDefaultTask+0x104>)
 80017f2:	f008 ffa9 	bl	800a748 <siprintf>
 80017f6:	e005      	b.n	8001804 <StartDefaultTask+0x74>
    } else {
        sprintf(tempStr, "Reading Temp...");
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	4926      	ldr	r1, [pc, #152]	@ (8001898 <StartDefaultTask+0x108>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f008 ffa2 	bl	800a748 <siprintf>
    }

    //always use the last known value.
    if (hasReceivedLight) {
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <StartDefaultTask+0x100>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d014      	beq.n	8001836 <StartDefaultTask+0xa6>
        //scale the raw ADC value (0-4095) to a percentage (0-100)
        scaledLightLevel = (lightLevel * 100) / 4095;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <StartDefaultTask+0xfc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2264      	movs	r2, #100	@ 0x64
 8001812:	fb03 f202 	mul.w	r2, r3, r2
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <StartDefaultTask+0x10c>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	4413      	add	r3, r2
 8001822:	0adb      	lsrs	r3, r3, #11
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
        sprintf(lightStr, "Light: %lu%%", scaledLightLevel);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800182c:	491c      	ldr	r1, [pc, #112]	@ (80018a0 <StartDefaultTask+0x110>)
 800182e:	4618      	mov	r0, r3
 8001830:	f008 ff8a 	bl	800a748 <siprintf>
 8001834:	e005      	b.n	8001842 <StartDefaultTask+0xb2>
    } else {
        sprintf(lightStr, "Reading Light...");
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	491a      	ldr	r1, [pc, #104]	@ (80018a4 <StartDefaultTask+0x114>)
 800183c:	4618      	mov	r0, r3
 800183e:	f008 ff83 	bl	800a748 <siprintf>
    }

    //draw content to the buffer
    //set cursor for the first line (Y=5)
    sh1106_SetCursor(2, 5);
 8001842:	2105      	movs	r1, #5
 8001844:	2002      	movs	r0, #2
 8001846:	f000 fa21 	bl	8001c8c <sh1106_SetCursor>
    sh1106_WriteString(tempStr, Font_7x10, White);
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <StartDefaultTask+0x118>)
 800184c:	f107 0020 	add.w	r0, r7, #32
 8001850:	2301      	movs	r3, #1
 8001852:	ca06      	ldmia	r2, {r1, r2}
 8001854:	f000 f9fe 	bl	8001c54 <sh1106_WriteString>

    //set cursor for the second line (Y=25)
    sh1106_SetCursor(2, 25);
 8001858:	2119      	movs	r1, #25
 800185a:	2002      	movs	r0, #2
 800185c:	f000 fa16 	bl	8001c8c <sh1106_SetCursor>
    sh1106_WriteString(lightStr, Font_7x10, White);
 8001860:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <StartDefaultTask+0x118>)
 8001862:	f107 000c 	add.w	r0, r7, #12
 8001866:	2301      	movs	r3, #1
 8001868:	ca06      	ldmia	r2, {r1, r2}
 800186a:	f000 f9f3 	bl	8001c54 <sh1106_WriteString>

    sh1106_UpdateScreen();
 800186e:	f000 f975 	bl	8001b5c <sh1106_UpdateScreen>

    osDelay(250);
 8001872:	20fa      	movs	r0, #250	@ 0xfa
 8001874:	f005 fb90 	bl	8006f98 <osDelay>
    if (osMessageQueueGet(temperatureQueueHandle, &temperatureF, NULL, 10) == osOK)
 8001878:	e790      	b.n	800179c <StartDefaultTask+0xc>
 800187a:	bf00      	nop
 800187c:	200003ac 	.word	0x200003ac
 8001880:	200003b8 	.word	0x200003b8
 8001884:	200003bc 	.word	0x200003bc
 8001888:	200003b0 	.word	0x200003b0
 800188c:	200003c0 	.word	0x200003c0
 8001890:	200003c4 	.word	0x200003c4
 8001894:	0800caf0 	.word	0x0800caf0
 8001898:	0800cb00 	.word	0x0800cb00
 800189c:	00100101 	.word	0x00100101
 80018a0:	0800cb10 	.word	0x0800cb10
 80018a4:	0800cb20 	.word	0x0800cb20
 80018a8:	20000000 	.word	0x20000000

080018ac <StartReadSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadSensorTask */
void StartReadSensorTask(void *argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//read the raw temperature value from the sensor
		BMP280_Read_UT(&raw_temp);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc09 	bl	80010d0 <BMP280_Read_UT>

		//convert the raw value to a float in degrees Fahrenheit
		temp = (float)BMP280_CalcT(raw_temp) / 100.0f * (float)9/5 + 32;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc29 	bl	8001118 <BMP280_CalcT>
 80018c6:	ee07 0a90 	vmov	s15, r0
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001910 <StartReadSensorTask+0x64>
 80018d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d6:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80018da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018de:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80018e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001914 <StartReadSensorTask+0x68>
 80018ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ee:	edc7 7a02 	vstr	s15, [r7, #8]

		//put the temperature value into the queue
		osMessageQueuePut(temperatureQueueHandle, &temp, 0, 0);
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <StartReadSensorTask+0x6c>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f107 0108 	add.w	r1, r7, #8
 80018fa:	2300      	movs	r3, #0
 80018fc:	2200      	movs	r2, #0
 80018fe:	f005 fbd9 	bl	80070b4 <osMessageQueuePut>

		osDelay(500);
 8001902:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001906:	f005 fb47 	bl	8006f98 <osDelay>
		BMP280_Read_UT(&raw_temp);
 800190a:	bf00      	nop
 800190c:	e7d2      	b.n	80018b4 <StartReadSensorTask+0x8>
 800190e:	bf00      	nop
 8001910:	42c80000 	.word	0x42c80000
 8001914:	42000000 	.word	0x42000000
 8001918:	200003ac 	.word	0x200003ac

0800191c <StartReadADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadADCTask */
void StartReadADCTask(void *argument)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;

	/* Infinite loop */
	for(;;)
	{
	    HAL_ADC_Start(&hadc1);
 8001924:	4812      	ldr	r0, [pc, #72]	@ (8001970 <StartReadADCTask+0x54>)
 8001926:	f000 fe95 	bl	8002654 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,100);
 800192a:	2164      	movs	r1, #100	@ 0x64
 800192c:	4810      	ldr	r0, [pc, #64]	@ (8001970 <StartReadADCTask+0x54>)
 800192e:	f000 ff96 	bl	800285e <HAL_ADC_PollForConversion>
	    adc_value = HAL_ADC_GetValue(&hadc1);
 8001932:	480f      	ldr	r0, [pc, #60]	@ (8001970 <StartReadADCTask+0x54>)
 8001934:	f001 f81e 	bl	8002974 <HAL_ADC_GetValue>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
	    HAL_ADC_Stop(&hadc1);
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <StartReadADCTask+0x54>)
 800193e:	f000 ff5b 	bl	80027f8 <HAL_ADC_Stop>

	    osMessageQueuePut(lightLevelQueueHandle, &adc_value, 0 ,0);
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <StartReadADCTask+0x58>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f107 010c 	add.w	r1, r7, #12
 800194a:	2300      	movs	r3, #0
 800194c:	2200      	movs	r2, #0
 800194e:	f005 fbb1 	bl	80070b4 <osMessageQueuePut>
	    osMessageQueuePut(pwmQueueHandle, &adc_value, 0, 0);
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <StartReadADCTask+0x5c>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	f107 010c 	add.w	r1, r7, #12
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	f005 fba9 	bl	80070b4 <osMessageQueuePut>

	    osDelay(500);
 8001962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001966:	f005 fb17 	bl	8006f98 <osDelay>
	    HAL_ADC_Start(&hadc1);
 800196a:	bf00      	nop
 800196c:	e7da      	b.n	8001924 <StartReadADCTask+0x8>
 800196e:	bf00      	nop
 8001970:	20000218 	.word	0x20000218
 8001974:	200003b0 	.word	0x200003b0
 8001978:	200003b4 	.word	0x200003b4

0800197c <StartControlPWMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlPWMTask */
void StartControlPWMTask(void *argument)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b092      	sub	sp, #72	@ 0x48
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	int uart_buf_len;

	/* Infinite loop */
	for(;;)
	{
	    osMessageQueueGet(pwmQueueHandle, &adc_value, NULL, osWaitForever);
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <StartControlPWMTask+0x84>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	2200      	movs	r2, #0
 8001992:	f005 fbef 	bl	8007174 <osMessageQueueGet>

	    uart_buf_len = sprintf(uart_buf, "ADC in: %lu\r\n", adc_value);
 8001996:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4919      	ldr	r1, [pc, #100]	@ (8001a04 <StartControlPWMTask+0x88>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 fed2 	bl	800a748 <siprintf>
 80019a4:	6478      	str	r0, [r7, #68]	@ 0x44
	    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80019a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 0108 	add.w	r1, r7, #8
 80019ae:	2364      	movs	r3, #100	@ 0x64
 80019b0:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <StartControlPWMTask+0x8c>)
 80019b2:	f004 fe15 	bl	80065e0 <HAL_UART_Transmit>

	    pwm_value = 1000 - ((adc_value * 1000) / 4095);
 80019b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019bc:	fb03 f202 	mul.w	r2, r3, r2
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <StartControlPWMTask+0x90>)
 80019c2:	fba3 1302 	umull	r1, r3, r3, r2
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0852      	lsrs	r2, r2, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	0adb      	lsrs	r3, r3, #11
 80019ce:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80019d2:	643b      	str	r3, [r7, #64]	@ 0x40

	    uart_buf_len = sprintf(uart_buf, "PWM out: %lu\r\n\n", pwm_value);
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019da:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <StartControlPWMTask+0x94>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f008 feb3 	bl	800a748 <siprintf>
 80019e2:	6478      	str	r0, [r7, #68]	@ 0x44
	    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80019e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f107 0108 	add.w	r1, r7, #8
 80019ec:	2364      	movs	r3, #100	@ 0x64
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <StartControlPWMTask+0x8c>)
 80019f0:	f004 fdf6 	bl	80065e0 <HAL_UART_Transmit>

	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <StartControlPWMTask+0x98>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019fa:	639a      	str	r2, [r3, #56]	@ 0x38
	    osMessageQueueGet(pwmQueueHandle, &adc_value, NULL, osWaitForever);
 80019fc:	bf00      	nop
 80019fe:	e7c1      	b.n	8001984 <StartControlPWMTask+0x8>
 8001a00:	200003b4 	.word	0x200003b4
 8001a04:	0800cb34 	.word	0x0800cb34
 8001a08:	20000354 	.word	0x20000354
 8001a0c:	00100101 	.word	0x00100101
 8001a10:	0800cb44 	.word	0x0800cb44
 8001a14:	2000030c 	.word	0x2000030c

08001a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a2a:	f000 fd8b 	bl	8002544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <Error_Handler+0x8>

08001a48 <sh1106_Init>:
//internal functions
void sh1106_WriteCommand(uint8_t command);
void sh1106_WriteData(uint8_t* data, uint16_t size);

//initialization function
void sh1106_Init(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    //hardware reset
    HAL_GPIO_WritePin(SH1106_RES_PORT, SH1106_RES_PIN, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a52:	4835      	ldr	r0, [pc, #212]	@ (8001b28 <sh1106_Init+0xe0>)
 8001a54:	f001 fc40 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f000 fd93 	bl	8002584 <HAL_Delay>
    HAL_GPIO_WritePin(SH1106_RES_PORT, SH1106_RES_PIN, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a64:	4830      	ldr	r0, [pc, #192]	@ (8001b28 <sh1106_Init+0xe0>)
 8001a66:	f001 fc37 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f000 fd8a 	bl	8002584 <HAL_Delay>

    sh1106_WriteCommand(0xAE); //display OFF
 8001a70:	20ae      	movs	r0, #174	@ 0xae
 8001a72:	f000 f923 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x20); //set Memory Addressing Mode
 8001a76:	2020      	movs	r0, #32
 8001a78:	f000 f920 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x10); //00: Horizontal Addressing Mode; 01: Vertical Addressing Mode; 10: Page Addressing Mode (RESET); 11: Invalid
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f000 f91d 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xB0); //set Page Start Address for Page Addressing Mode, 0-7
 8001a82:	20b0      	movs	r0, #176	@ 0xb0
 8001a84:	f000 f91a 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xC8); //set COM Output Scan Direction
 8001a88:	20c8      	movs	r0, #200	@ 0xc8
 8001a8a:	f000 f917 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x00); //set low column address
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f914 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x10); //set high column address
 8001a94:	2010      	movs	r0, #16
 8001a96:	f000 f911 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x40); //set start line address
 8001a9a:	2040      	movs	r0, #64	@ 0x40
 8001a9c:	f000 f90e 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x81); //set contrast control register
 8001aa0:	2081      	movs	r0, #129	@ 0x81
 8001aa2:	f000 f90b 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xFF);
 8001aa6:	20ff      	movs	r0, #255	@ 0xff
 8001aa8:	f000 f908 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xA1); //set segment re-map 0 to 127
 8001aac:	20a1      	movs	r0, #161	@ 0xa1
 8001aae:	f000 f905 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xA6); //set normal display
 8001ab2:	20a6      	movs	r0, #166	@ 0xa6
 8001ab4:	f000 f902 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xA8); //set multiplex ratio (1 to 64)
 8001ab8:	20a8      	movs	r0, #168	@ 0xa8
 8001aba:	f000 f8ff 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x3F); //
 8001abe:	203f      	movs	r0, #63	@ 0x3f
 8001ac0:	f000 f8fc 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xA4); //0xa4: Output follows RAM content; 0xa5: Output ignores RAM content
 8001ac4:	20a4      	movs	r0, #164	@ 0xa4
 8001ac6:	f000 f8f9 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xD3); //set display offset
 8001aca:	20d3      	movs	r0, #211	@ 0xd3
 8001acc:	f000 f8f6 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x00); //no offset
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 f8f3 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xD5); //set display clock divide ratio/oscillator frequency
 8001ad6:	20d5      	movs	r0, #213	@ 0xd5
 8001ad8:	f000 f8f0 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xF0); //set divide ratio
 8001adc:	20f0      	movs	r0, #240	@ 0xf0
 8001ade:	f000 f8ed 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xD9); //set pre-charge period
 8001ae2:	20d9      	movs	r0, #217	@ 0xd9
 8001ae4:	f000 f8ea 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x22); //
 8001ae8:	2022      	movs	r0, #34	@ 0x22
 8001aea:	f000 f8e7 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xDA); //set com pins hardware configuration
 8001aee:	20da      	movs	r0, #218	@ 0xda
 8001af0:	f000 f8e4 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x12);
 8001af4:	2012      	movs	r0, #18
 8001af6:	f000 f8e1 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xDB); //set vcomh
 8001afa:	20db      	movs	r0, #219	@ 0xdb
 8001afc:	f000 f8de 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x20); //0x20: 0.77xVcc
 8001b00:	2020      	movs	r0, #32
 8001b02:	f000 f8db 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x8D); //set DC-DC enable
 8001b06:	208d      	movs	r0, #141	@ 0x8d
 8001b08:	f000 f8d8 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0x14); //
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f000 f8d5 	bl	8001cbc <sh1106_WriteCommand>
    sh1106_WriteCommand(0xAF); //turn on display
 8001b12:	20af      	movs	r0, #175	@ 0xaf
 8001b14:	f000 f8d2 	bl	8001cbc <sh1106_WriteCommand>

    sh1106_Fill(Black);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 f807 	bl	8001b2c <sh1106_Fill>
    sh1106_UpdateScreen();
 8001b1e:	f000 f81d 	bl	8001b5c <sh1106_UpdateScreen>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020000 	.word	0x40020000

08001b2c <sh1106_Fill>:

//fills the screen buffer with a color
void sh1106_Fill(SH1106_COLOR color) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    memset(SH1106_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <sh1106_Fill+0x14>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <sh1106_Fill+0x16>
 8001b40:	23ff      	movs	r3, #255	@ 0xff
 8001b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b46:	4619      	mov	r1, r3
 8001b48:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <sh1106_Fill+0x2c>)
 8001b4a:	f008 fe62 	bl	800a812 <memset>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003c8 	.word	0x200003c8

08001b5c <sh1106_UpdateScreen>:

//writes the screen buffer to the display
void sh1106_UpdateScreen(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]
 8001b66:	e016      	b.n	8001b96 <sh1106_UpdateScreen+0x3a>
        sh1106_WriteCommand(0xB0 + i);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	3b50      	subs	r3, #80	@ 0x50
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f8a4 	bl	8001cbc <sh1106_WriteCommand>
        sh1106_WriteCommand(0x02);
 8001b74:	2002      	movs	r0, #2
 8001b76:	f000 f8a1 	bl	8001cbc <sh1106_WriteCommand>
        sh1106_WriteCommand(0x10);
 8001b7a:	2010      	movs	r0, #16
 8001b7c:	f000 f89e 	bl	8001cbc <sh1106_WriteCommand>
        sh1106_WriteData(&SH1106_Buffer[SH1106_WIDTH * i], SH1106_WIDTH);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <sh1106_UpdateScreen+0x4c>)
 8001b86:	4413      	add	r3, r2
 8001b88:	2180      	movs	r1, #128	@ 0x80
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f8ba 	bl	8001d04 <sh1106_WriteData>
    for (uint8_t i = 0; i < 8; i++) {
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	3301      	adds	r3, #1
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	d9e5      	bls.n	8001b68 <sh1106_UpdateScreen+0xc>
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003c8 	.word	0x200003c8

08001bac <sh1106_DrawPixel>:

// Draws a single pixel
void sh1106_DrawPixel(uint8_t x, uint8_t y, SH1106_COLOR color) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	71bb      	strb	r3, [r7, #6]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	717b      	strb	r3, [r7, #5]
    if (x >= SH1106_WIDTH || y >= SH1106_HEIGHT) {
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db3d      	blt.n	8001c42 <sh1106_DrawPixel+0x96>
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bca:	d83a      	bhi.n	8001c42 <sh1106_DrawPixel+0x96>
        return;
    }
    if (color == White) {
 8001bcc:	797b      	ldrb	r3, [r7, #5]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d11a      	bne.n	8001c08 <sh1106_DrawPixel+0x5c>
        SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	b2d8      	uxtb	r0, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	01db      	lsls	r3, r3, #7
 8001bde:	4413      	add	r3, r2
 8001be0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <sh1106_DrawPixel+0xa4>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b259      	sxtb	r1, r3
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	01db      	lsls	r3, r3, #7
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2c9      	uxtb	r1, r1
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <sh1106_DrawPixel+0xa4>)
 8001c04:	54d1      	strb	r1, [r2, r3]
 8001c06:	e01d      	b.n	8001c44 <sh1106_DrawPixel+0x98>
    } else {
        SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	01db      	lsls	r3, r3, #7
 8001c14:	4413      	add	r3, r2
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <sh1106_DrawPixel+0xa4>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	b25a      	sxtb	r2, r3
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	4013      	ands	r3, r2
 8001c30:	b259      	sxtb	r1, r3
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	4603      	mov	r3, r0
 8001c36:	01db      	lsls	r3, r3, #7
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2c9      	uxtb	r1, r1
 8001c3c:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <sh1106_DrawPixel+0xa4>)
 8001c3e:	54d1      	strb	r1, [r2, r3]
 8001c40:	e000      	b.n	8001c44 <sh1106_DrawPixel+0x98>
        return;
 8001c42:	bf00      	nop
    }
}
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200003c8 	.word	0x200003c8

08001c54 <sh1106_WriteString>:

//writes a string to the screen
void sh1106_WriteString(char* str, FontDef font, SH1106_COLOR color)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	1d38      	adds	r0, r7, #4
 8001c5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c62:	70fb      	strb	r3, [r7, #3]
    //loop until the end of the string ('\0' character)
    while (*str)
 8001c64:	e009      	b.n	8001c7a <sh1106_WriteString+0x26>
    {
        //draw the character the pointer is currently pointing to
        sh1106_WriteChar(*str, font, color);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	7818      	ldrb	r0, [r3, #0]
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	1d3a      	adds	r2, r7, #4
 8001c6e:	ca06      	ldmia	r2, {r1, r2}
 8001c70:	f000 f86e 	bl	8001d50 <sh1106_WriteChar>

        //move the pointer to the next character in the string
        str++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <sh1106_WriteString+0x12>
    }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <sh1106_SetCursor>:

//sets the cursor position
void sh1106_SetCursor(uint8_t x, uint8_t y) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71bb      	strb	r3, [r7, #6]
    currentX = x;
 8001c9c:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <sh1106_SetCursor+0x28>)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	7013      	strb	r3, [r2, #0]
    currentY = y;
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <sh1106_SetCursor+0x2c>)
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	7013      	strb	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	200007c8 	.word	0x200007c8
 8001cb8:	200007c9 	.word	0x200007c9

08001cbc <sh1106_WriteCommand>:

//SPI communication functions
void sh1106_WriteCommand(uint8_t command) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SH1106_CS_PORT, SH1106_CS_PIN, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2140      	movs	r1, #64	@ 0x40
 8001cca:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <sh1106_WriteCommand+0x3c>)
 8001ccc:	f001 fb04 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SH1106_DC_PORT, SH1106_DC_PIN, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	@ 0x80
 8001cd4:	4809      	ldr	r0, [pc, #36]	@ (8001cfc <sh1106_WriteCommand+0x40>)
 8001cd6:	f001 faff 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SH1106_SPI_PORT, &command, 1, 10);
 8001cda:	1df9      	adds	r1, r7, #7
 8001cdc:	230a      	movs	r3, #10
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4807      	ldr	r0, [pc, #28]	@ (8001d00 <sh1106_WriteCommand+0x44>)
 8001ce2:	f003 f9e2 	bl	80050aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SH1106_CS_PORT, SH1106_CS_PIN, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2140      	movs	r1, #64	@ 0x40
 8001cea:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <sh1106_WriteCommand+0x3c>)
 8001cec:	f001 faf4 	bl	80032d8 <HAL_GPIO_WritePin>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	200002b4 	.word	0x200002b4

08001d04 <sh1106_WriteData>:

void sh1106_WriteData(uint8_t* data, uint16_t size) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(SH1106_CS_PORT, SH1106_CS_PIN, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2140      	movs	r1, #64	@ 0x40
 8001d14:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <sh1106_WriteData+0x40>)
 8001d16:	f001 fadf 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SH1106_DC_PORT, SH1106_DC_PIN, GPIO_PIN_SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	480a      	ldr	r0, [pc, #40]	@ (8001d48 <sh1106_WriteData+0x44>)
 8001d20:	f001 fada 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SH1106_SPI_PORT, data, size, 100);
 8001d24:	887a      	ldrh	r2, [r7, #2]
 8001d26:	2364      	movs	r3, #100	@ 0x64
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <sh1106_WriteData+0x48>)
 8001d2c:	f003 f9bd 	bl	80050aa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SH1106_CS_PORT, SH1106_CS_PIN, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2140      	movs	r1, #64	@ 0x40
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <sh1106_WriteData+0x40>)
 8001d36:	f001 facf 	bl	80032d8 <HAL_GPIO_WritePin>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	200002b4 	.word	0x200002b4

08001d50 <sh1106_WriteChar>:

//writes a single character to the screen
char sh1106_WriteChar(char ch, FontDef font, SH1106_COLOR color) {
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	1d38      	adds	r0, r7, #4
 8001d5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4623      	mov	r3, r4
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	4613      	mov	r3, r2
 8001d66:	73bb      	strb	r3, [r7, #14]
    // check if there is enough space on the screen to draw the character
    if (SH1106_WIDTH < (currentX + font.FontWidth) || SH1106_HEIGHT < (currentY + font.FontHeight)) {
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <sh1106_WriteChar+0xc4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	793b      	ldrb	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	2b80      	cmp	r3, #128	@ 0x80
 8001d74:	dc06      	bgt.n	8001d84 <sh1106_WriteChar+0x34>
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <sh1106_WriteChar+0xc8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	797b      	ldrb	r3, [r7, #5]
 8001d7e:	4413      	add	r3, r2
 8001d80:	2b40      	cmp	r3, #64	@ 0x40
 8001d82:	dd01      	ble.n	8001d88 <sh1106_WriteChar+0x38>
        return 0; //not enough space
 8001d84:	2300      	movs	r3, #0
 8001d86:	e041      	b.n	8001e0c <sh1106_WriteChar+0xbc>
    }

    //iterates through each vertical column of the character
    for (int j = 0; j < font.FontWidth; j++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e02f      	b.n	8001dee <sh1106_WriteChar+0x9e>
        //iterates through each pixel in the vertical column
        for (int i = 0; i < font.FontHeight; i++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e024      	b.n	8001dde <sh1106_WriteChar+0x8e>
            //check the bit for the current pixel and draw if it's set
            if ((font.data[((ch - 32) * font.FontWidth) + j] >> i) & 0x01) {
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	3a20      	subs	r2, #32
 8001d9a:	7939      	ldrb	r1, [r7, #4]
 8001d9c:	fb02 f101 	mul.w	r1, r2, r1
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	440a      	add	r2, r1
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa42 f303 	asr.w	r3, r2, r3
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00f      	beq.n	8001dd8 <sh1106_WriteChar+0x88>
                sh1106_DrawPixel(currentX + j, currentY + i, color);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <sh1106_WriteChar+0xc4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <sh1106_WriteChar+0xc8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	7bba      	ldrb	r2, [r7, #14]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff feea 	bl	8001bac <sh1106_DrawPixel>
        for (int i = 0; i < font.FontHeight; i++) {
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	461a      	mov	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	dbd5      	blt.n	8001d94 <sh1106_WriteChar+0x44>
    for (int j = 0; j < font.FontWidth; j++) {
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	461a      	mov	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	dbca      	blt.n	8001d8e <sh1106_WriteChar+0x3e>
            }
        }
    }

    //moves the cursor to the right for the next character, adding a 1-pixel gap
    currentX += font.FontWidth + 1;
 8001df8:	793a      	ldrb	r2, [r7, #4]
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <sh1106_WriteChar+0xc4>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <sh1106_WriteChar+0xc4>)
 8001e08:	701a      	strb	r2, [r3, #0]

    return ch;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	200007c8 	.word	0x200007c8
 8001e18:	200007c9 	.word	0x200007c9

08001e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_MspInit+0x54>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	f06f 0001 	mvn.w	r0, #1
 8001e62:	f001 f87b 	bl	8002f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_ADC_MspInit+0x7c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d127      	bne.n	8001ee6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_ADC_MspInit+0x80>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <HAL_ADC_MspInit+0x84>)
 8001ee2:	f001 f865 	bl	8002fb0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_I2C_MspInit+0x84>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12c      	bne.n	8001f78 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f40:	2312      	movs	r3, #18
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <HAL_I2C_MspInit+0x8c>)
 8001f58:	f001 f82a 	bl	8002fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	@ 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40005400 	.word	0x40005400
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400

08001f8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a30      	ldr	r2, [pc, #192]	@ (800206c <HAL_SPI_MspInit+0xe0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d15a      	bne.n	8002064 <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a20      	ldr	r2, [pc, #128]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_SPI_MspInit+0xe4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002002:	2302      	movs	r3, #2
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002012:	2307      	movs	r3, #7
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4815      	ldr	r0, [pc, #84]	@ (8002074 <HAL_SPI_MspInit+0xe8>)
 800201e:	f000 ffc7 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002022:	2304      	movs	r3, #4
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002032:	2305      	movs	r3, #5
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	480d      	ldr	r0, [pc, #52]	@ (8002074 <HAL_SPI_MspInit+0xe8>)
 800203e:	f000 ffb7 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002054:	2305      	movs	r3, #5
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	@ (8002078 <HAL_SPI_MspInit+0xec>)
 8002060:	f000 ffa6 	bl	8002fb0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40003800 	.word	0x40003800
 8002070:	40023800 	.word	0x40023800
 8002074:	40020800 	.word	0x40020800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6413      	str	r3, [r2, #64]	@ 0x40
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_TIM_Base_MspInit+0x3c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020dc:	d11d      	bne.n	800211a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020fa:	2302      	movs	r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4619      	mov	r1, r3
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <HAL_TIM_MspPostInit+0x6c>)
 8002116:	f000 ff4b 	bl	8002fb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000

0800212c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <HAL_UART_MspInit+0x84>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12b      	bne.n	80021a6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_UART_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002186:	230c      	movs	r3, #12
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002196:	2307      	movs	r3, #7
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <HAL_UART_MspInit+0x8c>)
 80021a2:	f000 ff05 	bl	8002fb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	@ 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <HAL_InitTick+0xd0>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <HAL_InitTick+0xd0>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6453      	str	r3, [r2, #68]	@ 0x44
 80021dc:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <HAL_InitTick+0xd0>)
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f9d0 	bl	8004598 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021f8:	f002 f9ba 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 80021fc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	4a23      	ldr	r2, [pc, #140]	@ (8002290 <HAL_InitTick+0xd4>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3b01      	subs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <HAL_InitTick+0xd8>)
 800220e:	4a22      	ldr	r2, [pc, #136]	@ (8002298 <HAL_InitTick+0xdc>)
 8002210:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <HAL_InitTick+0xd8>)
 8002214:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002218:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800221a:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <HAL_InitTick+0xd8>)
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_InitTick+0xd8>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_InitTick+0xd8>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <HAL_InitTick+0xd8>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002232:	4818      	ldr	r0, [pc, #96]	@ (8002294 <HAL_InitTick+0xd8>)
 8002234:	f003 f95a 	bl	80054ec <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800223e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11b      	bne.n	800227e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002246:	4813      	ldr	r0, [pc, #76]	@ (8002294 <HAL_InitTick+0xd8>)
 8002248:	f003 f9a0 	bl	800558c <HAL_TIM_Base_Start_IT>
 800224c:	4603      	mov	r3, r0
 800224e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800225a:	2019      	movs	r0, #25
 800225c:	f000 fe9a 	bl	8002f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	d808      	bhi.n	8002278 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002266:	2200      	movs	r2, #0
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	2019      	movs	r0, #25
 800226c:	f000 fe76 	bl	8002f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <HAL_InitTick+0xe0>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e002      	b.n	800227e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800227e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002282:	4618      	mov	r0, r3
 8002284:	3730      	adds	r7, #48	@ 0x30
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	431bde83 	.word	0x431bde83
 8002294:	200007cc 	.word	0x200007cc
 8002298:	40010000 	.word	0x40010000
 800229c:	2000000c 	.word	0x2000000c

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <NMI_Handler+0x4>

080022a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <MemManage_Handler+0x4>

080022b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022de:	f003 fae7 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200007cc 	.word	0x200007cc

080022ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022f4:	f001 f824 	bl	8003340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_kill>:

int _kill(int pid, int sig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002316:	f008 fb2d 	bl	800a974 <__errno>
 800231a:	4603      	mov	r3, r0
 800231c:	2216      	movs	r2, #22
 800231e:	601a      	str	r2, [r3, #0]
  return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_exit>:

void _exit (int status)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ffe7 	bl	800230c <_kill>
  while (1) {}    /* Make sure we hang here */
 800233e:	bf00      	nop
 8002340:	e7fd      	b.n	800233e <_exit+0x12>

08002342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e00a      	b.n	800236a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002354:	f3af 8000 	nop.w
 8002358:	4601      	mov	r1, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	60ba      	str	r2, [r7, #8]
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf0      	blt.n	8002354 <_read+0x12>
  }

  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e009      	b.n	80023a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbf1      	blt.n	800238e <_write+0x12>
  }
  return len;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023dc:	605a      	str	r2, [r3, #4]
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f008 fa92 	bl	800a974 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20020000 	.word	0x20020000
 800247c:	00000400 	.word	0x00000400
 8002480:	20000814 	.word	0x20000814
 8002484:	20005350 	.word	0x20005350

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024b0:	f7ff ffea 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	@ (80024f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024da:	f008 fa51 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7fe fe57 	bl	8001190 <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024f0:	0800d27c 	.word	0x0800d27c
  ldr r2, =_sbss
 80024f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024f8:	20005350 	.word	0x20005350

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 fd0c 	bl	8002f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	200f      	movs	r0, #15
 8002530:	f7ff fe44 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fc72 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000010 	.word	0x20000010
 8002568:	20000818 	.word	0x20000818

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000818 	.word	0x20000818

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff ffee 	bl	800256c <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_Delay+0x44>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffde 	bl	800256c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000010 	.word	0x20000010

080025cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fc42 	bl	8001e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	f043 0202 	orr.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fae8 	bl	8002bf4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
 800263a:	e001      	b.n	8002640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Start+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e0b2      	b.n	80027d4 <HAL_ADC_Start+0x180>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d018      	beq.n	80026b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002694:	4b52      	ldr	r3, [pc, #328]	@ (80027e0 <HAL_ADC_Start+0x18c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_ADC_Start+0x190>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9a      	lsrs	r2, r3, #18
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d17a      	bne.n	80027ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d106      	bne.n	8002712 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f023 0206 	bic.w	r2, r3, #6
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002710:	e002      	b.n	8002718 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002720:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_ADC_Start+0x194>)
 8002722:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800272c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b00      	cmp	r3, #0
 8002738:	d12a      	bne.n	8002790 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <HAL_ADC_Start+0x198>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d015      	beq.n	8002770 <HAL_ADC_Start+0x11c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_ADC_Start+0x19c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d105      	bne.n	800275a <HAL_ADC_Start+0x106>
 800274e:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <HAL_ADC_Start+0x194>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a25      	ldr	r2, [pc, #148]	@ (80027f4 <HAL_ADC_Start+0x1a0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d136      	bne.n	80027d2 <HAL_ADC_Start+0x17e>
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_ADC_Start+0x194>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d130      	bne.n	80027d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d129      	bne.n	80027d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	e020      	b.n	80027d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <HAL_ADC_Start+0x198>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11b      	bne.n	80027d2 <HAL_ADC_Start+0x17e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e00b      	b.n	80027d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	20000008 	.word	0x20000008
 80027e4:	431bde83 	.word	0x431bde83
 80027e8:	40012300 	.word	0x40012300
 80027ec:	40012000 	.word	0x40012000
 80027f0:	40012100 	.word	0x40012100
 80027f4:	40012200 	.word	0x40012200

080027f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ADC_Stop+0x16>
 800280a:	2302      	movs	r3, #2
 800280c:	e021      	b.n	8002852 <HAL_ADC_Stop+0x5a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287a:	d113      	bne.n	80028a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288a:	d10b      	bne.n	80028a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e063      	b.n	800296c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a4:	f7ff fe62 	bl	800256c <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028aa:	e021      	b.n	80028f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d01d      	beq.n	80028f0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_ADC_PollForConversion+0x6c>
 80028ba:	f7ff fe57 	bl	800256c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d212      	bcs.n	80028f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d00b      	beq.n	80028f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e03d      	b.n	800296c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d1d6      	bne.n	80028ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0212 	mvn.w	r2, #18
 8002906:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d123      	bne.n	800296a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11f      	bne.n	800296a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d111      	bne.n	800296a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e113      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x244>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	d925      	bls.n	8002a08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	3b1e      	subs	r3, #30
 80029d2:	2207      	movs	r2, #7
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68d9      	ldr	r1, [r3, #12]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	4603      	mov	r3, r0
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4403      	add	r3, r0
 80029fa:	3b1e      	subs	r3, #30
 80029fc:	409a      	lsls	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e022      	b.n	8002a4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6919      	ldr	r1, [r3, #16]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4403      	add	r3, r0
 8002a44:	409a      	lsls	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d824      	bhi.n	8002aa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b05      	subs	r3, #5
 8002a68:	221f      	movs	r2, #31
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b05      	subs	r3, #5
 8002a92:	fa00 f203 	lsl.w	r2, r0, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a9e:	e04c      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d824      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b23      	subs	r3, #35	@ 0x23
 8002aba:	221f      	movs	r2, #31
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b23      	subs	r3, #35	@ 0x23
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002af0:	e023      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3b41      	subs	r3, #65	@ 0x41
 8002b04:	221f      	movs	r2, #31
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	400a      	ands	r2, r1
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4618      	mov	r0, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b41      	subs	r3, #65	@ 0x41
 8002b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_ADC_ConfigChannel+0x250>)
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a28      	ldr	r2, [pc, #160]	@ (8002be4 <HAL_ADC_ConfigChannel+0x254>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10f      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1d8>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b12      	cmp	r3, #18
 8002b4e:	d10b      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <HAL_ADC_ConfigChannel+0x254>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12b      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x23a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_ADC_ConfigChannel+0x258>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x1f4>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d122      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <HAL_ADC_ConfigChannel+0x258>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_ADC_ConfigChannel+0x25c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x260>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0c9a      	lsrs	r2, r3, #18
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f9      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40012300 	.word	0x40012300
 8002be4:	40012000 	.word	0x40012000
 8002be8:	10000012 	.word	0x10000012
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfc:	4b79      	ldr	r3, [pc, #484]	@ (8002de4 <ADC_Init+0x1f0>)
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	021a      	lsls	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	4a58      	ldr	r2, [pc, #352]	@ (8002de8 <ADC_Init+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e00f      	b.n	8002cf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0202 	bic.w	r2, r2, #2
 8002d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e1b      	ldrb	r3, [r3, #24]
 8002d0c:	005a      	lsls	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	035a      	lsls	r2, r3, #13
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	e007      	b.n	8002d68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	051a      	lsls	r2, r3, #20
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002daa:	025a      	lsls	r2, r3, #9
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	029a      	lsls	r2, r3, #10
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40012300 	.word	0x40012300
 8002de8:	0f000001 	.word	0x0f000001

08002dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db0b      	blt.n	8002e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4907      	ldr	r1, [pc, #28]	@ (8002e88 <__NVIC_EnableIRQ+0x38>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2001      	movs	r0, #1
 8002e72:	fa00 f202 	lsl.w	r2, r0, r2
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e100 	.word	0xe000e100

08002e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db0a      	blt.n	8002eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	490c      	ldr	r1, [pc, #48]	@ (8002ed8 <__NVIC_SetPriority+0x4c>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb4:	e00a      	b.n	8002ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4908      	ldr	r1, [pc, #32]	@ (8002edc <__NVIC_SetPriority+0x50>)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	440b      	add	r3, r1
 8002eca:	761a      	strb	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f1c3 0307 	rsb	r3, r3, #7
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf28      	it	cs
 8002efe:	2304      	movcs	r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <NVIC_EncodePriority+0x30>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b03      	subs	r3, #3
 8002f0e:	e000      	b.n	8002f12 <NVIC_EncodePriority+0x32>
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43d9      	mvns	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	4313      	orrs	r3, r2
         );
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff4c 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6e:	f7ff ff61 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f7ff ffb1 	bl	8002ee0 <NVIC_EncodePriority>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff80 	bl	8002e8c <__NVIC_SetPriority>
}
 8002f8c:	bf00      	nop
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff54 	bl	8002e50 <__NVIC_EnableIRQ>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e165      	b.n	8003298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 8154 	bne.w	8003292 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d005      	beq.n	8003002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d130      	bne.n	8003064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b03      	cmp	r3, #3
 800306e:	d017      	beq.n	80030a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80ae 	beq.w	8003292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b5d      	ldr	r3, [pc, #372]	@ (80032b0 <HAL_GPIO_Init+0x300>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4a5c      	ldr	r2, [pc, #368]	@ (80032b0 <HAL_GPIO_Init+0x300>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003144:	6453      	str	r3, [r2, #68]	@ 0x44
 8003146:	4b5a      	ldr	r3, [pc, #360]	@ (80032b0 <HAL_GPIO_Init+0x300>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	4a58      	ldr	r2, [pc, #352]	@ (80032b4 <HAL_GPIO_Init+0x304>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	@ (80032b8 <HAL_GPIO_Init+0x308>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x21a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4e      	ldr	r2, [pc, #312]	@ (80032bc <HAL_GPIO_Init+0x30c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x216>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4d      	ldr	r2, [pc, #308]	@ (80032c0 <HAL_GPIO_Init+0x310>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x212>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4c      	ldr	r2, [pc, #304]	@ (80032c4 <HAL_GPIO_Init+0x314>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <HAL_GPIO_Init+0x318>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x20a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <HAL_GPIO_Init+0x31c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x206>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a49      	ldr	r2, [pc, #292]	@ (80032d0 <HAL_GPIO_Init+0x320>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x202>
 80031ae:	2306      	movs	r3, #6
 80031b0:	e00c      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e00a      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031b6:	2305      	movs	r3, #5
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031ba:	2304      	movs	r3, #4
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x21c>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	@ (80032b4 <HAL_GPIO_Init+0x304>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b3a      	ldr	r3, [pc, #232]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b2f      	ldr	r3, [pc, #188]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a26      	ldr	r2, [pc, #152]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a11      	ldr	r2, [pc, #68]	@ (80032d4 <HAL_GPIO_Init+0x324>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f ae96 	bls.w	8002fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f4:	e003      	b.n	80032fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	041a      	lsls	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43d9      	mvns	r1, r3
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	400b      	ands	r3, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fa06 	bl	8001770 <HAL_GPIO_EXTI_Callback>
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e12b      	b.n	80035da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fdb0 	bl	8001efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d4:	f001 f8b8 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a81      	ldr	r2, [pc, #516]	@ (80035e4 <HAL_I2C_Init+0x274>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d807      	bhi.n	80033f4 <HAL_I2C_Init+0x84>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a80      	ldr	r2, [pc, #512]	@ (80035e8 <HAL_I2C_Init+0x278>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	bf94      	ite	ls
 80033ec:	2301      	movls	r3, #1
 80033ee:	2300      	movhi	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e006      	b.n	8003402 <HAL_I2C_Init+0x92>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a7d      	ldr	r2, [pc, #500]	@ (80035ec <HAL_I2C_Init+0x27c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0e7      	b.n	80035da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a78      	ldr	r2, [pc, #480]	@ (80035f0 <HAL_I2C_Init+0x280>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a6a      	ldr	r2, [pc, #424]	@ (80035e4 <HAL_I2C_Init+0x274>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <HAL_I2C_Init+0xd4>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	e009      	b.n	8003458 <HAL_I2C_Init+0xe8>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a69      	ldr	r2, [pc, #420]	@ (80035f4 <HAL_I2C_Init+0x284>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	3301      	adds	r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800346a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	495c      	ldr	r1, [pc, #368]	@ (80035e4 <HAL_I2C_Init+0x274>)
 8003474:	428b      	cmp	r3, r1
 8003476:	d819      	bhi.n	80034ac <HAL_I2C_Init+0x13c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e59      	subs	r1, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fbb1 f3f3 	udiv	r3, r1, r3
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800348c:	400b      	ands	r3, r1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_I2C_Init+0x138>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e59      	subs	r1, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	e051      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e04f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <HAL_I2C_Init+0x168>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e012      	b.n	80034fe <HAL_I2C_Init+0x18e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	0099      	lsls	r1, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x196>
 8003502:	2301      	movs	r3, #1
 8003504:	e022      	b.n	800354c <HAL_I2C_Init+0x1dc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10e      	bne.n	800352c <HAL_I2C_Init+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e58      	subs	r0, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	440b      	add	r3, r1
 800351c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800352a:	e00f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	0099      	lsls	r1, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800357a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6911      	ldr	r1, [r2, #16]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	000186a0 	.word	0x000186a0
 80035e8:	001e847f 	.word	0x001e847f
 80035ec:	003d08ff 	.word	0x003d08ff
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
 8003608:	4613      	mov	r3, r2
 800360a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7fe ffae 	bl	800256c <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 80e0 	bne.w	80037e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	4970      	ldr	r1, [pc, #448]	@ (80037ec <HAL_I2C_Master_Transmit+0x1f4>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fc64 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	e0d3      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2C_Master_Transmit+0x50>
 8003644:	2302      	movs	r3, #2
 8003646:	e0cc      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d007      	beq.n	800366e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2221      	movs	r2, #33	@ 0x21
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2210      	movs	r2, #16
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a50      	ldr	r2, [pc, #320]	@ (80037f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 face 	bl	8003c58 <I2C_MasterRequestWrite>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e08d      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036dc:	e066      	b.n	80037ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fd22 	bl	800412c <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06b      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d11b      	bne.n	8003780 <HAL_I2C_Master_Transmit+0x188>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d017      	beq.n	8003780 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	6a39      	ldr	r1, [r7, #32]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fd19 	bl	80041bc <I2C_WaitOnBTFFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e01a      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d194      	bne.n	80036de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	00100002 	.word	0x00100002
 80037f0:	ffff0000 	.word	0xffff0000

080037f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	817b      	strh	r3, [r7, #10]
 8003804:	4613      	mov	r3, r2
 8003806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7fe feb0 	bl	800256c <HAL_GetTick>
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	f040 8217 	bne.w	8003c4a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2319      	movs	r3, #25
 8003822:	2201      	movs	r2, #1
 8003824:	497c      	ldr	r1, [pc, #496]	@ (8003a18 <HAL_I2C_Master_Receive+0x224>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fb66 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	e20a      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_I2C_Master_Receive+0x50>
 8003840:	2302      	movs	r3, #2
 8003842:	e203      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d007      	beq.n	800386a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2222      	movs	r2, #34	@ 0x22
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2210      	movs	r2, #16
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	893a      	ldrh	r2, [r7, #8]
 800389a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a1c <HAL_I2C_Master_Receive+0x228>)
 80038aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa52 	bl	8003d5c <I2C_MasterRequestRead>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e1c4      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d113      	bne.n	80038f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e198      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d11b      	bne.n	8003932 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e178      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	2b02      	cmp	r3, #2
 8003938:	d11b      	bne.n	8003972 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003948:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	e158      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003998:	e144      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	2b03      	cmp	r3, #3
 80039a0:	f200 80f1 	bhi.w	8003b86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d123      	bne.n	80039f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fc4b 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e145      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039f2:	e117      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d14e      	bne.n	8003a9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	2200      	movs	r2, #0
 8003a04:	4906      	ldr	r1, [pc, #24]	@ (8003a20 <HAL_I2C_Master_Receive+0x22c>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fa76 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e11a      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
 8003a16:	bf00      	nop
 8003a18:	00100002 	.word	0x00100002
 8003a1c:	ffff0000 	.word	0xffff0000
 8003a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a98:	e0c4      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	496c      	ldr	r1, [pc, #432]	@ (8003c54 <HAL_I2C_Master_Receive+0x460>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fa27 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0cb      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	2200      	movs	r2, #0
 8003afe:	4955      	ldr	r1, [pc, #340]	@ (8003c54 <HAL_I2C_Master_Receive+0x460>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f9f9 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09d      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b84:	e04e      	b.n	8003c24 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fb5e 	bl	800424c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e058      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d124      	bne.n	8003c24 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f aeb6 	bne.w	800399a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	@ 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010004 	.word	0x00010004

08003c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	460b      	mov	r3, r1
 8003c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d006      	beq.n	8003c82 <I2C_MasterRequestWrite+0x2a>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d003      	beq.n	8003c82 <I2C_MasterRequestWrite+0x2a>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c80:	d108      	bne.n	8003c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e00b      	b.n	8003cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	2b12      	cmp	r3, #18
 8003c9a:	d107      	bne.n	8003cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f91d 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd2:	d103      	bne.n	8003cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e035      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ce8:	d108      	bne.n	8003cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	e01b      	b.n	8003d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cfc:	897b      	ldrh	r3, [r7, #10]
 8003cfe:	11db      	asrs	r3, r3, #7
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f063 030f 	orn	r3, r3, #15
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <I2C_MasterRequestWrite+0xfc>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f966 	bl	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e010      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4907      	ldr	r1, [pc, #28]	@ (8003d58 <I2C_MasterRequestWrite+0x100>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f956 	bl	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	00010008 	.word	0x00010008
 8003d58:	00010002 	.word	0x00010002

08003d5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d006      	beq.n	8003d96 <I2C_MasterRequestRead+0x3a>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d003      	beq.n	8003d96 <I2C_MasterRequestRead+0x3a>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e00b      	b.n	8003dc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	2b11      	cmp	r3, #17
 8003dae:	d107      	bne.n	8003dc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f893 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de6:	d103      	bne.n	8003df0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e079      	b.n	8003ee8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dfc:	d108      	bne.n	8003e10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e05f      	b.n	8003ed0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e10:	897b      	ldrh	r3, [r7, #10]
 8003e12:	11db      	asrs	r3, r3, #7
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f063 030f 	orn	r3, r3, #15
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4930      	ldr	r1, [pc, #192]	@ (8003ef0 <I2C_MasterRequestRead+0x194>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f8dc 	bl	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e054      	b.n	8003ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4929      	ldr	r1, [pc, #164]	@ (8003ef4 <I2C_MasterRequestRead+0x198>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f8cc 	bl	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e044      	b.n	8003ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f831 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eaa:	d103      	bne.n	8003eb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e017      	b.n	8003ee8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003eb8:	897b      	ldrh	r3, [r7, #10]
 8003eba:	11db      	asrs	r3, r3, #7
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0306 	and.w	r3, r3, #6
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f063 030e 	orn	r3, r3, #14
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4907      	ldr	r1, [pc, #28]	@ (8003ef4 <I2C_MasterRequestRead+0x198>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f888 	bl	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010008 	.word	0x00010008
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f08:	e048      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d044      	beq.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe fb2b 	bl	800256c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d139      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10d      	bne.n	8003f4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf0c      	ite	eq
 8003f44:	2301      	moveq	r3, #1
 8003f46:	2300      	movne	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	e00c      	b.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d116      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e023      	b.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10d      	bne.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	e00c      	b.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d093      	beq.n	8003f0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ffa:	e071      	b.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400a:	d123      	bne.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f043 0204 	orr.w	r2, r3, #4
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e067      	b.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d041      	beq.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fe fa86 	bl	800256c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d136      	bne.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10c      	bne.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e00b      	b.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	43da      	mvns	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e021      	b.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10c      	bne.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	43da      	mvns	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4013      	ands	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e00b      	b.n	800411c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	43da      	mvns	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f af6d 	bne.w	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004138:	e034      	b.n	80041a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8e3 	bl	8004306 <I2C_IsAcknowledgeFailed>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e034      	b.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d028      	beq.n	80041a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fe fa0b 	bl	800256c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11d      	bne.n	80041a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b80      	cmp	r3, #128	@ 0x80
 8004174:	d016      	beq.n	80041a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e007      	b.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b80      	cmp	r3, #128	@ 0x80
 80041b0:	d1c3      	bne.n	800413a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c8:	e034      	b.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f89b 	bl	8004306 <I2C_IsAcknowledgeFailed>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e034      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d028      	beq.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe f9c3 	bl	800256c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11d      	bne.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d016      	beq.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d1c3      	bne.n	80041ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004258:	e049      	b.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d119      	bne.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e030      	b.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe f966 	bl	800256c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11d      	bne.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d016      	beq.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e007      	b.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d1ae      	bne.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431c:	d11b      	bne.n	8004356 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004326:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0cc      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b68      	ldr	r3, [pc, #416]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d90c      	bls.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b65      	ldr	r3, [pc, #404]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0b8      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b8:	4b59      	ldr	r3, [pc, #356]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a58      	ldr	r2, [pc, #352]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d0:	4b53      	ldr	r3, [pc, #332]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a52      	ldr	r2, [pc, #328]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043dc:	4b50      	ldr	r3, [pc, #320]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	494d      	ldr	r1, [pc, #308]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d044      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b47      	ldr	r3, [pc, #284]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d119      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e07f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d003      	beq.n	8004422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441e:	2b03      	cmp	r3, #3
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b3f      	ldr	r3, [pc, #252]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e06f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3b      	ldr	r3, [pc, #236]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e067      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b37      	ldr	r3, [pc, #220]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4934      	ldr	r1, [pc, #208]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fe f88a 	bl	800256c <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fe f886 	bl	800256c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e04f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b25      	ldr	r3, [pc, #148]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d20c      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b22      	ldr	r3, [pc, #136]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e032      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4916      	ldr	r1, [pc, #88]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d6:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	490e      	ldr	r1, [pc, #56]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ea:	f000 f887 	bl	80045fc <HAL_RCC_GetSysClockFreq>
 80044ee:	4602      	mov	r2, r0
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	490a      	ldr	r1, [pc, #40]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	5ccb      	ldrb	r3, [r1, r3]
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	4a09      	ldr	r2, [pc, #36]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004506:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd fe56 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023c00 	.word	0x40023c00
 8004520:	40023800 	.word	0x40023800
 8004524:	0800cee0 	.word	0x0800cee0
 8004528:	20000008 	.word	0x20000008
 800452c:	2000000c 	.word	0x2000000c

08004530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000008 	.word	0x20000008

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800454c:	f7ff fff0 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0a9b      	lsrs	r3, r3, #10
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	@ (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	0800cef0 	.word	0x0800cef0

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004574:	f7ff ffdc 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	0800cef0 	.word	0x0800cef0

08004598 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	220f      	movs	r2, #15
 80045a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045a8:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0203 	and.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045b4:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045c0:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <HAL_RCC_GetClockConfig+0x60>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40023c00 	.word	0x40023c00

080045fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004600:	b0ae      	sub	sp, #184	@ 0xb8
 8004602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004622:	4bcb      	ldr	r3, [pc, #812]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b0c      	cmp	r3, #12
 800462c:	f200 8206 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x440>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004a3d 	.word	0x08004a3d
 8004640:	08004a3d 	.word	0x08004a3d
 8004644:	08004a3d 	.word	0x08004a3d
 8004648:	08004675 	.word	0x08004675
 800464c:	08004a3d 	.word	0x08004a3d
 8004650:	08004a3d 	.word	0x08004a3d
 8004654:	08004a3d 	.word	0x08004a3d
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004a3d 	.word	0x08004a3d
 8004660:	08004a3d 	.word	0x08004a3d
 8004664:	08004a3d 	.word	0x08004a3d
 8004668:	0800486d 	.word	0x0800486d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4bb9      	ldr	r3, [pc, #740]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x358>)
 800466e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004672:	e1e7      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004674:	4bb8      	ldr	r3, [pc, #736]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800467a:	e1e3      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800467c:	4bb4      	ldr	r3, [pc, #720]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004688:	4bb1      	ldr	r3, [pc, #708]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d071      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004694:	4bae      	ldr	r3, [pc, #696]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80046a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	0159      	lsls	r1, r3, #5
 80046c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046cc:	0150      	lsls	r0, r2, #5
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4621      	mov	r1, r4
 80046d4:	1a51      	subs	r1, r2, r1
 80046d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80046d8:	4629      	mov	r1, r5
 80046da:	eb63 0301 	sbc.w	r3, r3, r1
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046ec:	4649      	mov	r1, r9
 80046ee:	018b      	lsls	r3, r1, #6
 80046f0:	4641      	mov	r1, r8
 80046f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046f6:	4641      	mov	r1, r8
 80046f8:	018a      	lsls	r2, r1, #6
 80046fa:	4641      	mov	r1, r8
 80046fc:	1a51      	subs	r1, r2, r1
 80046fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004700:	4649      	mov	r1, r9
 8004702:	eb63 0301 	sbc.w	r3, r3, r1
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004714:	4649      	mov	r1, r9
 8004716:	00cb      	lsls	r3, r1, #3
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471e:	4641      	mov	r1, r8
 8004720:	00ca      	lsls	r2, r1, #3
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	4603      	mov	r3, r0
 8004728:	4622      	mov	r2, r4
 800472a:	189b      	adds	r3, r3, r2
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30
 800472e:	462b      	mov	r3, r5
 8004730:	460a      	mov	r2, r1
 8004732:	eb42 0303 	adc.w	r3, r2, r3
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004744:	4629      	mov	r1, r5
 8004746:	024b      	lsls	r3, r1, #9
 8004748:	4621      	mov	r1, r4
 800474a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800474e:	4621      	mov	r1, r4
 8004750:	024a      	lsls	r2, r1, #9
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004760:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004764:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004768:	f7fc fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004776:	e067      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004778:	4b75      	ldr	r3, [pc, #468]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004784:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004788:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004792:	2300      	movs	r3, #0
 8004794:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004796:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	f04f 0000 	mov.w	r0, #0
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	0159      	lsls	r1, r3, #5
 80047a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ac:	0150      	lsls	r0, r2, #5
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4621      	mov	r1, r4
 80047b4:	1a51      	subs	r1, r2, r1
 80047b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047b8:	4629      	mov	r1, r5
 80047ba:	eb63 0301 	sbc.w	r3, r3, r1
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80047cc:	4649      	mov	r1, r9
 80047ce:	018b      	lsls	r3, r1, #6
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d6:	4641      	mov	r1, r8
 80047d8:	018a      	lsls	r2, r1, #6
 80047da:	4641      	mov	r1, r8
 80047dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80047e0:	4649      	mov	r1, r9
 80047e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fa:	4692      	mov	sl, r2
 80047fc:	469b      	mov	fp, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	eb1a 0303 	adds.w	r3, sl, r3
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	462b      	mov	r3, r5
 8004808:	eb4b 0303 	adc.w	r3, fp, r3
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004830:	2200      	movs	r2, #0
 8004832:	673b      	str	r3, [r7, #112]	@ 0x70
 8004834:	677a      	str	r2, [r7, #116]	@ 0x74
 8004836:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800483a:	f7fc f9d5 	bl	8000be8 <__aeabi_uldivmod>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4613      	mov	r3, r2
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004848:	4b41      	ldr	r3, [pc, #260]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800485a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800485e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800486a:	e0eb      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800486c:	4b38      	ldr	r3, [pc, #224]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004878:	4b35      	ldr	r3, [pc, #212]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d06b      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b32      	ldr	r3, [pc, #200]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x354>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800488e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	663b      	str	r3, [r7, #96]	@ 0x60
 8004898:	2300      	movs	r3, #0
 800489a:	667b      	str	r3, [r7, #100]	@ 0x64
 800489c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80048a0:	4622      	mov	r2, r4
 80048a2:	462b      	mov	r3, r5
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	0159      	lsls	r1, r3, #5
 80048ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b2:	0150      	lsls	r0, r2, #5
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4621      	mov	r1, r4
 80048ba:	1a51      	subs	r1, r2, r1
 80048bc:	61b9      	str	r1, [r7, #24]
 80048be:	4629      	mov	r1, r5
 80048c0:	eb63 0301 	sbc.w	r3, r3, r1
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80048d2:	4659      	mov	r1, fp
 80048d4:	018b      	lsls	r3, r1, #6
 80048d6:	4651      	mov	r1, sl
 80048d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048dc:	4651      	mov	r1, sl
 80048de:	018a      	lsls	r2, r1, #6
 80048e0:	4651      	mov	r1, sl
 80048e2:	ebb2 0801 	subs.w	r8, r2, r1
 80048e6:	4659      	mov	r1, fp
 80048e8:	eb63 0901 	sbc.w	r9, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004900:	4690      	mov	r8, r2
 8004902:	4699      	mov	r9, r3
 8004904:	4623      	mov	r3, r4
 8004906:	eb18 0303 	adds.w	r3, r8, r3
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	462b      	mov	r3, r5
 800490e:	eb49 0303 	adc.w	r3, r9, r3
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004920:	4629      	mov	r1, r5
 8004922:	024b      	lsls	r3, r1, #9
 8004924:	4621      	mov	r1, r4
 8004926:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800492a:	4621      	mov	r1, r4
 800492c:	024a      	lsls	r2, r1, #9
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004936:	2200      	movs	r2, #0
 8004938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800493a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800493c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004940:	f7fc f952 	bl	8000be8 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494e:	e065      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x420>
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x458>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	2200      	movs	r2, #0
 8004964:	4618      	mov	r0, r3
 8004966:	4611      	mov	r1, r2
 8004968:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800496c:	653b      	str	r3, [r7, #80]	@ 0x50
 800496e:	2300      	movs	r3, #0
 8004970:	657b      	str	r3, [r7, #84]	@ 0x54
 8004972:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004976:	4642      	mov	r2, r8
 8004978:	464b      	mov	r3, r9
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4641      	mov	r1, r8
 8004990:	1a51      	subs	r1, r2, r1
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	4649      	mov	r1, r9
 8004996:	eb63 0301 	sbc.w	r3, r3, r1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80049a8:	4659      	mov	r1, fp
 80049aa:	018b      	lsls	r3, r1, #6
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b2:	4651      	mov	r1, sl
 80049b4:	018a      	lsls	r2, r1, #6
 80049b6:	4651      	mov	r1, sl
 80049b8:	1a54      	subs	r4, r2, r1
 80049ba:	4659      	mov	r1, fp
 80049bc:	eb63 0501 	sbc.w	r5, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	00eb      	lsls	r3, r5, #3
 80049ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ce:	00e2      	lsls	r2, r4, #3
 80049d0:	4614      	mov	r4, r2
 80049d2:	461d      	mov	r5, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	18e3      	adds	r3, r4, r3
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	464b      	mov	r3, r9
 80049dc:	eb45 0303 	adc.w	r3, r5, r3
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ee:	4629      	mov	r1, r5
 80049f0:	028b      	lsls	r3, r1, #10
 80049f2:	4621      	mov	r1, r4
 80049f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f8:	4621      	mov	r1, r4
 80049fa:	028a      	lsls	r2, r1, #10
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a04:	2200      	movs	r2, #0
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a0e:	f7fc f8eb 	bl	8000be8 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4613      	mov	r3, r2
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	0f1b      	lsrs	r3, r3, #28
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a3a:	e003      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	37b8      	adds	r7, #184	@ 0xb8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	00f42400 	.word	0x00f42400

08004a5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e28d      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8083 	beq.w	8004b82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a7c:	4b94      	ldr	r3, [pc, #592]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d019      	beq.n	8004abc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a88:	4b91      	ldr	r3, [pc, #580]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a94:	4b8e      	ldr	r3, [pc, #568]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa0:	d00c      	beq.n	8004abc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d112      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aae:	4b88      	ldr	r3, [pc, #544]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	4b84      	ldr	r3, [pc, #528]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d05b      	beq.n	8004b80 <HAL_RCC_OscConfig+0x124>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d157      	bne.n	8004b80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e25a      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d106      	bne.n	8004aec <HAL_RCC_OscConfig+0x90>
 8004ade:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7b      	ldr	r2, [pc, #492]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e01d      	b.n	8004b28 <HAL_RCC_OscConfig+0xcc>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0xb4>
 8004af6:	4b76      	ldr	r3, [pc, #472]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a75      	ldr	r2, [pc, #468]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b73      	ldr	r3, [pc, #460]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a72      	ldr	r2, [pc, #456]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0xcc>
 8004b10:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6e      	ldr	r2, [pc, #440]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6b      	ldr	r2, [pc, #428]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fd fd1c 	bl	800256c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd fd18 	bl	800256c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e21f      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b61      	ldr	r3, [pc, #388]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xdc>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fd08 	bl	800256c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fd fd04 	bl	800256c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e20b      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b57      	ldr	r3, [pc, #348]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x104>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d06f      	beq.n	8004c6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b8e:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d017      	beq.n	8004bca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d105      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d11c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b44      	ldr	r3, [pc, #272]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	4b41      	ldr	r3, [pc, #260]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_RCC_OscConfig+0x186>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e1d3      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4937      	ldr	r1, [pc, #220]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	e03a      	b.n	8004c6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d020      	beq.n	8004c42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c00:	4b34      	ldr	r3, [pc, #208]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fcb1 	bl	800256c <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fcad 	bl	800256c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e1b4      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4b28      	ldr	r3, [pc, #160]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4925      	ldr	r1, [pc, #148]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
 8004c40:	e015      	b.n	8004c6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_RCC_OscConfig+0x278>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc90 	bl	800256c <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c50:	f7fd fc8c 	bl	800256c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e193      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d036      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c82:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd fc70 	bl	800256c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c90:	f7fd fc6c 	bl	800256c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e173      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x234>
 8004cae:	e01b      	b.n	8004ce8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb0:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb6:	f7fd fc59 	bl	800256c <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	e00e      	b.n	8004cdc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbe:	f7fd fc55 	bl	800256c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d907      	bls.n	8004cdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e15c      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	42470000 	.word	0x42470000
 8004cd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ea      	bne.n	8004cbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8097 	beq.w	8004e24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b83      	ldr	r3, [pc, #524]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10f      	bne.n	8004d26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d16:	4b7c      	ldr	r3, [pc, #496]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d26:	4b79      	ldr	r3, [pc, #484]	@ (8004f0c <HAL_RCC_OscConfig+0x4b0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d118      	bne.n	8004d64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d32:	4b76      	ldr	r3, [pc, #472]	@ (8004f0c <HAL_RCC_OscConfig+0x4b0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a75      	ldr	r2, [pc, #468]	@ (8004f0c <HAL_RCC_OscConfig+0x4b0>)
 8004d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3e:	f7fd fc15 	bl	800256c <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d46:	f7fd fc11 	bl	800256c <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e118      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	4b6c      	ldr	r3, [pc, #432]	@ (8004f0c <HAL_RCC_OscConfig+0x4b0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_OscConfig+0x31e>
 8004d6c:	4b66      	ldr	r3, [pc, #408]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d70:	4a65      	ldr	r2, [pc, #404]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d78:	e01c      	b.n	8004db4 <HAL_RCC_OscConfig+0x358>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x340>
 8004d82:	4b61      	ldr	r3, [pc, #388]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	4a60      	ldr	r2, [pc, #384]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	f043 0304 	orr.w	r3, r3, #4
 8004d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	4a5d      	ldr	r2, [pc, #372]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_OscConfig+0x358>
 8004d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da0:	4a59      	ldr	r2, [pc, #356]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da8:	4b57      	ldr	r3, [pc, #348]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f023 0304 	bic.w	r3, r3, #4
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fd fbd6 	bl	800256c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fbd2 	bl	800256c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0d7      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dda:	4b4b      	ldr	r3, [pc, #300]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ee      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x368>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd fbc0 	bl	800256c <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd fbbc 	bl	800256c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e0c1      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e06:	4b40      	ldr	r3, [pc, #256]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ee      	bne.n	8004df0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e18:	4b3b      	ldr	r3, [pc, #236]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ad 	beq.w	8004f88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e2e:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d060      	beq.n	8004efc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d145      	bne.n	8004ece <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_RCC_OscConfig+0x4b4>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fd fb90 	bl	800256c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd fb8c 	bl	800256c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e093      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	4b29      	ldr	r3, [pc, #164]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	019b      	lsls	r3, r3, #6
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	491b      	ldr	r1, [pc, #108]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_RCC_OscConfig+0x4b4>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fd fb61 	bl	800256c <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd fb5d 	bl	800256c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e064      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec0:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x452>
 8004ecc:	e05c      	b.n	8004f88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCC_OscConfig+0x4b4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fb4a 	bl	800256c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fd fb46 	bl	800256c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e04d      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_OscConfig+0x4ac>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x480>
 8004efa:	e045      	b.n	8004f88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e040      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f14:	4b1f      	ldr	r3, [pc, #124]	@ (8004f94 <HAL_RCC_OscConfig+0x538>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d030      	beq.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d129      	bne.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d122      	bne.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d119      	bne.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d10f      	bne.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800

08004f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07b      	b.n	80050a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fba:	d009      	beq.n	8004fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
 8004fc2:	e005      	b.n	8004fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc ffce 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005054:	ea42 0103 	orr.w	r1, r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	f003 0104 	and.w	r1, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f003 0210 	and.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b088      	sub	sp, #32
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ba:	f7fd fa57 	bl	800256c <HAL_GetTick>
 80050be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
 80050d2:	e12a      	b.n	800532a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Transmit+0x36>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e122      	b.n	800532a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_SPI_Transmit+0x48>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e11b      	b.n	800532a <HAL_SPI_Transmit+0x280>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2203      	movs	r2, #3
 80050fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005140:	d10f      	bne.n	8005162 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005160:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d007      	beq.n	8005180 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005188:	d152      	bne.n	8005230 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Transmit+0xee>
 8005192:	8b7b      	ldrh	r3, [r7, #26]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d145      	bne.n	8005224 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	881a      	ldrh	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a8:	1c9a      	adds	r2, r3, #2
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051bc:	e032      	b.n	8005224 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d112      	bne.n	80051f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051f0:	e018      	b.n	8005224 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051f2:	f7fd f9bb 	bl	800256c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d803      	bhi.n	800520a <HAL_SPI_Transmit+0x160>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d102      	bne.n	8005210 <HAL_SPI_Transmit+0x166>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e082      	b.n	800532a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1c7      	bne.n	80051be <HAL_SPI_Transmit+0x114>
 800522e:	e053      	b.n	80052d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_SPI_Transmit+0x194>
 8005238:	8b7b      	ldrh	r3, [r7, #26]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d147      	bne.n	80052ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005264:	e033      	b.n	80052ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d113      	bne.n	800529c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	86da      	strh	r2, [r3, #54]	@ 0x36
 800529a:	e018      	b.n	80052ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529c:	f7fd f966 	bl	800256c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d803      	bhi.n	80052b4 <HAL_SPI_Transmit+0x20a>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <HAL_SPI_Transmit+0x210>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e02d      	b.n	800532a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1c6      	bne.n	8005266 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f8b1 	bl	8005444 <SPI_EndRxTxTransaction>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005328:	2300      	movs	r3, #0
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005344:	f7fd f912 	bl	800256c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4413      	add	r3, r2
 8005352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005354:	f7fd f90a 	bl	800256c <HAL_GetTick>
 8005358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800535a:	4b39      	ldr	r3, [pc, #228]	@ (8005440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	015b      	lsls	r3, r3, #5
 8005360:	0d1b      	lsrs	r3, r3, #20
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	fb02 f303 	mul.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536a:	e055      	b.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d051      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005374:	f7fd f8fa 	bl	800256c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	429a      	cmp	r2, r3
 8005382:	d902      	bls.n	800538a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d13d      	bne.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053a2:	d111      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ac:	d004      	beq.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b6:	d107      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d0:	d10f      	bne.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e018      	b.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e002      	b.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3b01      	subs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	d19a      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000008 	.word	0x20000008

08005444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2201      	movs	r2, #1
 8005458:	2102      	movs	r1, #2
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff6a 	bl	8005334 <SPI_WaitFlagStateUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e032      	b.n	80054dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005476:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <SPI_EndRxTxTransaction+0xa0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <SPI_EndRxTxTransaction+0xa4>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	0d5b      	lsrs	r3, r3, #21
 8005482:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005494:	d112      	bne.n	80054bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	2180      	movs	r1, #128	@ 0x80
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff ff47 	bl	8005334 <SPI_WaitFlagStateUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e00f      	b.n	80054dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b80      	cmp	r3, #128	@ 0x80
 80054d4:	d0f2      	beq.n	80054bc <SPI_EndRxTxTransaction+0x78>
 80054d6:	e000      	b.n	80054da <SPI_EndRxTxTransaction+0x96>
        break;
 80054d8:	bf00      	nop
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000008 	.word	0x20000008
 80054e8:	165e9f81 	.word	0x165e9f81

080054ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e041      	b.n	8005582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fdb2 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 fc62 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d001      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04e      	b.n	8005642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a23      	ldr	r2, [pc, #140]	@ (8005650 <HAL_TIM_Base_Start_IT+0xc4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d01d      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <HAL_TIM_Base_Start_IT+0xc8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <HAL_TIM_Base_Start_IT+0xcc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <HAL_TIM_Base_Start_IT+0xd0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005660 <HAL_TIM_Base_Start_IT+0xd4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <HAL_TIM_Base_Start_IT+0xd8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x80>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	@ (8005668 <HAL_TIM_Base_Start_IT+0xdc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d010      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	e007      	b.n	8005640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40010400 	.word	0x40010400
 8005664:	40014000 	.word	0x40014000
 8005668:	40001800 	.word	0x40001800

0800566c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e041      	b.n	8005702 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f839 	bl	800570a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f000 fba2 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_TIM_PWM_Start+0x24>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e022      	b.n	800578a <HAL_TIM_PWM_Start+0x6a>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b04      	cmp	r3, #4
 8005748:	d109      	bne.n	800575e <HAL_TIM_PWM_Start+0x3e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e015      	b.n	800578a <HAL_TIM_PWM_Start+0x6a>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d109      	bne.n	8005778 <HAL_TIM_PWM_Start+0x58>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e008      	b.n	800578a <HAL_TIM_PWM_Start+0x6a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07c      	b.n	800588c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x82>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a0:	e013      	b.n	80057ca <HAL_TIM_PWM_Start+0xaa>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0x92>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b0:	e00b      	b.n	80057ca <HAL_TIM_PWM_Start+0xaa>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xa2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c0:	e003      	b.n	80057ca <HAL_TIM_PWM_Start+0xaa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fdfe 	bl	80063d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <HAL_TIM_PWM_Start+0x174>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_PWM_Start+0xcc>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005898 <HAL_TIM_PWM_Start+0x178>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_PWM_Start+0xd0>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_TIM_PWM_Start+0xd2>
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005804:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <HAL_TIM_PWM_Start+0x174>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005818:	d01d      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <HAL_TIM_PWM_Start+0x17c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <HAL_TIM_PWM_Start+0x180>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_TIM_PWM_Start+0x184>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a16      	ldr	r2, [pc, #88]	@ (8005898 <HAL_TIM_PWM_Start+0x178>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	@ (80058a8 <HAL_TIM_PWM_Start+0x188>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_PWM_Start+0x136>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <HAL_TIM_PWM_Start+0x18c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d010      	beq.n	800588a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e007      	b.n	800588a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40001800 	.word	0x40001800

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa5b 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa4d 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa5e 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0204 	mvn.w	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa35 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa27 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fa38 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa0f 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa01 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa12 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0210 	mvn.w	r2, #16
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2208      	movs	r2, #8
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9e9 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9db 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9ec 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0201 	mvn.w	r2, #1
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fb fffe 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd76 	bl	800652c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9bd 	bl	8005dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0220 	mvn.w	r2, #32
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd48 	bl	8006518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e0ae      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f200 809f 	bhi.w	8005bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005abe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005bfd 	.word	0x08005bfd
 8005acc:	08005bfd 	.word	0x08005bfd
 8005ad0:	08005bfd 	.word	0x08005bfd
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005bfd 	.word	0x08005bfd
 8005adc:	08005bfd 	.word	0x08005bfd
 8005ae0:	08005bfd 	.word	0x08005bfd
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005bfd 	.word	0x08005bfd
 8005aec:	08005bfd 	.word	0x08005bfd
 8005af0:	08005bfd 	.word	0x08005bfd
 8005af4:	08005bbb 	.word	0x08005bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa1e 	bl	8005f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e064      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa6e 	bl	8006020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e043      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fac3 	bl	800610c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fb17 	bl	80061f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e002      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e0b4      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x186>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c68:	d03e      	beq.n	8005ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6e:	f200 8087 	bhi.w	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	f000 8086 	beq.w	8005d86 <HAL_TIM_ConfigClockSource+0x172>
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7e:	d87f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b70      	cmp	r3, #112	@ 0x70
 8005c82:	d01a      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0xa6>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d87b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b60      	cmp	r3, #96	@ 0x60
 8005c8a:	d050      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x11a>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d877      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b50      	cmp	r3, #80	@ 0x50
 8005c92:	d03c      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0xfa>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d873      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d058      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x13a>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d86f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca0:	2b30      	cmp	r3, #48	@ 0x30
 8005ca2:	d064      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d86b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d060      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d867      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d05a      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	e062      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cca:	f000 fb63 	bl	8006394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	609a      	str	r2, [r3, #8]
      break;
 8005ce6:	e04f      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf8:	f000 fb4c 	bl	8006394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0a:	609a      	str	r2, [r3, #8]
      break;
 8005d0c:	e03c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fac0 	bl	80062a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2150      	movs	r1, #80	@ 0x50
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb19 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e02c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 fadf 	bl	80062fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2160      	movs	r1, #96	@ 0x60
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb09 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e01c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 faa0 	bl	80062a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2140      	movs	r1, #64	@ 0x40
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 faf9 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e00c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f000 faf0 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005d7e:	e003      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a43      	ldr	r2, [pc, #268]	@ (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a40      	ldr	r2, [pc, #256]	@ (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <TIM_Base_SetConfig+0x128>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3e      	ldr	r2, [pc, #248]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a32      	ldr	r2, [pc, #200]	@ (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d027      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d023      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2e      	ldr	r2, [pc, #184]	@ (8005f1c <TIM_Base_SetConfig+0x128>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2d      	ldr	r2, [pc, #180]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2c      	ldr	r2, [pc, #176]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2b      	ldr	r2, [pc, #172]	@ (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2a      	ldr	r2, [pc, #168]	@ (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a29      	ldr	r2, [pc, #164]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a28      	ldr	r2, [pc, #160]	@ (8005f34 <TIM_Base_SetConfig+0x140>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a27      	ldr	r2, [pc, #156]	@ (8005f38 <TIM_Base_SetConfig+0x144>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a26      	ldr	r2, [pc, #152]	@ (8005f3c <TIM_Base_SetConfig+0x148>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f14 <TIM_Base_SetConfig+0x120>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_Base_SetConfig+0xf2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d103      	bne.n	8005eee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f043 0204 	orr.w	r2, r3, #4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800
 8005f34:	40001800 	.word	0x40001800
 8005f38:	40001c00 	.word	0x40001c00
 8005f3c:	40002000 	.word	0x40002000

08005f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f023 0201 	bic.w	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 0302 	bic.w	r3, r3, #2
 8005f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <TIM_OC1_SetConfig+0xd8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC1_SetConfig+0x64>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800601c <TIM_OC1_SetConfig+0xdc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10c      	bne.n	8005fbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0308 	bic.w	r3, r3, #8
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0304 	bic.w	r3, r3, #4
 8005fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <TIM_OC1_SetConfig+0xd8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC1_SetConfig+0x8e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a14      	ldr	r2, [pc, #80]	@ (800601c <TIM_OC1_SetConfig+0xdc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d111      	bne.n	8005ff2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f023 0210 	bic.w	r2, r3, #16
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a22      	ldr	r2, [pc, #136]	@ (8006104 <TIM_OC2_SetConfig+0xe4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC2_SetConfig+0x68>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a21      	ldr	r2, [pc, #132]	@ (8006108 <TIM_OC2_SetConfig+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10d      	bne.n	80060a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a17      	ldr	r2, [pc, #92]	@ (8006104 <TIM_OC2_SetConfig+0xe4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC2_SetConfig+0x94>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a16      	ldr	r2, [pc, #88]	@ (8006108 <TIM_OC2_SetConfig+0xe8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d113      	bne.n	80060dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400

0800610c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a21      	ldr	r2, [pc, #132]	@ (80061ec <TIM_OC3_SetConfig+0xe0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC3_SetConfig+0x66>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a20      	ldr	r2, [pc, #128]	@ (80061f0 <TIM_OC3_SetConfig+0xe4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10d      	bne.n	800618e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a16      	ldr	r2, [pc, #88]	@ (80061ec <TIM_OC3_SetConfig+0xe0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC3_SetConfig+0x92>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a15      	ldr	r2, [pc, #84]	@ (80061f0 <TIM_OC3_SetConfig+0xe4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d113      	bne.n	80061c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800623e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a12      	ldr	r2, [pc, #72]	@ (8006298 <TIM_OC4_SetConfig+0xa4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC4_SetConfig+0x68>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a11      	ldr	r2, [pc, #68]	@ (800629c <TIM_OC4_SetConfig+0xa8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d109      	bne.n	8006270 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	019b      	lsls	r3, r3, #6
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40010400 	.word	0x40010400

080062a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 030a 	bic.w	r3, r3, #10
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fe:	b480      	push	{r7}
 8006300:	b087      	sub	sp, #28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 0210 	bic.w	r2, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800633a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	f043 0307 	orr.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	021a      	lsls	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2201      	movs	r2, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1a      	ldr	r2, [r3, #32]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	401a      	ands	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e05a      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006484:	d01d      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1d      	ldr	r2, [pc, #116]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1a      	ldr	r2, [pc, #104]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a18      	ldr	r2, [pc, #96]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a15      	ldr	r2, [pc, #84]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40010000 	.word	0x40010000
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800
 8006508:	40000c00 	.word	0x40000c00
 800650c:	40010400 	.word	0x40010400
 8006510:	40014000 	.word	0x40014000
 8006514:	40001800 	.word	0x40001800

08006518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e042      	b.n	80065d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fb fde0 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2224      	movs	r2, #36	@ 0x24
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f973 	bl	8006870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	@ 0x28
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d175      	bne.n	80066ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Transmit+0x2c>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e06e      	b.n	80066ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2221      	movs	r2, #33	@ 0x21
 800661a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800661e:	f7fb ffa5 	bl	800256c <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006638:	d108      	bne.n	800664c <HAL_UART_Transmit+0x6c>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e003      	b.n	8006654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006654:	e02e      	b.n	80066b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2200      	movs	r2, #0
 800665e:	2180      	movs	r1, #128	@ 0x80
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f848 	bl	80066f6 <UART_WaitOnFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e03a      	b.n	80066ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800668c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	3302      	adds	r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e007      	b.n	80066a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1cb      	bne.n	8006656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2140      	movs	r1, #64	@ 0x40
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f814 	bl	80066f6 <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e006      	b.n	80066ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4613      	mov	r3, r2
 8006704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006706:	e03b      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d037      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006710:	f7fb ff2c 	bl	800256c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <UART_WaitOnFlagUntilTimeout+0x30>
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e03a      	b.n	80067a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b80      	cmp	r3, #128	@ 0x80
 800673c:	d020      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b40      	cmp	r3, #64	@ 0x40
 8006742:	d01d      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d116      	bne.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f81d 	bl	80067a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2208      	movs	r2, #8
 8006772:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e00f      	b.n	80067a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	429a      	cmp	r2, r3
 800679c:	d0b4      	beq.n	8006708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b095      	sub	sp, #84	@ 0x54
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3314      	adds	r3, #20
 80067ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800680a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681c:	2b01      	cmp	r3, #1
 800681e:	d119      	bne.n	8006854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0310 	bic.w	r3, r3, #16
 8006836:	647b      	str	r3, [r7, #68]	@ 0x44
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	330c      	adds	r3, #12
 800683e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006840:	61ba      	str	r2, [r7, #24]
 8006842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6979      	ldr	r1, [r7, #20]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	613b      	str	r3, [r7, #16]
   return(result);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e5      	bne.n	8006820 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006862:	bf00      	nop
 8006864:	3754      	adds	r7, #84	@ 0x54
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006874:	b0c0      	sub	sp, #256	@ 0x100
 8006876:	af00      	add	r7, sp, #0
 8006878:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	ea40 0301 	orr.w	r3, r0, r1
 8006898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068c8:	f021 010c 	bic.w	r1, r1, #12
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068d6:	430b      	orrs	r3, r1
 80068d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ea:	6999      	ldr	r1, [r3, #24]
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	ea40 0301 	orr.w	r3, r0, r1
 80068f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b8f      	ldr	r3, [pc, #572]	@ (8006b3c <UART_SetConfig+0x2cc>)
 8006900:	429a      	cmp	r2, r3
 8006902:	d005      	beq.n	8006910 <UART_SetConfig+0xa0>
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <UART_SetConfig+0x2d0>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d104      	bne.n	800691a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fd fe2e 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8006914:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006918:	e003      	b.n	8006922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800691a:	f7fd fe15 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 800691e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800692c:	f040 810c 	bne.w	8006b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800693a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800693e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	1891      	adds	r1, r2, r2
 8006948:	65b9      	str	r1, [r7, #88]	@ 0x58
 800694a:	415b      	adcs	r3, r3
 800694c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800694e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006952:	4621      	mov	r1, r4
 8006954:	eb12 0801 	adds.w	r8, r2, r1
 8006958:	4629      	mov	r1, r5
 800695a:	eb43 0901 	adc.w	r9, r3, r1
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800696a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800696e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006972:	4690      	mov	r8, r2
 8006974:	4699      	mov	r9, r3
 8006976:	4623      	mov	r3, r4
 8006978:	eb18 0303 	adds.w	r3, r8, r3
 800697c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006980:	462b      	mov	r3, r5
 8006982:	eb49 0303 	adc.w	r3, r9, r3
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800698a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006996:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800699a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800699e:	460b      	mov	r3, r1
 80069a0:	18db      	adds	r3, r3, r3
 80069a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a4:	4613      	mov	r3, r2
 80069a6:	eb42 0303 	adc.w	r3, r2, r3
 80069aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069b4:	f7fa f918 	bl	8000be8 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4b61      	ldr	r3, [pc, #388]	@ (8006b44 <UART_SetConfig+0x2d4>)
 80069be:	fba3 2302 	umull	r2, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	011c      	lsls	r4, r3, #4
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	1891      	adds	r1, r2, r2
 80069de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069e0:	415b      	adcs	r3, r3
 80069e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069e8:	4641      	mov	r1, r8
 80069ea:	eb12 0a01 	adds.w	sl, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb43 0b01 	adc.w	fp, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a08:	4692      	mov	sl, r2
 8006a0a:	469b      	mov	fp, r3
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a16:	464b      	mov	r3, r9
 8006a18:	eb4b 0303 	adc.w	r3, fp, r3
 8006a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a34:	460b      	mov	r3, r1
 8006a36:	18db      	adds	r3, r3, r3
 8006a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	eb42 0303 	adc.w	r3, r2, r3
 8006a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a4a:	f7fa f8cd 	bl	8000be8 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	4b3b      	ldr	r3, [pc, #236]	@ (8006b44 <UART_SetConfig+0x2d4>)
 8006a56:	fba3 2301 	umull	r2, r3, r3, r1
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	2264      	movs	r2, #100	@ 0x64
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	1acb      	subs	r3, r1, r3
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a6a:	4b36      	ldr	r3, [pc, #216]	@ (8006b44 <UART_SetConfig+0x2d4>)
 8006a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a78:	441c      	add	r4, r3
 8006a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	1891      	adds	r1, r2, r2
 8006a92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a94:	415b      	adcs	r3, r3
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	1851      	adds	r1, r2, r1
 8006aa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	414b      	adcs	r3, r1
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	00cb      	lsls	r3, r1, #3
 8006ab8:	4651      	mov	r1, sl
 8006aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006abe:	4651      	mov	r1, sl
 8006ac0:	00ca      	lsls	r2, r1, #3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4642      	mov	r2, r8
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006af0:	460b      	mov	r3, r1
 8006af2:	18db      	adds	r3, r3, r3
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006af6:	4613      	mov	r3, r2
 8006af8:	eb42 0303 	adc.w	r3, r2, r3
 8006afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b06:	f7fa f86f 	bl	8000be8 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <UART_SetConfig+0x2d4>)
 8006b10:	fba3 1302 	umull	r1, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	2164      	movs	r1, #100	@ 0x64
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	3332      	adds	r3, #50	@ 0x32
 8006b22:	4a08      	ldr	r2, [pc, #32]	@ (8006b44 <UART_SetConfig+0x2d4>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	f003 0207 	and.w	r2, r3, #7
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4422      	add	r2, r4
 8006b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b38:	e106      	b.n	8006d48 <UART_SetConfig+0x4d8>
 8006b3a:	bf00      	nop
 8006b3c:	40011000 	.word	0x40011000
 8006b40:	40011400 	.word	0x40011400
 8006b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	1891      	adds	r1, r2, r2
 8006b60:	6239      	str	r1, [r7, #32]
 8006b62:	415b      	adcs	r3, r3
 8006b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	1854      	adds	r4, r2, r1
 8006b6e:	4649      	mov	r1, r9
 8006b70:	eb43 0501 	adc.w	r5, r3, r1
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	00eb      	lsls	r3, r5, #3
 8006b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b82:	00e2      	lsls	r2, r4, #3
 8006b84:	4614      	mov	r4, r2
 8006b86:	461d      	mov	r5, r3
 8006b88:	4643      	mov	r3, r8
 8006b8a:	18e3      	adds	r3, r4, r3
 8006b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b90:	464b      	mov	r3, r9
 8006b92:	eb45 0303 	adc.w	r3, r5, r3
 8006b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	008b      	lsls	r3, r1, #2
 8006bba:	4621      	mov	r1, r4
 8006bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	008a      	lsls	r2, r1, #2
 8006bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006bc8:	f7fa f80e 	bl	8000be8 <__aeabi_uldivmod>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4b60      	ldr	r3, [pc, #384]	@ (8006d54 <UART_SetConfig+0x4e4>)
 8006bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	011c      	lsls	r4, r3, #4
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	1891      	adds	r1, r2, r2
 8006bf2:	61b9      	str	r1, [r7, #24]
 8006bf4:	415b      	adcs	r3, r3
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	1851      	adds	r1, r2, r1
 8006c00:	6139      	str	r1, [r7, #16]
 8006c02:	4649      	mov	r1, r9
 8006c04:	414b      	adcs	r3, r1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c14:	4659      	mov	r1, fp
 8006c16:	00cb      	lsls	r3, r1, #3
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1e:	4651      	mov	r1, sl
 8006c20:	00ca      	lsls	r2, r1, #3
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c30:	464b      	mov	r3, r9
 8006c32:	460a      	mov	r2, r1
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c54:	4649      	mov	r1, r9
 8006c56:	008b      	lsls	r3, r1, #2
 8006c58:	4641      	mov	r1, r8
 8006c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5e:	4641      	mov	r1, r8
 8006c60:	008a      	lsls	r2, r1, #2
 8006c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c66:	f7f9 ffbf 	bl	8000be8 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4b38      	ldr	r3, [pc, #224]	@ (8006d54 <UART_SetConfig+0x4e4>)
 8006c72:	fba3 2301 	umull	r2, r3, r3, r1
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2264      	movs	r2, #100	@ 0x64
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	1acb      	subs	r3, r1, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	@ 0x32
 8006c84:	4a33      	ldr	r2, [pc, #204]	@ (8006d54 <UART_SetConfig+0x4e4>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c90:	441c      	add	r4, r3
 8006c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c96:	2200      	movs	r2, #0
 8006c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	1891      	adds	r1, r2, r2
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	415b      	adcs	r3, r3
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	1851      	adds	r1, r2, r1
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	414b      	adcs	r3, r1
 8006cba:	607b      	str	r3, [r7, #4]
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cc8:	4659      	mov	r1, fp
 8006cca:	00cb      	lsls	r3, r1, #3
 8006ccc:	4651      	mov	r1, sl
 8006cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	00ca      	lsls	r2, r1, #3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4642      	mov	r2, r8
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	460a      	mov	r2, r1
 8006ce6:	eb42 0303 	adc.w	r3, r2, r3
 8006cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d04:	4649      	mov	r1, r9
 8006d06:	008b      	lsls	r3, r1, #2
 8006d08:	4641      	mov	r1, r8
 8006d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d0e:	4641      	mov	r1, r8
 8006d10:	008a      	lsls	r2, r1, #2
 8006d12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d16:	f7f9 ff67 	bl	8000be8 <__aeabi_uldivmod>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <UART_SetConfig+0x4e4>)
 8006d20:	fba3 1302 	umull	r1, r3, r3, r2
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	2164      	movs	r1, #100	@ 0x64
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	3332      	adds	r3, #50	@ 0x32
 8006d32:	4a08      	ldr	r2, [pc, #32]	@ (8006d54 <UART_SetConfig+0x4e4>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	f003 020f 	and.w	r2, r3, #15
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4422      	add	r2, r4
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d54:	51eb851f 	.word	0x51eb851f

08006d58 <__NVIC_SetPriority>:
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db0a      	blt.n	8006d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	490c      	ldr	r1, [pc, #48]	@ (8006da4 <__NVIC_SetPriority+0x4c>)
 8006d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d76:	0112      	lsls	r2, r2, #4
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d80:	e00a      	b.n	8006d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	4908      	ldr	r1, [pc, #32]	@ (8006da8 <__NVIC_SetPriority+0x50>)
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	3b04      	subs	r3, #4
 8006d90:	0112      	lsls	r2, r2, #4
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	440b      	add	r3, r1
 8006d96:	761a      	strb	r2, [r3, #24]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	e000e100 	.word	0xe000e100
 8006da8:	e000ed00 	.word	0xe000ed00

08006dac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <SysTick_Handler+0x1c>)
 8006db2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006db4:	f001 ff34 	bl	8008c20 <xTaskGetSchedulerState>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dbe:	f002 fd2b 	bl	8009818 <xPortSysTickHandler>
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000e010 	.word	0xe000e010

08006dcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	f06f 0004 	mvn.w	r0, #4
 8006dd6:	f7ff ffbf 	bl	8006d58 <__NVIC_SetPriority>
#endif
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de6:	f3ef 8305 	mrs	r3, IPSR
 8006dea:	603b      	str	r3, [r7, #0]
  return(result);
 8006dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006df2:	f06f 0305 	mvn.w	r3, #5
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	e00c      	b.n	8006e14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <osKernelInitialize+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e02:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <osKernelInitialize+0x44>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e002      	b.n	8006e14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e14:	687b      	ldr	r3, [r7, #4]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000081c 	.word	0x2000081c

08006e28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
 8006e32:	603b      	str	r3, [r7, #0]
  return(result);
 8006e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e3a:	f06f 0305 	mvn.w	r3, #5
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e010      	b.n	8006e64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e42:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <osKernelStart+0x48>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d109      	bne.n	8006e5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e4a:	f7ff ffbf 	bl	8006dcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <osKernelStart+0x48>)
 8006e50:	2202      	movs	r2, #2
 8006e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e54:	f001 fa80 	bl	8008358 <vTaskStartScheduler>
      stat = osOK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e002      	b.n	8006e64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e64:	687b      	ldr	r3, [r7, #4]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000081c 	.word	0x2000081c

08006e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	@ 0x38
 8006e78:	af04      	add	r7, sp, #16
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e84:	f3ef 8305 	mrs	r3, IPSR
 8006e88:	617b      	str	r3, [r7, #20]
  return(result);
 8006e8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d17e      	bne.n	8006f8e <osThreadNew+0x11a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d07b      	beq.n	8006f8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e9a:	2318      	movs	r3, #24
 8006e9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d045      	beq.n	8006f3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <osThreadNew+0x48>
        name = attr->name;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <osThreadNew+0x6e>
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b38      	cmp	r3, #56	@ 0x38
 8006ed4:	d805      	bhi.n	8006ee2 <osThreadNew+0x6e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <osThreadNew+0x72>
        return (NULL);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e054      	b.n	8006f90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00e      	beq.n	8006f1c <osThreadNew+0xa8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f04:	d90a      	bls.n	8006f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <osThreadNew+0xa8>
        mem = 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e010      	b.n	8006f3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <osThreadNew+0xca>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d108      	bne.n	8006f3e <osThreadNew+0xca>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <osThreadNew+0xca>
          mem = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e001      	b.n	8006f3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d110      	bne.n	8006f66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f4c:	9202      	str	r2, [sp, #8]
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f001 f808 	bl	8007f70 <xTaskCreateStatic>
 8006f60:	4603      	mov	r3, r0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e013      	b.n	8006f8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d110      	bne.n	8006f8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f001 f856 	bl	8008030 <xTaskCreate>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <osThreadNew+0x11a>
            hTask = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f8e:	693b      	ldr	r3, [r7, #16]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3728      	adds	r7, #40	@ 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa0:	f3ef 8305 	mrs	r3, IPSR
 8006fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <osDelay+0x1c>
    stat = osErrorISR;
 8006fac:	f06f 0305 	mvn.w	r3, #5
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e007      	b.n	8006fc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 f994 	bl	80082ec <vTaskDelay>
    }
  }

  return (stat);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b08a      	sub	sp, #40	@ 0x28
 8006fd2:	af02      	add	r7, sp, #8
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fde:	f3ef 8305 	mrs	r3, IPSR
 8006fe2:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d15f      	bne.n	80070aa <osMessageQueueNew+0xdc>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <osMessageQueueNew+0xdc>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d059      	beq.n	80070aa <osMessageQueueNew+0xdc>
    mem = -1;
 8006ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d029      	beq.n	8007056 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d012      	beq.n	8007030 <osMessageQueueNew+0x62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007010:	d90e      	bls.n	8007030 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	fb01 f303 	mul.w	r3, r1, r3
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <osMessageQueueNew+0x62>
        mem = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e014      	b.n	800705a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d110      	bne.n	800705a <osMessageQueueNew+0x8c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10c      	bne.n	800705a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007044:	2b00      	cmp	r3, #0
 8007046:	d108      	bne.n	800705a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <osMessageQueueNew+0x8c>
          mem = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e001      	b.n	800705a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d10b      	bne.n	8007078 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2100      	movs	r1, #0
 800706a:	9100      	str	r1, [sp, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa30 	bl	80074d4 <xQueueGenericCreateStatic>
 8007074:	61f8      	str	r0, [r7, #28]
 8007076:	e008      	b.n	800708a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800707e:	2200      	movs	r2, #0
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 faa3 	bl	80075ce <xQueueGenericCreate>
 8007088:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e001      	b.n	80070a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80070a2:	6979      	ldr	r1, [r7, #20]
 80070a4:	69f8      	ldr	r0, [r7, #28]
 80070a6:	f000 ff05 	bl	8007eb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80070aa:	69fb      	ldr	r3, [r7, #28]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070cc:	f3ef 8305 	mrs	r3, IPSR
 80070d0:	617b      	str	r3, [r7, #20]
  return(result);
 80070d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d028      	beq.n	800712a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <osMessageQueuePut+0x36>
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <osMessageQueuePut+0x36>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80070ea:	f06f 0303 	mvn.w	r3, #3
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	e038      	b.n	8007164 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80070f6:	f107 0210 	add.w	r2, r7, #16
 80070fa:	2300      	movs	r3, #0
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	69b8      	ldr	r0, [r7, #24]
 8007100:	f000 fbc6 	bl	8007890 <xQueueGenericSendFromISR>
 8007104:	4603      	mov	r3, r0
 8007106:	2b01      	cmp	r3, #1
 8007108:	d003      	beq.n	8007112 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800710a:	f06f 0302 	mvn.w	r3, #2
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e028      	b.n	8007164 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d025      	beq.n	8007164 <osMessageQueuePut+0xb0>
 8007118:	4b15      	ldr	r3, [pc, #84]	@ (8007170 <osMessageQueuePut+0xbc>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	e01c      	b.n	8007164 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <osMessageQueuePut+0x82>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007136:	f06f 0303 	mvn.w	r3, #3
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	e012      	b.n	8007164 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800713e:	2300      	movs	r3, #0
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	69b8      	ldr	r0, [r7, #24]
 8007146:	f000 faa1 	bl	800768c <xQueueGenericSend>
 800714a:	4603      	mov	r3, r0
 800714c:	2b01      	cmp	r3, #1
 800714e:	d009      	beq.n	8007164 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007156:	f06f 0301 	mvn.w	r3, #1
 800715a:	61fb      	str	r3, [r7, #28]
 800715c:	e002      	b.n	8007164 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800715e:	f06f 0302 	mvn.w	r3, #2
 8007162:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007164:	69fb      	ldr	r3, [r7, #28]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800718a:	f3ef 8305 	mrs	r3, IPSR
 800718e:	617b      	str	r3, [r7, #20]
  return(result);
 8007190:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007192:	2b00      	cmp	r3, #0
 8007194:	d028      	beq.n	80071e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <osMessageQueueGet+0x34>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <osMessageQueueGet+0x34>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80071a8:	f06f 0303 	mvn.w	r3, #3
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e037      	b.n	8007220 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80071b4:	f107 0310 	add.w	r3, r7, #16
 80071b8:	461a      	mov	r2, r3
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	69b8      	ldr	r0, [r7, #24]
 80071be:	f000 fce7 	bl	8007b90 <xQueueReceiveFromISR>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d003      	beq.n	80071d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80071c8:	f06f 0302 	mvn.w	r3, #2
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	e027      	b.n	8007220 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d024      	beq.n	8007220 <osMessageQueueGet+0xac>
 80071d6:	4b15      	ldr	r3, [pc, #84]	@ (800722c <osMessageQueueGet+0xb8>)
 80071d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	e01b      	b.n	8007220 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <osMessageQueueGet+0x80>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80071f4:	f06f 0303 	mvn.w	r3, #3
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	e011      	b.n	8007220 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	69b8      	ldr	r0, [r7, #24]
 8007202:	f000 fbe3 	bl	80079cc <xQueueReceive>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	d009      	beq.n	8007220 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007212:	f06f 0301 	mvn.w	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	e002      	b.n	8007220 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800721a:	f06f 0302 	mvn.w	r3, #2
 800721e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007220:	69fb      	ldr	r3, [r7, #28]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a07      	ldr	r2, [pc, #28]	@ (800725c <vApplicationGetIdleTaskMemory+0x2c>)
 8007240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4a06      	ldr	r2, [pc, #24]	@ (8007260 <vApplicationGetIdleTaskMemory+0x30>)
 8007246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2280      	movs	r2, #128	@ 0x80
 800724c:	601a      	str	r2, [r3, #0]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000820 	.word	0x20000820
 8007260:	200008c8 	.word	0x200008c8

08007264 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a07      	ldr	r2, [pc, #28]	@ (8007290 <vApplicationGetTimerTaskMemory+0x2c>)
 8007274:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a06      	ldr	r2, [pc, #24]	@ (8007294 <vApplicationGetTimerTaskMemory+0x30>)
 800727a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	20000ac8 	.word	0x20000ac8
 8007294:	20000b70 	.word	0x20000b70

08007298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f103 0208 	add.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f103 0208 	add.w	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f103 0208 	add.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e00c      	b.n	8007374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3308      	adds	r3, #8
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e002      	b.n	8007368 <vListInsert+0x2e>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d2f6      	bcs.n	8007362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6892      	ldr	r2, [r2, #8]
 80073c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d103      	bne.n	80073e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	1e5a      	subs	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800742c:	f002 f964 	bl	80096f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	3b01      	subs	r3, #1
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	22ff      	movs	r2, #255	@ 0xff
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	22ff      	movs	r2, #255	@ 0xff
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d114      	bne.n	80074ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01a      	beq.n	80074c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3310      	adds	r3, #16
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fa00 	bl	8008894 <xTaskRemoveFromEventList>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <xQueueGenericReset+0xd0>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	e009      	b.n	80074c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3310      	adds	r3, #16
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fef1 	bl	8007298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3324      	adds	r3, #36	@ 0x24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff feec 	bl	8007298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074c0:	f002 f94c 	bl	800975c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074c4:	2301      	movs	r3, #1
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	@ 0x38
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <xQueueGenericCreateStatic+0x56>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <xQueueGenericCreateStatic+0x5a>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <xQueueGenericCreateStatic+0x5c>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <xQueueGenericCreateStatic+0x84>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <xQueueGenericCreateStatic+0x88>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <xQueueGenericCreateStatic+0x8a>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61fb      	str	r3, [r7, #28]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800757a:	2350      	movs	r3, #80	@ 0x50
 800757c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b50      	cmp	r3, #80	@ 0x50
 8007582:	d00b      	beq.n	800759c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800759c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f840 	bl	8007644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3730      	adds	r7, #48	@ 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b08a      	sub	sp, #40	@ 0x28
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	613b      	str	r3, [r7, #16]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3350      	adds	r3, #80	@ 0x50
 8007608:	4618      	mov	r0, r3
 800760a:	f002 f997 	bl	800993c <pvPortMalloc>
 800760e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d011      	beq.n	800763a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3350      	adds	r3, #80	@ 0x50
 800761e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007628:	79fa      	ldrb	r2, [r7, #7]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f805 	bl	8007644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800763a:	69bb      	ldr	r3, [r7, #24]
	}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e002      	b.n	8007666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007672:	2101      	movs	r1, #1
 8007674:	69b8      	ldr	r0, [r7, #24]
 8007676:	f7ff fec3 	bl	8007400 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	@ 0x38
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800769a:	2300      	movs	r3, #0
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <xQueueGenericSend+0x34>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <xQueueGenericSend+0x42>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <xQueueGenericSend+0x46>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <xQueueGenericSend+0x48>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <xQueueGenericSend+0x64>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d103      	bne.n	80076fe <xQueueGenericSend+0x72>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <xQueueGenericSend+0x76>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <xQueueGenericSend+0x78>
 8007702:	2300      	movs	r3, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10b      	bne.n	8007720 <xQueueGenericSend+0x94>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	623b      	str	r3, [r7, #32]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007720:	f001 fa7e 	bl	8008c20 <xTaskGetSchedulerState>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <xQueueGenericSend+0xa4>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <xQueueGenericSend+0xa8>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <xQueueGenericSend+0xaa>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <xQueueGenericSend+0xc6>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	61fb      	str	r3, [r7, #28]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007752:	f001 ffd1 	bl	80096f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <xQueueGenericSend+0xdc>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d129      	bne.n	80077bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800776e:	f000 fa91 	bl	8007c94 <prvCopyDataToQueue>
 8007772:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	3324      	adds	r3, #36	@ 0x24
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f887 	bl	8008894 <xTaskRemoveFromEventList>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d013      	beq.n	80077b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800778c:	4b3f      	ldr	r3, [pc, #252]	@ (800788c <xQueueGenericSend+0x200>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	e00a      	b.n	80077b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800779e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077a4:	4b39      	ldr	r3, [pc, #228]	@ (800788c <xQueueGenericSend+0x200>)
 80077a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077b4:	f001 ffd2 	bl	800975c <vPortExitCritical>
				return pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e063      	b.n	8007884 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d103      	bne.n	80077ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077c2:	f001 ffcb 	bl	800975c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e05c      	b.n	8007884 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f8c1 	bl	800895c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077da:	2301      	movs	r3, #1
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077de:	f001 ffbd 	bl	800975c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077e2:	f000 fe29 	bl	8008438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077e6:	f001 ff87 	bl	80096f8 <vPortEnterCritical>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d103      	bne.n	8007800 <xQueueGenericSend+0x174>
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007806:	b25b      	sxtb	r3, r3
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d103      	bne.n	8007816 <xQueueGenericSend+0x18a>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007816:	f001 ffa1 	bl	800975c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800781a:	1d3a      	adds	r2, r7, #4
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f001 f8b0 	bl	8008988 <xTaskCheckForTimeOut>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d124      	bne.n	8007878 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800782e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007830:	f000 fb28 	bl	8007e84 <prvIsQueueFull>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d018      	beq.n	800786c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	3310      	adds	r3, #16
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f000 ffd4 	bl	80087f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800784a:	f000 fab3 	bl	8007db4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800784e:	f000 fe01 	bl	8008454 <xTaskResumeAll>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	f47f af7c 	bne.w	8007752 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800785a:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <xQueueGenericSend+0x200>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	e772      	b.n	8007752 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800786c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800786e:	f000 faa1 	bl	8007db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007872:	f000 fdef 	bl	8008454 <xTaskResumeAll>
 8007876:	e76c      	b.n	8007752 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800787a:	f000 fa9b 	bl	8007db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800787e:	f000 fde9 	bl	8008454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007884:	4618      	mov	r0, r3
 8007886:	3738      	adds	r7, #56	@ 0x38
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b090      	sub	sp, #64	@ 0x40
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	e7fd      	b.n	80078bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <xQueueGenericSendFromISR+0x3e>
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <xQueueGenericSendFromISR+0x42>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <xQueueGenericSendFromISR+0x44>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d103      	bne.n	80078fe <xQueueGenericSendFromISR+0x6e>
 80078f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <xQueueGenericSendFromISR+0x72>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <xQueueGenericSendFromISR+0x74>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	623b      	str	r3, [r7, #32]
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	e7fd      	b.n	800791c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007920:	f001 ffca 	bl	80098b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007924:	f3ef 8211 	mrs	r2, BASEPRI
 8007928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	61fa      	str	r2, [r7, #28]
 800793a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800793c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <xQueueGenericSendFromISR+0xc2>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d12f      	bne.n	80079b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007958:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800795c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007968:	f000 f994 	bl	8007c94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800796c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d112      	bne.n	800799c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	3324      	adds	r3, #36	@ 0x24
 8007982:	4618      	mov	r0, r3
 8007984:	f000 ff86 	bl	8008894 <xTaskRemoveFromEventList>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00e      	beq.n	80079ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e007      	b.n	80079ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800799c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80079a0:	3301      	adds	r3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	b25a      	sxtb	r2, r3
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079ac:	2301      	movs	r3, #1
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80079b0:	e001      	b.n	80079b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3740      	adds	r7, #64	@ 0x40
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	@ 0x30
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079d8:	2300      	movs	r3, #0
 80079da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10b      	bne.n	80079fe <xQueueReceive+0x32>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	623b      	str	r3, [r7, #32]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <xQueueReceive+0x40>
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <xQueueReceive+0x44>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e000      	b.n	8007a12 <xQueueReceive+0x46>
 8007a10:	2300      	movs	r3, #0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <xQueueReceive+0x62>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	61fb      	str	r3, [r7, #28]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a2e:	f001 f8f7 	bl	8008c20 <xTaskGetSchedulerState>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <xQueueReceive+0x72>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <xQueueReceive+0x76>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <xQueueReceive+0x78>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <xQueueReceive+0x94>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	61bb      	str	r3, [r7, #24]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a60:	f001 fe4a 	bl	80096f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01f      	beq.n	8007ab0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a74:	f000 f978 	bl	8007d68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00f      	beq.n	8007aa8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	3310      	adds	r3, #16
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 ff01 	bl	8008894 <xTaskRemoveFromEventList>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a98:	4b3c      	ldr	r3, [pc, #240]	@ (8007b8c <xQueueReceive+0x1c0>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007aa8:	f001 fe58 	bl	800975c <vPortExitCritical>
				return pdPASS;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e069      	b.n	8007b84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ab6:	f001 fe51 	bl	800975c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e062      	b.n	8007b84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ac4:	f107 0310 	add.w	r3, r7, #16
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 ff47 	bl	800895c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ad2:	f001 fe43 	bl	800975c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ad6:	f000 fcaf 	bl	8008438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ada:	f001 fe0d 	bl	80096f8 <vPortEnterCritical>
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d103      	bne.n	8007af4 <xQueueReceive+0x128>
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d103      	bne.n	8007b0a <xQueueReceive+0x13e>
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b0a:	f001 fe27 	bl	800975c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b0e:	1d3a      	adds	r2, r7, #4
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 ff36 	bl	8008988 <xTaskCheckForTimeOut>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d123      	bne.n	8007b6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b24:	f000 f998 	bl	8007e58 <prvIsQueueEmpty>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d017      	beq.n	8007b5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	3324      	adds	r3, #36	@ 0x24
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fe5a 	bl	80087f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b3e:	f000 f939 	bl	8007db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b42:	f000 fc87 	bl	8008454 <xTaskResumeAll>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d189      	bne.n	8007a60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <xQueueReceive+0x1c0>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	e780      	b.n	8007a60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b60:	f000 f928 	bl	8007db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b64:	f000 fc76 	bl	8008454 <xTaskResumeAll>
 8007b68:	e77a      	b.n	8007a60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6c:	f000 f922 	bl	8007db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b70:	f000 fc70 	bl	8008454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b76:	f000 f96f 	bl	8007e58 <prvIsQueueEmpty>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f43f af6f 	beq.w	8007a60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3730      	adds	r7, #48	@ 0x30
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	@ 0x38
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	623b      	str	r3, [r7, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <xQueueReceiveFromISR+0x3c>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <xQueueReceiveFromISR+0x40>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <xQueueReceiveFromISR+0x42>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	61fb      	str	r3, [r7, #28]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bee:	f001 fe63 	bl	80098b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	61ba      	str	r2, [r7, #24]
 8007c08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d02f      	beq.n	8007c7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c28:	f000 f89e 	bl	8007d68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	1e5a      	subs	r2, r3, #1
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d112      	bne.n	8007c64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	3310      	adds	r3, #16
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fe22 	bl	8008894 <xTaskRemoveFromEventList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e007      	b.n	8007c74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c68:	3301      	adds	r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	b25a      	sxtb	r2, r3
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c78:	e001      	b.n	8007c7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f383 8811 	msr	BASEPRI, r3
}
 8007c88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3738      	adds	r7, #56	@ 0x38
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10d      	bne.n	8007cce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d14d      	bne.n	8007d56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 ffcc 	bl	8008c5c <xTaskPriorityDisinherit>
 8007cc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	e043      	b.n	8007d56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d119      	bne.n	8007d08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6858      	ldr	r0, [r3, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	f002 fe75 	bl	800a9ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cec:	441a      	add	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d32b      	bcc.n	8007d56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]
 8007d06:	e026      	b.n	8007d56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68d8      	ldr	r0, [r3, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d10:	461a      	mov	r2, r3
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	f002 fe5b 	bl	800a9ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d20:	425b      	negs	r3, r3
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d207      	bcs.n	8007d44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d105      	bne.n	8007d56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d5e:	697b      	ldr	r3, [r7, #20]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d018      	beq.n	8007dac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	441a      	add	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d303      	bcc.n	8007d9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68d9      	ldr	r1, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da4:	461a      	mov	r2, r3
 8007da6:	6838      	ldr	r0, [r7, #0]
 8007da8:	f002 fe11 	bl	800a9ce <memcpy>
	}
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dbc:	f001 fc9c 	bl	80096f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dc8:	e011      	b.n	8007dee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d012      	beq.n	8007df8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3324      	adds	r3, #36	@ 0x24
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fd5c 	bl	8008894 <xTaskRemoveFromEventList>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de2:	f000 fe35 	bl	8008a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dce9      	bgt.n	8007dca <prvUnlockQueue+0x16>
 8007df6:	e000      	b.n	8007dfa <prvUnlockQueue+0x46>
					break;
 8007df8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	22ff      	movs	r2, #255	@ 0xff
 8007dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007e02:	f001 fcab 	bl	800975c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e06:	f001 fc77 	bl	80096f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e12:	e011      	b.n	8007e38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d012      	beq.n	8007e42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3310      	adds	r3, #16
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fd37 	bl	8008894 <xTaskRemoveFromEventList>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e2c:	f000 fe10 	bl	8008a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dce9      	bgt.n	8007e14 <prvUnlockQueue+0x60>
 8007e40:	e000      	b.n	8007e44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	22ff      	movs	r2, #255	@ 0xff
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e4c:	f001 fc86 	bl	800975c <vPortExitCritical>
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e60:	f001 fc4a 	bl	80096f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e001      	b.n	8007e76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e76:	f001 fc71 	bl	800975c <vPortExitCritical>

	return xReturn;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e8c:	f001 fc34 	bl	80096f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d102      	bne.n	8007ea2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e001      	b.n	8007ea6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea6:	f001 fc59 	bl	800975c <vPortExitCritical>

	return xReturn;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e014      	b.n	8007eee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8007f04 <vQueueAddToRegistry+0x50>)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed0:	490c      	ldr	r1, [pc, #48]	@ (8007f04 <vQueueAddToRegistry+0x50>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eda:	4a0a      	ldr	r2, [pc, #40]	@ (8007f04 <vQueueAddToRegistry+0x50>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ee6:	e006      	b.n	8007ef6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b07      	cmp	r3, #7
 8007ef2:	d9e7      	bls.n	8007ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000f70 	.word	0x20000f70

08007f08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f18:	f001 fbee 	bl	80096f8 <vPortEnterCritical>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d103      	bne.n	8007f32 <vQueueWaitForMessageRestricted+0x2a>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d103      	bne.n	8007f48 <vQueueWaitForMessageRestricted+0x40>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f48:	f001 fc08 	bl	800975c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	3324      	adds	r3, #36	@ 0x24
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fc6d 	bl	800883c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f62:	6978      	ldr	r0, [r7, #20]
 8007f64:	f7ff ff26 	bl	8007db4 <prvUnlockQueue>
	}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08e      	sub	sp, #56	@ 0x38
 8007f74:	af04      	add	r7, sp, #16
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	623b      	str	r3, [r7, #32]
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10b      	bne.n	8007fba <xTaskCreateStatic+0x4a>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	61fb      	str	r3, [r7, #28]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fba:	23a8      	movs	r3, #168	@ 0xa8
 8007fbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2ba8      	cmp	r3, #168	@ 0xa8
 8007fc2:	d00b      	beq.n	8007fdc <xTaskCreateStatic+0x6c>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	61bb      	str	r3, [r7, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01e      	beq.n	8008022 <xTaskCreateStatic+0xb2>
 8007fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01b      	beq.n	8008022 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ff2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	9302      	str	r3, [sp, #8]
 8008004:	f107 0314 	add.w	r3, r7, #20
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f851 	bl	80080bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800801a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800801c:	f000 f8f6 	bl	800820c <prvAddNewTaskToReadyList>
 8008020:	e001      	b.n	8008026 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008026:	697b      	ldr	r3, [r7, #20]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3728      	adds	r7, #40	@ 0x28
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	@ 0x30
 8008034:	af04      	add	r7, sp, #16
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008040:	88fb      	ldrh	r3, [r7, #6]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fc79 	bl	800993c <pvPortMalloc>
 800804a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00e      	beq.n	8008070 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008052:	20a8      	movs	r0, #168	@ 0xa8
 8008054:	f001 fc72 	bl	800993c <pvPortMalloc>
 8008058:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	631a      	str	r2, [r3, #48]	@ 0x30
 8008066:	e005      	b.n	8008074 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008068:	6978      	ldr	r0, [r7, #20]
 800806a:	f001 fd35 	bl	8009ad8 <vPortFree>
 800806e:	e001      	b.n	8008074 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d017      	beq.n	80080aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	2300      	movs	r3, #0
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f80f 	bl	80080bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800809e:	69f8      	ldr	r0, [r7, #28]
 80080a0:	f000 f8b4 	bl	800820c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080a4:	2301      	movs	r3, #1
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	e002      	b.n	80080b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080b0:	69bb      	ldr	r3, [r7, #24]
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	461a      	mov	r2, r3
 80080d4:	21a5      	movs	r1, #165	@ 0xa5
 80080d6:	f002 fb9c 	bl	800a812 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080e4:	3b01      	subs	r3, #1
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f023 0307 	bic.w	r3, r3, #7
 80080f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	617b      	str	r3, [r7, #20]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01f      	beq.n	800815c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800811c:	2300      	movs	r3, #0
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e012      	b.n	8008148 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	7819      	ldrb	r1, [r3, #0]
 800812a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	3334      	adds	r3, #52	@ 0x34
 8008132:	460a      	mov	r2, r1
 8008134:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	4413      	add	r3, r2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d006      	beq.n	8008150 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	3301      	adds	r3, #1
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b0f      	cmp	r3, #15
 800814c:	d9e9      	bls.n	8008122 <prvInitialiseNewTask+0x66>
 800814e:	e000      	b.n	8008152 <prvInitialiseNewTask+0x96>
			{
				break;
 8008150:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800815a:	e003      	b.n	8008164 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	2b37      	cmp	r3, #55	@ 0x37
 8008168:	d901      	bls.n	800816e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800816a:	2337      	movs	r3, #55	@ 0x37
 800816c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008172:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008178:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	2200      	movs	r2, #0
 800817e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	3304      	adds	r3, #4
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff f8a7 	bl	80072d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	3318      	adds	r3, #24
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff f8a2 	bl	80072d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008198:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	3354      	adds	r3, #84	@ 0x54
 80081be:	224c      	movs	r2, #76	@ 0x4c
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 fb25 	bl	800a812 <memset>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	4a0d      	ldr	r2, [pc, #52]	@ (8008200 <prvInitialiseNewTask+0x144>)
 80081cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008204 <prvInitialiseNewTask+0x148>)
 80081d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008208 <prvInitialiseNewTask+0x14c>)
 80081d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	68f9      	ldr	r1, [r7, #12]
 80081de:	69b8      	ldr	r0, [r7, #24]
 80081e0:	f001 f95a 	bl	8009498 <pxPortInitialiseStack>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f6:	bf00      	nop
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20005204 	.word	0x20005204
 8008204:	2000526c 	.word	0x2000526c
 8008208:	200052d4 	.word	0x200052d4

0800820c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008214:	f001 fa70 	bl	80096f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008218:	4b2d      	ldr	r3, [pc, #180]	@ (80082d0 <prvAddNewTaskToReadyList+0xc4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	4a2c      	ldr	r2, [pc, #176]	@ (80082d0 <prvAddNewTaskToReadyList+0xc4>)
 8008220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008222:	4b2c      	ldr	r3, [pc, #176]	@ (80082d4 <prvAddNewTaskToReadyList+0xc8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800822a:	4a2a      	ldr	r2, [pc, #168]	@ (80082d4 <prvAddNewTaskToReadyList+0xc8>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008230:	4b27      	ldr	r3, [pc, #156]	@ (80082d0 <prvAddNewTaskToReadyList+0xc4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d110      	bne.n	800825a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008238:	f000 fc2e 	bl	8008a98 <prvInitialiseTaskLists>
 800823c:	e00d      	b.n	800825a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800823e:	4b26      	ldr	r3, [pc, #152]	@ (80082d8 <prvAddNewTaskToReadyList+0xcc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d109      	bne.n	800825a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008246:	4b23      	ldr	r3, [pc, #140]	@ (80082d4 <prvAddNewTaskToReadyList+0xc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	429a      	cmp	r2, r3
 8008252:	d802      	bhi.n	800825a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008254:	4a1f      	ldr	r2, [pc, #124]	@ (80082d4 <prvAddNewTaskToReadyList+0xc8>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800825a:	4b20      	ldr	r3, [pc, #128]	@ (80082dc <prvAddNewTaskToReadyList+0xd0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	4a1e      	ldr	r2, [pc, #120]	@ (80082dc <prvAddNewTaskToReadyList+0xd0>)
 8008262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008264:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <prvAddNewTaskToReadyList+0xd0>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008270:	4b1b      	ldr	r3, [pc, #108]	@ (80082e0 <prvAddNewTaskToReadyList+0xd4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d903      	bls.n	8008280 <prvAddNewTaskToReadyList+0x74>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <prvAddNewTaskToReadyList+0xd4>)
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <prvAddNewTaskToReadyList+0xd8>)
 800828e:	441a      	add	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f7ff f82b 	bl	80072f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800829c:	f001 fa5e 	bl	800975c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082a0:	4b0d      	ldr	r3, [pc, #52]	@ (80082d8 <prvAddNewTaskToReadyList+0xcc>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00e      	beq.n	80082c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <prvAddNewTaskToReadyList+0xc8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d207      	bcs.n	80082c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082b6:	4b0c      	ldr	r3, [pc, #48]	@ (80082e8 <prvAddNewTaskToReadyList+0xdc>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20001484 	.word	0x20001484
 80082d4:	20000fb0 	.word	0x20000fb0
 80082d8:	20001490 	.word	0x20001490
 80082dc:	200014a0 	.word	0x200014a0
 80082e0:	2000148c 	.word	0x2000148c
 80082e4:	20000fb4 	.word	0x20000fb4
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082fe:	4b14      	ldr	r3, [pc, #80]	@ (8008350 <vTaskDelay+0x64>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00b      	beq.n	800831e <vTaskDelay+0x32>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60bb      	str	r3, [r7, #8]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800831e:	f000 f88b 	bl	8008438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd09 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800832a:	f000 f893 	bl	8008454 <xTaskResumeAll>
 800832e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008336:	4b07      	ldr	r3, [pc, #28]	@ (8008354 <vTaskDelay+0x68>)
 8008338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200014ac 	.word	0x200014ac
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	@ 0x28
 800835c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008366:	463a      	mov	r2, r7
 8008368:	1d39      	adds	r1, r7, #4
 800836a:	f107 0308 	add.w	r3, r7, #8
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe ff5e 	bl	8007230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	9202      	str	r2, [sp, #8]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	2300      	movs	r3, #0
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	2300      	movs	r3, #0
 8008384:	460a      	mov	r2, r1
 8008386:	4924      	ldr	r1, [pc, #144]	@ (8008418 <vTaskStartScheduler+0xc0>)
 8008388:	4824      	ldr	r0, [pc, #144]	@ (800841c <vTaskStartScheduler+0xc4>)
 800838a:	f7ff fdf1 	bl	8007f70 <xTaskCreateStatic>
 800838e:	4603      	mov	r3, r0
 8008390:	4a23      	ldr	r2, [pc, #140]	@ (8008420 <vTaskStartScheduler+0xc8>)
 8008392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008394:	4b22      	ldr	r3, [pc, #136]	@ (8008420 <vTaskStartScheduler+0xc8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800839c:	2301      	movs	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	e001      	b.n	80083a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d102      	bne.n	80083b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083ac:	f000 fd1a 	bl	8008de4 <xTimerCreateTimerTask>
 80083b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d11b      	bne.n	80083f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	613b      	str	r3, [r7, #16]
}
 80083ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083cc:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <vTaskStartScheduler+0xcc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3354      	adds	r3, #84	@ 0x54
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <vTaskStartScheduler+0xd0>)
 80083d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d6:	4b15      	ldr	r3, [pc, #84]	@ (800842c <vTaskStartScheduler+0xd4>)
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083de:	4b14      	ldr	r3, [pc, #80]	@ (8008430 <vTaskStartScheduler+0xd8>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083e4:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <vTaskStartScheduler+0xdc>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ea:	f001 f8e1 	bl	80095b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083ee:	e00f      	b.n	8008410 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d10b      	bne.n	8008410 <vTaskStartScheduler+0xb8>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <vTaskStartScheduler+0xb4>
}
 8008410:	bf00      	nop
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	0800cb54 	.word	0x0800cb54
 800841c:	08008a69 	.word	0x08008a69
 8008420:	200014a8 	.word	0x200014a8
 8008424:	20000fb0 	.word	0x20000fb0
 8008428:	20000024 	.word	0x20000024
 800842c:	200014a4 	.word	0x200014a4
 8008430:	20001490 	.word	0x20001490
 8008434:	20001488 	.word	0x20001488

08008438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800843c:	4b04      	ldr	r3, [pc, #16]	@ (8008450 <vTaskSuspendAll+0x18>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	4a03      	ldr	r2, [pc, #12]	@ (8008450 <vTaskSuspendAll+0x18>)
 8008444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008446:	bf00      	nop
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	200014ac 	.word	0x200014ac

08008454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008462:	4b42      	ldr	r3, [pc, #264]	@ (800856c <xTaskResumeAll+0x118>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <xTaskResumeAll+0x2e>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	603b      	str	r3, [r7, #0]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008482:	f001 f939 	bl	80096f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008486:	4b39      	ldr	r3, [pc, #228]	@ (800856c <xTaskResumeAll+0x118>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a37      	ldr	r2, [pc, #220]	@ (800856c <xTaskResumeAll+0x118>)
 800848e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008490:	4b36      	ldr	r3, [pc, #216]	@ (800856c <xTaskResumeAll+0x118>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d162      	bne.n	800855e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008498:	4b35      	ldr	r3, [pc, #212]	@ (8008570 <xTaskResumeAll+0x11c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d05e      	beq.n	800855e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a0:	e02f      	b.n	8008502 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a2:	4b34      	ldr	r3, [pc, #208]	@ (8008574 <xTaskResumeAll+0x120>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3318      	adds	r3, #24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ff7c 	bl	80073ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe ff77 	bl	80073ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008578 <xTaskResumeAll+0x124>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d903      	bls.n	80084d2 <xTaskResumeAll+0x7e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008578 <xTaskResumeAll+0x124>)
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a27      	ldr	r2, [pc, #156]	@ (800857c <xTaskResumeAll+0x128>)
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe ff02 	bl	80072f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <xTaskResumeAll+0x12c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d302      	bcc.n	8008502 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084fc:	4b21      	ldr	r3, [pc, #132]	@ (8008584 <xTaskResumeAll+0x130>)
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008502:	4b1c      	ldr	r3, [pc, #112]	@ (8008574 <xTaskResumeAll+0x120>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1cb      	bne.n	80084a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008510:	f000 fb66 	bl	8008be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008514:	4b1c      	ldr	r3, [pc, #112]	@ (8008588 <xTaskResumeAll+0x134>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008520:	f000 f846 	bl	80085b0 <xTaskIncrementTick>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800852a:	4b16      	ldr	r3, [pc, #88]	@ (8008584 <xTaskResumeAll+0x130>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3b01      	subs	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f1      	bne.n	8008520 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800853c:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <xTaskResumeAll+0x134>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008542:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <xTaskResumeAll+0x130>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800854e:	4b0f      	ldr	r3, [pc, #60]	@ (800858c <xTaskResumeAll+0x138>)
 8008550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800855e:	f001 f8fd 	bl	800975c <vPortExitCritical>

	return xAlreadyYielded;
 8008562:	68bb      	ldr	r3, [r7, #8]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	200014ac 	.word	0x200014ac
 8008570:	20001484 	.word	0x20001484
 8008574:	20001444 	.word	0x20001444
 8008578:	2000148c 	.word	0x2000148c
 800857c:	20000fb4 	.word	0x20000fb4
 8008580:	20000fb0 	.word	0x20000fb0
 8008584:	20001498 	.word	0x20001498
 8008588:	20001494 	.word	0x20001494
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008596:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <xTaskGetTickCount+0x1c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800859c:	687b      	ldr	r3, [r7, #4]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20001488 	.word	0x20001488

080085b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ba:	4b4f      	ldr	r3, [pc, #316]	@ (80086f8 <xTaskIncrementTick+0x148>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f040 8090 	bne.w	80086e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085c4:	4b4d      	ldr	r3, [pc, #308]	@ (80086fc <xTaskIncrementTick+0x14c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085cc:	4a4b      	ldr	r2, [pc, #300]	@ (80086fc <xTaskIncrementTick+0x14c>)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d121      	bne.n	800861c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085d8:	4b49      	ldr	r3, [pc, #292]	@ (8008700 <xTaskIncrementTick+0x150>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	603b      	str	r3, [r7, #0]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xTaskIncrementTick+0x46>
 80085fa:	4b41      	ldr	r3, [pc, #260]	@ (8008700 <xTaskIncrementTick+0x150>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	4b40      	ldr	r3, [pc, #256]	@ (8008704 <xTaskIncrementTick+0x154>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3e      	ldr	r2, [pc, #248]	@ (8008700 <xTaskIncrementTick+0x150>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	4a3e      	ldr	r2, [pc, #248]	@ (8008704 <xTaskIncrementTick+0x154>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	4b3e      	ldr	r3, [pc, #248]	@ (8008708 <xTaskIncrementTick+0x158>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a3c      	ldr	r2, [pc, #240]	@ (8008708 <xTaskIncrementTick+0x158>)
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f000 fae2 	bl	8008be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800861c:	4b3b      	ldr	r3, [pc, #236]	@ (800870c <xTaskIncrementTick+0x15c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	d349      	bcc.n	80086ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008626:	4b36      	ldr	r3, [pc, #216]	@ (8008700 <xTaskIncrementTick+0x150>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d104      	bne.n	800863a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	4b36      	ldr	r3, [pc, #216]	@ (800870c <xTaskIncrementTick+0x15c>)
 8008632:	f04f 32ff 	mov.w	r2, #4294967295
 8008636:	601a      	str	r2, [r3, #0]
					break;
 8008638:	e03f      	b.n	80086ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863a:	4b31      	ldr	r3, [pc, #196]	@ (8008700 <xTaskIncrementTick+0x150>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d203      	bcs.n	800865a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008652:	4a2e      	ldr	r2, [pc, #184]	@ (800870c <xTaskIncrementTick+0x15c>)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008658:	e02f      	b.n	80086ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	3304      	adds	r3, #4
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fea4 	bl	80073ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3318      	adds	r3, #24
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fe9b 	bl	80073ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	4b25      	ldr	r3, [pc, #148]	@ (8008710 <xTaskIncrementTick+0x160>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d903      	bls.n	800868a <xTaskIncrementTick+0xda>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	4a22      	ldr	r2, [pc, #136]	@ (8008710 <xTaskIncrementTick+0x160>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <xTaskIncrementTick+0x164>)
 8008698:	441a      	add	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3304      	adds	r3, #4
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7fe fe26 	bl	80072f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <xTaskIncrementTick+0x168>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d3b8      	bcc.n	8008626 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b8:	e7b5      	b.n	8008626 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086ba:	4b17      	ldr	r3, [pc, #92]	@ (8008718 <xTaskIncrementTick+0x168>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c0:	4914      	ldr	r1, [pc, #80]	@ (8008714 <xTaskIncrementTick+0x164>)
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d901      	bls.n	80086d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086d6:	4b11      	ldr	r3, [pc, #68]	@ (800871c <xTaskIncrementTick+0x16c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	e004      	b.n	80086ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008720 <xTaskIncrementTick+0x170>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008720 <xTaskIncrementTick+0x170>)
 80086ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	200014ac 	.word	0x200014ac
 80086fc:	20001488 	.word	0x20001488
 8008700:	2000143c 	.word	0x2000143c
 8008704:	20001440 	.word	0x20001440
 8008708:	2000149c 	.word	0x2000149c
 800870c:	200014a4 	.word	0x200014a4
 8008710:	2000148c 	.word	0x2000148c
 8008714:	20000fb4 	.word	0x20000fb4
 8008718:	20000fb0 	.word	0x20000fb0
 800871c:	20001498 	.word	0x20001498
 8008720:	20001494 	.word	0x20001494

08008724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800872a:	4b2b      	ldr	r3, [pc, #172]	@ (80087d8 <vTaskSwitchContext+0xb4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008732:	4b2a      	ldr	r3, [pc, #168]	@ (80087dc <vTaskSwitchContext+0xb8>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008738:	e047      	b.n	80087ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800873a:	4b28      	ldr	r3, [pc, #160]	@ (80087dc <vTaskSwitchContext+0xb8>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008740:	4b27      	ldr	r3, [pc, #156]	@ (80087e0 <vTaskSwitchContext+0xbc>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e011      	b.n	800876c <vTaskSwitchContext+0x48>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <vTaskSwitchContext+0x42>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	607b      	str	r3, [r7, #4]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <vTaskSwitchContext+0x3e>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3b01      	subs	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	491d      	ldr	r1, [pc, #116]	@ (80087e4 <vTaskSwitchContext+0xc0>)
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0e3      	beq.n	8008748 <vTaskSwitchContext+0x24>
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4a16      	ldr	r2, [pc, #88]	@ (80087e4 <vTaskSwitchContext+0xc0>)
 800878c:	4413      	add	r3, r2
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	3308      	adds	r3, #8
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d104      	bne.n	80087b0 <vTaskSwitchContext+0x8c>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	605a      	str	r2, [r3, #4]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	4a0c      	ldr	r2, [pc, #48]	@ (80087e8 <vTaskSwitchContext+0xc4>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	4a09      	ldr	r2, [pc, #36]	@ (80087e0 <vTaskSwitchContext+0xbc>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087c0:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <vTaskSwitchContext+0xc4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3354      	adds	r3, #84	@ 0x54
 80087c6:	4a09      	ldr	r2, [pc, #36]	@ (80087ec <vTaskSwitchContext+0xc8>)
 80087c8:	6013      	str	r3, [r2, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	200014ac 	.word	0x200014ac
 80087dc:	20001498 	.word	0x20001498
 80087e0:	2000148c 	.word	0x2000148c
 80087e4:	20000fb4 	.word	0x20000fb4
 80087e8:	20000fb0 	.word	0x20000fb0
 80087ec:	20000024 	.word	0x20000024

080087f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	60fb      	str	r3, [r7, #12]
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008818:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <vTaskPlaceOnEventList+0x48>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3318      	adds	r3, #24
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe fd8a 	bl	800733a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008826:	2101      	movs	r1, #1
 8008828:	6838      	ldr	r0, [r7, #0]
 800882a:	f000 fa87 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000fb0 	.word	0x20000fb0

0800883c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	617b      	str	r3, [r7, #20]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008866:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <vTaskPlaceOnEventListRestricted+0x54>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3318      	adds	r3, #24
 800886c:	4619      	mov	r1, r3
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7fe fd3f 	bl	80072f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800887a:	f04f 33ff 	mov.w	r3, #4294967295
 800887e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	68b8      	ldr	r0, [r7, #8]
 8008884:	f000 fa5a 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
	}
 8008888:	bf00      	nop
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000fb0 	.word	0x20000fb0

08008894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60fb      	str	r3, [r7, #12]
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	e7fd      	b.n	80088be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	3318      	adds	r3, #24
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fd70 	bl	80073ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008944 <xTaskRemoveFromEventList+0xb0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d11d      	bne.n	8008910 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe fd67 	bl	80073ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	4b19      	ldr	r3, [pc, #100]	@ (8008948 <xTaskRemoveFromEventList+0xb4>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d903      	bls.n	80088f2 <xTaskRemoveFromEventList+0x5e>
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	4a16      	ldr	r2, [pc, #88]	@ (8008948 <xTaskRemoveFromEventList+0xb4>)
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4a13      	ldr	r2, [pc, #76]	@ (800894c <xTaskRemoveFromEventList+0xb8>)
 8008900:	441a      	add	r2, r3
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f7fe fcf2 	bl	80072f2 <vListInsertEnd>
 800890e:	e005      	b.n	800891c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	3318      	adds	r3, #24
 8008914:	4619      	mov	r1, r3
 8008916:	480e      	ldr	r0, [pc, #56]	@ (8008950 <xTaskRemoveFromEventList+0xbc>)
 8008918:	f7fe fceb 	bl	80072f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008920:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <xTaskRemoveFromEventList+0xc0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	429a      	cmp	r2, r3
 8008928:	d905      	bls.n	8008936 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800892e:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <xTaskRemoveFromEventList+0xc4>)
 8008930:	2201      	movs	r2, #1
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e001      	b.n	800893a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800893a:	697b      	ldr	r3, [r7, #20]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	200014ac 	.word	0x200014ac
 8008948:	2000148c 	.word	0x2000148c
 800894c:	20000fb4 	.word	0x20000fb4
 8008950:	20001444 	.word	0x20001444
 8008954:	20000fb0 	.word	0x20000fb0
 8008958:	20001498 	.word	0x20001498

0800895c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008964:	4b06      	ldr	r3, [pc, #24]	@ (8008980 <vTaskInternalSetTimeOutState+0x24>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800896c:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <vTaskInternalSetTimeOutState+0x28>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	605a      	str	r2, [r3, #4]
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	2000149c 	.word	0x2000149c
 8008984:	20001488 	.word	0x20001488

08008988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	613b      	str	r3, [r7, #16]
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	60fb      	str	r3, [r7, #12]
}
 80089c8:	bf00      	nop
 80089ca:	bf00      	nop
 80089cc:	e7fd      	b.n	80089ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80089ce:	f000 fe93 	bl	80096f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a48 <xTaskCheckForTimeOut+0xc0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d102      	bne.n	80089f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e023      	b.n	8008a3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b15      	ldr	r3, [pc, #84]	@ (8008a4c <xTaskCheckForTimeOut+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d007      	beq.n	8008a0e <xTaskCheckForTimeOut+0x86>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d302      	bcc.n	8008a0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	61fb      	str	r3, [r7, #28]
 8008a0c:	e015      	b.n	8008a3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d20b      	bcs.n	8008a30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff99 	bl	800895c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e004      	b.n	8008a3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a36:	2301      	movs	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a3a:	f000 fe8f 	bl	800975c <vPortExitCritical>

	return xReturn;
 8008a3e:	69fb      	ldr	r3, [r7, #28]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20001488 	.word	0x20001488
 8008a4c:	2000149c 	.word	0x2000149c

08008a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a54:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <vTaskMissedYield+0x14>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
}
 8008a5a:	bf00      	nop
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20001498 	.word	0x20001498

08008a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a70:	f000 f852 	bl	8008b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a74:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <prvIdleTask+0x28>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d9f9      	bls.n	8008a70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a7c:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <prvIdleTask+0x2c>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a8c:	e7f0      	b.n	8008a70 <prvIdleTask+0x8>
 8008a8e:	bf00      	nop
 8008a90:	20000fb4 	.word	0x20000fb4
 8008a94:	e000ed04 	.word	0xe000ed04

08008a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	e00c      	b.n	8008abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4a12      	ldr	r2, [pc, #72]	@ (8008af8 <prvInitialiseTaskLists+0x60>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fbf0 	bl	8007298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3301      	adds	r3, #1
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b37      	cmp	r3, #55	@ 0x37
 8008ac2:	d9ef      	bls.n	8008aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ac4:	480d      	ldr	r0, [pc, #52]	@ (8008afc <prvInitialiseTaskLists+0x64>)
 8008ac6:	f7fe fbe7 	bl	8007298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aca:	480d      	ldr	r0, [pc, #52]	@ (8008b00 <prvInitialiseTaskLists+0x68>)
 8008acc:	f7fe fbe4 	bl	8007298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ad0:	480c      	ldr	r0, [pc, #48]	@ (8008b04 <prvInitialiseTaskLists+0x6c>)
 8008ad2:	f7fe fbe1 	bl	8007298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ad6:	480c      	ldr	r0, [pc, #48]	@ (8008b08 <prvInitialiseTaskLists+0x70>)
 8008ad8:	f7fe fbde 	bl	8007298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008adc:	480b      	ldr	r0, [pc, #44]	@ (8008b0c <prvInitialiseTaskLists+0x74>)
 8008ade:	f7fe fbdb 	bl	8007298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b10 <prvInitialiseTaskLists+0x78>)
 8008ae4:	4a05      	ldr	r2, [pc, #20]	@ (8008afc <prvInitialiseTaskLists+0x64>)
 8008ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvInitialiseTaskLists+0x7c>)
 8008aea:	4a05      	ldr	r2, [pc, #20]	@ (8008b00 <prvInitialiseTaskLists+0x68>)
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000fb4 	.word	0x20000fb4
 8008afc:	20001414 	.word	0x20001414
 8008b00:	20001428 	.word	0x20001428
 8008b04:	20001444 	.word	0x20001444
 8008b08:	20001458 	.word	0x20001458
 8008b0c:	20001470 	.word	0x20001470
 8008b10:	2000143c 	.word	0x2000143c
 8008b14:	20001440 	.word	0x20001440

08008b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b1e:	e019      	b.n	8008b54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b20:	f000 fdea 	bl	80096f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b24:	4b10      	ldr	r3, [pc, #64]	@ (8008b68 <prvCheckTasksWaitingTermination+0x50>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fc3b 	bl	80073ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b36:	4b0d      	ldr	r3, [pc, #52]	@ (8008b6c <prvCheckTasksWaitingTermination+0x54>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008b6c <prvCheckTasksWaitingTermination+0x54>)
 8008b3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4a0a      	ldr	r2, [pc, #40]	@ (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b4a:	f000 fe07 	bl	800975c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f810 	bl	8008b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b54:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <prvCheckTasksWaitingTermination+0x58>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e1      	bne.n	8008b20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001458 	.word	0x20001458
 8008b6c:	20001484 	.word	0x20001484
 8008b70:	2000146c 	.word	0x2000146c

08008b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3354      	adds	r3, #84	@ 0x54
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 fe63 	bl	800a84c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d108      	bne.n	8008ba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 ff9f 	bl	8009ad8 <vPortFree>
				vPortFree( pxTCB );
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 ff9c 	bl	8009ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ba0:	e019      	b.n	8008bd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d103      	bne.n	8008bb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 ff93 	bl	8009ad8 <vPortFree>
	}
 8008bb2:	e010      	b.n	8008bd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d00b      	beq.n	8008bd6 <prvDeleteTCB+0x62>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60fb      	str	r3, [r7, #12]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <prvDeleteTCB+0x5e>
	}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be6:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <prvResetNextTaskUnblockTime+0x38>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <prvResetNextTaskUnblockTime+0x3c>)
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bf8:	e008      	b.n	8008c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfa:	4b07      	ldr	r3, [pc, #28]	@ (8008c18 <prvResetNextTaskUnblockTime+0x38>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a04      	ldr	r2, [pc, #16]	@ (8008c1c <prvResetNextTaskUnblockTime+0x3c>)
 8008c0a:	6013      	str	r3, [r2, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	2000143c 	.word	0x2000143c
 8008c1c:	200014a4 	.word	0x200014a4

08008c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <xTaskGetSchedulerState+0x34>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e008      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c34:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <xTaskGetSchedulerState+0x38>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	e001      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c42:	2300      	movs	r3, #0
 8008c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c46:	687b      	ldr	r3, [r7, #4]
	}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20001490 	.word	0x20001490
 8008c58:	200014ac 	.word	0x200014ac

08008c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d058      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c72:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <xTaskPriorityDisinherit+0xd4>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d00b      	beq.n	8008c94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	e7fd      	b.n	8008c90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	60bb      	str	r3, [r7, #8]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d02c      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d128      	bne.n	8008d24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fb68 	bl	80073ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <xTaskPriorityDisinherit+0xd8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d903      	bls.n	8008d04 <xTaskPriorityDisinherit+0xa8>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d00:	4a0c      	ldr	r2, [pc, #48]	@ (8008d34 <xTaskPriorityDisinherit+0xd8>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a09      	ldr	r2, [pc, #36]	@ (8008d38 <xTaskPriorityDisinherit+0xdc>)
 8008d12:	441a      	add	r2, r3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fe fae9 	bl	80072f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d24:	697b      	ldr	r3, [r7, #20]
	}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000fb0 	.word	0x20000fb0
 8008d34:	2000148c 	.word	0x2000148c
 8008d38:	20000fb4 	.word	0x20000fb4

08008d3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d46:	4b21      	ldr	r3, [pc, #132]	@ (8008dcc <prvAddCurrentTaskToDelayedList+0x90>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4c:	4b20      	ldr	r3, [pc, #128]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fb2a 	bl	80073ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d10a      	bne.n	8008d76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d66:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4819      	ldr	r0, [pc, #100]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d70:	f7fe fabf 	bl	80072f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d74:	e026      	b.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d7e:	4b14      	ldr	r3, [pc, #80]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d209      	bcs.n	8008da2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8e:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fe facd 	bl	800733a <vListInsert>
}
 8008da0:	e010      	b.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fac3 	bl	800733a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008db4:	4b0a      	ldr	r3, [pc, #40]	@ (8008de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d202      	bcs.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dbe:	4a08      	ldr	r2, [pc, #32]	@ (8008de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6013      	str	r3, [r2, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20001488 	.word	0x20001488
 8008dd0:	20000fb0 	.word	0x20000fb0
 8008dd4:	20001470 	.word	0x20001470
 8008dd8:	20001440 	.word	0x20001440
 8008ddc:	2000143c 	.word	0x2000143c
 8008de0:	200014a4 	.word	0x200014a4

08008de4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	@ 0x28
 8008de8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dee:	f000 fb13 	bl	8009418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008df2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e68 <xTimerCreateTimerTask+0x84>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d021      	beq.n	8008e3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e02:	1d3a      	adds	r2, r7, #4
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe fa29 	bl	8007264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	9202      	str	r2, [sp, #8]
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2300      	movs	r3, #0
 8008e22:	460a      	mov	r2, r1
 8008e24:	4911      	ldr	r1, [pc, #68]	@ (8008e6c <xTimerCreateTimerTask+0x88>)
 8008e26:	4812      	ldr	r0, [pc, #72]	@ (8008e70 <xTimerCreateTimerTask+0x8c>)
 8008e28:	f7ff f8a2 	bl	8007f70 <xTaskCreateStatic>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	4a11      	ldr	r2, [pc, #68]	@ (8008e74 <xTimerCreateTimerTask+0x90>)
 8008e30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e32:	4b10      	ldr	r3, [pc, #64]	@ (8008e74 <xTimerCreateTimerTask+0x90>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	613b      	str	r3, [r7, #16]
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e5c:	697b      	ldr	r3, [r7, #20]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200014e0 	.word	0x200014e0
 8008e6c:	0800cb5c 	.word	0x0800cb5c
 8008e70:	08008fb1 	.word	0x08008fb1
 8008e74:	200014e4 	.word	0x200014e4

08008e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	@ 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	623b      	str	r3, [r7, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ea8:	4b19      	ldr	r3, [pc, #100]	@ (8008f10 <xTimerGenericCommand+0x98>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d02a      	beq.n	8008f06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	dc18      	bgt.n	8008ef4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ec2:	f7ff fead 	bl	8008c20 <xTaskGetSchedulerState>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d109      	bne.n	8008ee0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <xTimerGenericCommand+0x98>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	f107 0110 	add.w	r1, r7, #16
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ed8:	f7fe fbd8 	bl	800768c <xQueueGenericSend>
 8008edc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ede:	e012      	b.n	8008f06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <xTimerGenericCommand+0x98>)
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	f107 0110 	add.w	r1, r7, #16
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2200      	movs	r2, #0
 8008eec:	f7fe fbce 	bl	800768c <xQueueGenericSend>
 8008ef0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ef2:	e008      	b.n	8008f06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <xTimerGenericCommand+0x98>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	f107 0110 	add.w	r1, r7, #16
 8008efc:	2300      	movs	r3, #0
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	f7fe fcc6 	bl	8007890 <xQueueGenericSendFromISR>
 8008f04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3728      	adds	r7, #40	@ 0x28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	200014e0 	.word	0x200014e0

08008f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1e:	4b23      	ldr	r3, [pc, #140]	@ (8008fac <prvProcessExpiredTimer+0x98>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fa3d 	bl	80073ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d023      	beq.n	8008f88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	18d1      	adds	r1, r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	6978      	ldr	r0, [r7, #20]
 8008f4e:	f000 f8d5 	bl	80090fc <prvInsertTimerInActiveList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d020      	beq.n	8008f9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	2100      	movs	r1, #0
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7ff ff88 	bl	8008e78 <xTimerGenericCommand>
 8008f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d114      	bne.n	8008f9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	6978      	ldr	r0, [r7, #20]
 8008fa0:	4798      	blx	r3
}
 8008fa2:	bf00      	nop
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	200014d8 	.word	0x200014d8

08008fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 f859 	bl	8009074 <prvGetNextExpireTime>
 8008fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f805 	bl	8008fd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fce:	f000 f8d7 	bl	8009180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fd2:	bf00      	nop
 8008fd4:	e7f0      	b.n	8008fb8 <prvTimerTask+0x8>
	...

08008fd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fe2:	f7ff fa29 	bl	8008438 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fe6:	f107 0308 	add.w	r3, r7, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f866 	bl	80090bc <prvSampleTimeNow>
 8008ff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d130      	bne.n	800905a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <prvProcessTimerOrBlockTask+0x3c>
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d806      	bhi.n	8009014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009006:	f7ff fa25 	bl	8008454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800900a:	68f9      	ldr	r1, [r7, #12]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff81 	bl	8008f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009012:	e024      	b.n	800905e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800901a:	4b13      	ldr	r3, [pc, #76]	@ (8009068 <prvProcessTimerOrBlockTask+0x90>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <prvProcessTimerOrBlockTask+0x50>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <prvProcessTimerOrBlockTask+0x52>
 8009028:	2300      	movs	r3, #0
 800902a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800902c:	4b0f      	ldr	r3, [pc, #60]	@ (800906c <prvProcessTimerOrBlockTask+0x94>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4619      	mov	r1, r3
 800903a:	f7fe ff65 	bl	8007f08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800903e:	f7ff fa09 	bl	8008454 <xTaskResumeAll>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009048:	4b09      	ldr	r3, [pc, #36]	@ (8009070 <prvProcessTimerOrBlockTask+0x98>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
}
 8009058:	e001      	b.n	800905e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800905a:	f7ff f9fb 	bl	8008454 <xTaskResumeAll>
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	200014dc 	.word	0x200014dc
 800906c:	200014e0 	.word	0x200014e0
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800907c:	4b0e      	ldr	r3, [pc, #56]	@ (80090b8 <prvGetNextExpireTime+0x44>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <prvGetNextExpireTime+0x16>
 8009086:	2201      	movs	r2, #1
 8009088:	e000      	b.n	800908c <prvGetNextExpireTime+0x18>
 800908a:	2200      	movs	r2, #0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009098:	4b07      	ldr	r3, [pc, #28]	@ (80090b8 <prvGetNextExpireTime+0x44>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e001      	b.n	80090a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090a8:	68fb      	ldr	r3, [r7, #12]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	200014d8 	.word	0x200014d8

080090bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090c4:	f7ff fa64 	bl	8008590 <xTaskGetTickCount>
 80090c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090ca:	4b0b      	ldr	r3, [pc, #44]	@ (80090f8 <prvSampleTimeNow+0x3c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d205      	bcs.n	80090e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090d4:	f000 f93a 	bl	800934c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e002      	b.n	80090e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090e6:	4a04      	ldr	r2, [pc, #16]	@ (80090f8 <prvSampleTimeNow+0x3c>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090ec:	68fb      	ldr	r3, [r7, #12]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200014e8 	.word	0x200014e8

080090fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d812      	bhi.n	8009148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e01b      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009136:	4b10      	ldr	r3, [pc, #64]	@ (8009178 <prvInsertTimerInActiveList+0x7c>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3304      	adds	r3, #4
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f7fe f8fa 	bl	800733a <vListInsert>
 8009146:	e012      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d206      	bcs.n	800915e <prvInsertTimerInActiveList+0x62>
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d302      	bcc.n	800915e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e007      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800915e:	4b07      	ldr	r3, [pc, #28]	@ (800917c <prvInsertTimerInActiveList+0x80>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	4619      	mov	r1, r3
 8009168:	4610      	mov	r0, r2
 800916a:	f7fe f8e6 	bl	800733a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800916e:	697b      	ldr	r3, [r7, #20]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	200014dc 	.word	0x200014dc
 800917c:	200014d8 	.word	0x200014d8

08009180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	@ 0x38
 8009184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009186:	e0ce      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da19      	bge.n	80091c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	3304      	adds	r3, #4
 8009192:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	61fb      	str	r3, [r7, #28]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b8:	6850      	ldr	r0, [r2, #4]
 80091ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091bc:	6892      	ldr	r2, [r2, #8]
 80091be:	4611      	mov	r1, r2
 80091c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f2c0 80ae 	blt.w	8009326 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe f8e6 	bl	80073ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091e0:	463b      	mov	r3, r7
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff ff6a 	bl	80090bc <prvSampleTimeNow>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b09      	cmp	r3, #9
 80091ee:	f200 8097 	bhi.w	8009320 <prvProcessReceivedCommands+0x1a0>
 80091f2:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <prvProcessReceivedCommands+0x78>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009221 	.word	0x08009221
 8009204:	08009297 	.word	0x08009297
 8009208:	080092ab 	.word	0x080092ab
 800920c:	080092f7 	.word	0x080092f7
 8009210:	08009221 	.word	0x08009221
 8009214:	08009221 	.word	0x08009221
 8009218:	08009297 	.word	0x08009297
 800921c:	080092ab 	.word	0x080092ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009226:	f043 0301 	orr.w	r3, r3, #1
 800922a:	b2da      	uxtb	r2, r3
 800922c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	18d1      	adds	r1, r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009240:	f7ff ff5c 	bl	80090fc <prvInsertTimerInActiveList>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d06c      	beq.n	8009324 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009250:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d061      	beq.n	8009324 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	441a      	add	r2, r3
 8009268:	2300      	movs	r3, #0
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	2300      	movs	r3, #0
 800926e:	2100      	movs	r1, #0
 8009270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009272:	f7ff fe01 	bl	8008e78 <xTimerGenericCommand>
 8009276:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d152      	bne.n	8009324 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	61bb      	str	r3, [r7, #24]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092a8:	e03d      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b0:	f043 0301 	orr.w	r3, r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	617b      	str	r3, [r7, #20]
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	18d1      	adds	r1, r2, r3
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092f0:	f7ff ff04 	bl	80090fc <prvInsertTimerInActiveList>
					break;
 80092f4:	e017      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009306:	f000 fbe7 	bl	8009ad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800930a:	e00c      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800931e:	e002      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009320:	bf00      	nop
 8009322:	e000      	b.n	8009326 <prvProcessReceivedCommands+0x1a6>
					break;
 8009324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009326:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <prvProcessReceivedCommands+0x1c8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	1d39      	adds	r1, r7, #4
 800932c:	2200      	movs	r2, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fb4c 	bl	80079cc <xQueueReceive>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	f47f af26 	bne.w	8009188 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	3730      	adds	r7, #48	@ 0x30
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200014e0 	.word	0x200014e0

0800934c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009352:	e049      	b.n	80093e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009354:	4b2e      	ldr	r3, [pc, #184]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935e:	4b2c      	ldr	r3, [pc, #176]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3304      	adds	r3, #4
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe f81d 	bl	80073ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d02f      	beq.n	80093e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	429a      	cmp	r2, r3
 8009398:	d90e      	bls.n	80093b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f7fd ffc2 	bl	800733a <vListInsert>
 80093b6:	e017      	b.n	80093e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	2100      	movs	r1, #0
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff fd58 	bl	8008e78 <xTimerGenericCommand>
 80093c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10b      	bne.n	80093e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	603b      	str	r3, [r7, #0]
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	e7fd      	b.n	80093e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093e8:	4b09      	ldr	r3, [pc, #36]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1b0      	bne.n	8009354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093f2:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093f8:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <prvSwitchTimerLists+0xc8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a04      	ldr	r2, [pc, #16]	@ (8009410 <prvSwitchTimerLists+0xc4>)
 80093fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009400:	4a04      	ldr	r2, [pc, #16]	@ (8009414 <prvSwitchTimerLists+0xc8>)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	6013      	str	r3, [r2, #0]
}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200014d8 	.word	0x200014d8
 8009414:	200014dc 	.word	0x200014dc

08009418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800941e:	f000 f96b 	bl	80096f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009422:	4b15      	ldr	r3, [pc, #84]	@ (8009478 <prvCheckForValidListAndQueue+0x60>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d120      	bne.n	800946c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800942a:	4814      	ldr	r0, [pc, #80]	@ (800947c <prvCheckForValidListAndQueue+0x64>)
 800942c:	f7fd ff34 	bl	8007298 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009430:	4813      	ldr	r0, [pc, #76]	@ (8009480 <prvCheckForValidListAndQueue+0x68>)
 8009432:	f7fd ff31 	bl	8007298 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009436:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <prvCheckForValidListAndQueue+0x6c>)
 8009438:	4a10      	ldr	r2, [pc, #64]	@ (800947c <prvCheckForValidListAndQueue+0x64>)
 800943a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800943c:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <prvCheckForValidListAndQueue+0x70>)
 800943e:	4a10      	ldr	r2, [pc, #64]	@ (8009480 <prvCheckForValidListAndQueue+0x68>)
 8009440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009442:	2300      	movs	r3, #0
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	4b11      	ldr	r3, [pc, #68]	@ (800948c <prvCheckForValidListAndQueue+0x74>)
 8009448:	4a11      	ldr	r2, [pc, #68]	@ (8009490 <prvCheckForValidListAndQueue+0x78>)
 800944a:	2110      	movs	r1, #16
 800944c:	200a      	movs	r0, #10
 800944e:	f7fe f841 	bl	80074d4 <xQueueGenericCreateStatic>
 8009452:	4603      	mov	r3, r0
 8009454:	4a08      	ldr	r2, [pc, #32]	@ (8009478 <prvCheckForValidListAndQueue+0x60>)
 8009456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009458:	4b07      	ldr	r3, [pc, #28]	@ (8009478 <prvCheckForValidListAndQueue+0x60>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009460:	4b05      	ldr	r3, [pc, #20]	@ (8009478 <prvCheckForValidListAndQueue+0x60>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	490b      	ldr	r1, [pc, #44]	@ (8009494 <prvCheckForValidListAndQueue+0x7c>)
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fd24 	bl	8007eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800946c:	f000 f976 	bl	800975c <vPortExitCritical>
}
 8009470:	bf00      	nop
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200014e0 	.word	0x200014e0
 800947c:	200014b0 	.word	0x200014b0
 8009480:	200014c4 	.word	0x200014c4
 8009484:	200014d8 	.word	0x200014d8
 8009488:	200014dc 	.word	0x200014dc
 800948c:	2000158c 	.word	0x2000158c
 8009490:	200014ec 	.word	0x200014ec
 8009494:	0800cb64 	.word	0x0800cb64

08009498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3b04      	subs	r3, #4
 80094a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80094b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b04      	subs	r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094c8:	4a0c      	ldr	r2, [pc, #48]	@ (80094fc <pxPortInitialiseStack+0x64>)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3b14      	subs	r3, #20
 80094d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b04      	subs	r3, #4
 80094de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f06f 0202 	mvn.w	r2, #2
 80094e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3b20      	subs	r3, #32
 80094ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094ee:	68fb      	ldr	r3, [r7, #12]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	08009501 	.word	0x08009501

08009500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800950a:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <prvTaskExitError+0x58>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d00b      	beq.n	800952c <prvTaskExitError+0x2c>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60fb      	str	r3, [r7, #12]
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <prvTaskExitError+0x28>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60bb      	str	r3, [r7, #8]
}
 800953e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009540:	bf00      	nop
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0fc      	beq.n	8009542 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000014 	.word	0x20000014
 800955c:	00000000 	.word	0x00000000

08009560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009560:	4b07      	ldr	r3, [pc, #28]	@ (8009580 <pxCurrentTCBConst2>)
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	6808      	ldr	r0, [r1, #0]
 8009566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	f380 8809 	msr	PSP, r0
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8811 	msr	BASEPRI, r0
 800957a:	4770      	bx	lr
 800957c:	f3af 8000 	nop.w

08009580 <pxCurrentTCBConst2>:
 8009580:	20000fb0 	.word	0x20000fb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009588:	4808      	ldr	r0, [pc, #32]	@ (80095ac <prvPortStartFirstTask+0x24>)
 800958a:	6800      	ldr	r0, [r0, #0]
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f380 8808 	msr	MSP, r0
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8814 	msr	CONTROL, r0
 800959a:	b662      	cpsie	i
 800959c:	b661      	cpsie	f
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	df00      	svc	0
 80095a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095aa:	bf00      	nop
 80095ac:	e000ed08 	.word	0xe000ed08

080095b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095b6:	4b47      	ldr	r3, [pc, #284]	@ (80096d4 <xPortStartScheduler+0x124>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a47      	ldr	r2, [pc, #284]	@ (80096d8 <xPortStartScheduler+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10b      	bne.n	80095d8 <xPortStartScheduler+0x28>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095d8:	4b3e      	ldr	r3, [pc, #248]	@ (80096d4 <xPortStartScheduler+0x124>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a3f      	ldr	r2, [pc, #252]	@ (80096dc <xPortStartScheduler+0x12c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d10b      	bne.n	80095fa <xPortStartScheduler+0x4a>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	613b      	str	r3, [r7, #16]
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	e7fd      	b.n	80095f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095fa:	4b39      	ldr	r3, [pc, #228]	@ (80096e0 <xPortStartScheduler+0x130>)
 80095fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	22ff      	movs	r2, #255	@ 0xff
 800960a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800961c:	b2da      	uxtb	r2, r3
 800961e:	4b31      	ldr	r3, [pc, #196]	@ (80096e4 <xPortStartScheduler+0x134>)
 8009620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009622:	4b31      	ldr	r3, [pc, #196]	@ (80096e8 <xPortStartScheduler+0x138>)
 8009624:	2207      	movs	r2, #7
 8009626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009628:	e009      	b.n	800963e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800962a:	4b2f      	ldr	r3, [pc, #188]	@ (80096e8 <xPortStartScheduler+0x138>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3b01      	subs	r3, #1
 8009630:	4a2d      	ldr	r2, [pc, #180]	@ (80096e8 <xPortStartScheduler+0x138>)
 8009632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	b2db      	uxtb	r3, r3
 800963c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009646:	2b80      	cmp	r3, #128	@ 0x80
 8009648:	d0ef      	beq.n	800962a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800964a:	4b27      	ldr	r3, [pc, #156]	@ (80096e8 <xPortStartScheduler+0x138>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f1c3 0307 	rsb	r3, r3, #7
 8009652:	2b04      	cmp	r3, #4
 8009654:	d00b      	beq.n	800966e <xPortStartScheduler+0xbe>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60bb      	str	r3, [r7, #8]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800966e:	4b1e      	ldr	r3, [pc, #120]	@ (80096e8 <xPortStartScheduler+0x138>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	4a1c      	ldr	r2, [pc, #112]	@ (80096e8 <xPortStartScheduler+0x138>)
 8009676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009678:	4b1b      	ldr	r3, [pc, #108]	@ (80096e8 <xPortStartScheduler+0x138>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009680:	4a19      	ldr	r2, [pc, #100]	@ (80096e8 <xPortStartScheduler+0x138>)
 8009682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	b2da      	uxtb	r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800968c:	4b17      	ldr	r3, [pc, #92]	@ (80096ec <xPortStartScheduler+0x13c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a16      	ldr	r2, [pc, #88]	@ (80096ec <xPortStartScheduler+0x13c>)
 8009692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009698:	4b14      	ldr	r3, [pc, #80]	@ (80096ec <xPortStartScheduler+0x13c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a13      	ldr	r2, [pc, #76]	@ (80096ec <xPortStartScheduler+0x13c>)
 800969e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80096a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096a4:	f000 f8da 	bl	800985c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096a8:	4b11      	ldr	r3, [pc, #68]	@ (80096f0 <xPortStartScheduler+0x140>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096ae:	f000 f8f9 	bl	80098a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096b2:	4b10      	ldr	r3, [pc, #64]	@ (80096f4 <xPortStartScheduler+0x144>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a0f      	ldr	r2, [pc, #60]	@ (80096f4 <xPortStartScheduler+0x144>)
 80096b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80096bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096be:	f7ff ff63 	bl	8009588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096c2:	f7ff f82f 	bl	8008724 <vTaskSwitchContext>
	prvTaskExitError();
 80096c6:	f7ff ff1b 	bl	8009500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed00 	.word	0xe000ed00
 80096d8:	410fc271 	.word	0x410fc271
 80096dc:	410fc270 	.word	0x410fc270
 80096e0:	e000e400 	.word	0xe000e400
 80096e4:	200015dc 	.word	0x200015dc
 80096e8:	200015e0 	.word	0x200015e0
 80096ec:	e000ed20 	.word	0xe000ed20
 80096f0:	20000014 	.word	0x20000014
 80096f4:	e000ef34 	.word	0xe000ef34

080096f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	607b      	str	r3, [r7, #4]
}
 8009710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009712:	4b10      	ldr	r3, [pc, #64]	@ (8009754 <vPortEnterCritical+0x5c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	4a0e      	ldr	r2, [pc, #56]	@ (8009754 <vPortEnterCritical+0x5c>)
 800971a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800971c:	4b0d      	ldr	r3, [pc, #52]	@ (8009754 <vPortEnterCritical+0x5c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d110      	bne.n	8009746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009724:	4b0c      	ldr	r3, [pc, #48]	@ (8009758 <vPortEnterCritical+0x60>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <vPortEnterCritical+0x4e>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	603b      	str	r3, [r7, #0]
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	e7fd      	b.n	8009742 <vPortEnterCritical+0x4a>
	}
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000014 	.word	0x20000014
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009762:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <vPortExitCritical+0x50>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <vPortExitCritical+0x26>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	607b      	str	r3, [r7, #4]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009782:	4b0a      	ldr	r3, [pc, #40]	@ (80097ac <vPortExitCritical+0x50>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3b01      	subs	r3, #1
 8009788:	4a08      	ldr	r2, [pc, #32]	@ (80097ac <vPortExitCritical+0x50>)
 800978a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <vPortExitCritical+0x50>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <vPortExitCritical+0x44>
 8009794:	2300      	movs	r3, #0
 8009796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	f383 8811 	msr	BASEPRI, r3
}
 800979e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000014 	.word	0x20000014

080097b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097b0:	f3ef 8009 	mrs	r0, PSP
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	4b15      	ldr	r3, [pc, #84]	@ (8009810 <pxCurrentTCBConst>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f01e 0f10 	tst.w	lr, #16
 80097c0:	bf08      	it	eq
 80097c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	6010      	str	r0, [r2, #0]
 80097cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097d4:	f380 8811 	msr	BASEPRI, r0
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f7fe ffa0 	bl	8008724 <vTaskSwitchContext>
 80097e4:	f04f 0000 	mov.w	r0, #0
 80097e8:	f380 8811 	msr	BASEPRI, r0
 80097ec:	bc09      	pop	{r0, r3}
 80097ee:	6819      	ldr	r1, [r3, #0]
 80097f0:	6808      	ldr	r0, [r1, #0]
 80097f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f6:	f01e 0f10 	tst.w	lr, #16
 80097fa:	bf08      	it	eq
 80097fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009800:	f380 8809 	msr	PSP, r0
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst>:
 8009810:	20000fb0 	.word	0x20000fb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009832:	f7fe febd 	bl	80085b0 <xTaskIncrementTick>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800983c:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <xPortSysTickHandler+0x40>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	2300      	movs	r3, #0
 8009846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f383 8811 	msr	BASEPRI, r3
}
 800984e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	e000ed04 	.word	0xe000ed04

0800985c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009860:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <vPortSetupTimerInterrupt+0x34>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <vPortSetupTimerInterrupt+0x38>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800986c:	4b0a      	ldr	r3, [pc, #40]	@ (8009898 <vPortSetupTimerInterrupt+0x3c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0a      	ldr	r2, [pc, #40]	@ (800989c <vPortSetupTimerInterrupt+0x40>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	099b      	lsrs	r3, r3, #6
 8009878:	4a09      	ldr	r2, [pc, #36]	@ (80098a0 <vPortSetupTimerInterrupt+0x44>)
 800987a:	3b01      	subs	r3, #1
 800987c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800987e:	4b04      	ldr	r3, [pc, #16]	@ (8009890 <vPortSetupTimerInterrupt+0x34>)
 8009880:	2207      	movs	r2, #7
 8009882:	601a      	str	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	e000e010 	.word	0xe000e010
 8009894:	e000e018 	.word	0xe000e018
 8009898:	20000008 	.word	0x20000008
 800989c:	10624dd3 	.word	0x10624dd3
 80098a0:	e000e014 	.word	0xe000e014

080098a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80098b4 <vPortEnableVFP+0x10>
 80098a8:	6801      	ldr	r1, [r0, #0]
 80098aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80098ae:	6001      	str	r1, [r0, #0]
 80098b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098b2:	bf00      	nop
 80098b4:	e000ed88 	.word	0xe000ed88

080098b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098be:	f3ef 8305 	mrs	r3, IPSR
 80098c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	d915      	bls.n	80098f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ca:	4a18      	ldr	r2, [pc, #96]	@ (800992c <vPortValidateInterruptPriority+0x74>)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4413      	add	r3, r2
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098d4:	4b16      	ldr	r3, [pc, #88]	@ (8009930 <vPortValidateInterruptPriority+0x78>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	7afa      	ldrb	r2, [r7, #11]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d20b      	bcs.n	80098f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	607b      	str	r3, [r7, #4]
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	e7fd      	b.n	80098f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009934 <vPortValidateInterruptPriority+0x7c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009938 <vPortValidateInterruptPriority+0x80>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d90b      	bls.n	800991e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	603b      	str	r3, [r7, #0]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <vPortValidateInterruptPriority+0x62>
	}
 800991e:	bf00      	nop
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	e000e3f0 	.word	0xe000e3f0
 8009930:	200015dc 	.word	0x200015dc
 8009934:	e000ed0c 	.word	0xe000ed0c
 8009938:	200015e0 	.word	0x200015e0

0800993c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	@ 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009948:	f7fe fd76 	bl	8008438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800994c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ac0 <pvPortMalloc+0x184>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009954:	f000 f924 	bl	8009ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009958:	4b5a      	ldr	r3, [pc, #360]	@ (8009ac4 <pvPortMalloc+0x188>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4013      	ands	r3, r2
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 8095 	bne.w	8009a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01e      	beq.n	80099aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800996c:	2208      	movs	r2, #8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d015      	beq.n	80099aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f023 0307 	bic.w	r3, r3, #7
 8009984:	3308      	adds	r3, #8
 8009986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <pvPortMalloc+0x6e>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	617b      	str	r3, [r7, #20]
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	e7fd      	b.n	80099a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d06f      	beq.n	8009a90 <pvPortMalloc+0x154>
 80099b0:	4b45      	ldr	r3, [pc, #276]	@ (8009ac8 <pvPortMalloc+0x18c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d86a      	bhi.n	8009a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099ba:	4b44      	ldr	r3, [pc, #272]	@ (8009acc <pvPortMalloc+0x190>)
 80099bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099be:	4b43      	ldr	r3, [pc, #268]	@ (8009acc <pvPortMalloc+0x190>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099c4:	e004      	b.n	80099d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d903      	bls.n	80099e2 <pvPortMalloc+0xa6>
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f1      	bne.n	80099c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099e2:	4b37      	ldr	r3, [pc, #220]	@ (8009ac0 <pvPortMalloc+0x184>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d051      	beq.n	8009a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2208      	movs	r2, #8
 80099f2:	4413      	add	r3, r2
 80099f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1ad2      	subs	r2, r2, r3
 8009a06:	2308      	movs	r3, #8
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d920      	bls.n	8009a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <pvPortMalloc+0xfc>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	bf00      	nop
 8009a36:	e7fd      	b.n	8009a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a4a:	69b8      	ldr	r0, [r7, #24]
 8009a4c:	f000 f90a 	bl	8009c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a50:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad0 <pvPortMalloc+0x194>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d203      	bcs.n	8009a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a6a:	4b17      	ldr	r3, [pc, #92]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a18      	ldr	r2, [pc, #96]	@ (8009ad0 <pvPortMalloc+0x194>)
 8009a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <pvPortMalloc+0x188>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a86:	4b13      	ldr	r3, [pc, #76]	@ (8009ad4 <pvPortMalloc+0x198>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	4a11      	ldr	r2, [pc, #68]	@ (8009ad4 <pvPortMalloc+0x198>)
 8009a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a90:	f7fe fce0 	bl	8008454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	e7fd      	b.n	8009ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3728      	adds	r7, #40	@ 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200051ec 	.word	0x200051ec
 8009ac4:	20005200 	.word	0x20005200
 8009ac8:	200051f0 	.word	0x200051f0
 8009acc:	200051e4 	.word	0x200051e4
 8009ad0:	200051f4 	.word	0x200051f4
 8009ad4:	200051f8 	.word	0x200051f8

08009ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d04f      	beq.n	8009b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aea:	2308      	movs	r3, #8
 8009aec:	425b      	negs	r3, r3
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4b25      	ldr	r3, [pc, #148]	@ (8009b94 <vPortFree+0xbc>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4013      	ands	r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10b      	bne.n	8009b1e <vPortFree+0x46>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60fb      	str	r3, [r7, #12]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <vPortFree+0x66>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	4b14      	ldr	r3, [pc, #80]	@ (8009b94 <vPortFree+0xbc>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01e      	beq.n	8009b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11a      	bne.n	8009b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	4b0e      	ldr	r3, [pc, #56]	@ (8009b94 <vPortFree+0xbc>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	401a      	ands	r2, r3
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b64:	f7fe fc68 	bl	8008438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <vPortFree+0xc0>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4413      	add	r3, r2
 8009b72:	4a09      	ldr	r2, [pc, #36]	@ (8009b98 <vPortFree+0xc0>)
 8009b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b76:	6938      	ldr	r0, [r7, #16]
 8009b78:	f000 f874 	bl	8009c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b7c:	4b07      	ldr	r3, [pc, #28]	@ (8009b9c <vPortFree+0xc4>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	4a06      	ldr	r2, [pc, #24]	@ (8009b9c <vPortFree+0xc4>)
 8009b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b86:	f7fe fc65 	bl	8008454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b8a:	bf00      	nop
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20005200 	.word	0x20005200
 8009b98:	200051f0 	.word	0x200051f0
 8009b9c:	200051fc 	.word	0x200051fc

08009ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ba6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bac:	4b27      	ldr	r3, [pc, #156]	@ (8009c4c <prvHeapInit+0xac>)
 8009bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00c      	beq.n	8009bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3307      	adds	r3, #7
 8009bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0307 	bic.w	r3, r3, #7
 8009bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	4a1f      	ldr	r2, [pc, #124]	@ (8009c4c <prvHeapInit+0xac>)
 8009bd0:	4413      	add	r3, r2
 8009bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c50 <prvHeapInit+0xb0>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bde:	4b1c      	ldr	r3, [pc, #112]	@ (8009c50 <prvHeapInit+0xb0>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bec:	2208      	movs	r2, #8
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4a15      	ldr	r2, [pc, #84]	@ (8009c54 <prvHeapInit+0xb4>)
 8009c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c02:	4b14      	ldr	r3, [pc, #80]	@ (8009c54 <prvHeapInit+0xb4>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2200      	movs	r2, #0
 8009c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c0a:	4b12      	ldr	r3, [pc, #72]	@ (8009c54 <prvHeapInit+0xb4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c20:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <prvHeapInit+0xb4>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c58 <prvHeapInit+0xb8>)
 8009c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4a09      	ldr	r2, [pc, #36]	@ (8009c5c <prvHeapInit+0xbc>)
 8009c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c38:	4b09      	ldr	r3, [pc, #36]	@ (8009c60 <prvHeapInit+0xc0>)
 8009c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c3e:	601a      	str	r2, [r3, #0]
}
 8009c40:	bf00      	nop
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	200015e4 	.word	0x200015e4
 8009c50:	200051e4 	.word	0x200051e4
 8009c54:	200051ec 	.word	0x200051ec
 8009c58:	200051f4 	.word	0x200051f4
 8009c5c:	200051f0 	.word	0x200051f0
 8009c60:	20005200 	.word	0x20005200

08009c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c6c:	4b28      	ldr	r3, [pc, #160]	@ (8009d10 <prvInsertBlockIntoFreeList+0xac>)
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e002      	b.n	8009c78 <prvInsertBlockIntoFreeList+0x14>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d8f7      	bhi.n	8009c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d108      	bne.n	8009ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	441a      	add	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	441a      	add	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d118      	bne.n	8009cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b15      	ldr	r3, [pc, #84]	@ (8009d14 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d00d      	beq.n	8009ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	441a      	add	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e008      	b.n	8009cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8009d14 <prvInsertBlockIntoFreeList+0xb0>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e003      	b.n	8009cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d002      	beq.n	8009d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d02:	bf00      	nop
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	200051e4 	.word	0x200051e4
 8009d14:	200051ec 	.word	0x200051ec

08009d18 <__cvt>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	ec57 6b10 	vmov	r6, r7, d0
 8009d20:	2f00      	cmp	r7, #0
 8009d22:	460c      	mov	r4, r1
 8009d24:	4619      	mov	r1, r3
 8009d26:	463b      	mov	r3, r7
 8009d28:	bfbb      	ittet	lt
 8009d2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009d2e:	461f      	movlt	r7, r3
 8009d30:	2300      	movge	r3, #0
 8009d32:	232d      	movlt	r3, #45	@ 0x2d
 8009d34:	700b      	strb	r3, [r1, #0]
 8009d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d3c:	4691      	mov	r9, r2
 8009d3e:	f023 0820 	bic.w	r8, r3, #32
 8009d42:	bfbc      	itt	lt
 8009d44:	4632      	movlt	r2, r6
 8009d46:	4616      	movlt	r6, r2
 8009d48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d4c:	d005      	beq.n	8009d5a <__cvt+0x42>
 8009d4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d52:	d100      	bne.n	8009d56 <__cvt+0x3e>
 8009d54:	3401      	adds	r4, #1
 8009d56:	2102      	movs	r1, #2
 8009d58:	e000      	b.n	8009d5c <__cvt+0x44>
 8009d5a:	2103      	movs	r1, #3
 8009d5c:	ab03      	add	r3, sp, #12
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	ab02      	add	r3, sp, #8
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	ec47 6b10 	vmov	d0, r6, r7
 8009d68:	4653      	mov	r3, sl
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	f000 fec8 	bl	800ab00 <_dtoa_r>
 8009d70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d74:	4605      	mov	r5, r0
 8009d76:	d119      	bne.n	8009dac <__cvt+0x94>
 8009d78:	f019 0f01 	tst.w	r9, #1
 8009d7c:	d00e      	beq.n	8009d9c <__cvt+0x84>
 8009d7e:	eb00 0904 	add.w	r9, r0, r4
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 febd 	bl	8000b08 <__aeabi_dcmpeq>
 8009d8e:	b108      	cbz	r0, 8009d94 <__cvt+0x7c>
 8009d90:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d94:	2230      	movs	r2, #48	@ 0x30
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	454b      	cmp	r3, r9
 8009d9a:	d31e      	bcc.n	8009dda <__cvt+0xc2>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009da0:	1b5b      	subs	r3, r3, r5
 8009da2:	4628      	mov	r0, r5
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	b004      	add	sp, #16
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009db0:	eb00 0904 	add.w	r9, r0, r4
 8009db4:	d1e5      	bne.n	8009d82 <__cvt+0x6a>
 8009db6:	7803      	ldrb	r3, [r0, #0]
 8009db8:	2b30      	cmp	r3, #48	@ 0x30
 8009dba:	d10a      	bne.n	8009dd2 <__cvt+0xba>
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 8009dc8:	b918      	cbnz	r0, 8009dd2 <__cvt+0xba>
 8009dca:	f1c4 0401 	rsb	r4, r4, #1
 8009dce:	f8ca 4000 	str.w	r4, [sl]
 8009dd2:	f8da 3000 	ldr.w	r3, [sl]
 8009dd6:	4499      	add	r9, r3
 8009dd8:	e7d3      	b.n	8009d82 <__cvt+0x6a>
 8009dda:	1c59      	adds	r1, r3, #1
 8009ddc:	9103      	str	r1, [sp, #12]
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	e7d9      	b.n	8009d96 <__cvt+0x7e>

08009de2 <__exponent>:
 8009de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de4:	2900      	cmp	r1, #0
 8009de6:	bfba      	itte	lt
 8009de8:	4249      	neglt	r1, r1
 8009dea:	232d      	movlt	r3, #45	@ 0x2d
 8009dec:	232b      	movge	r3, #43	@ 0x2b
 8009dee:	2909      	cmp	r1, #9
 8009df0:	7002      	strb	r2, [r0, #0]
 8009df2:	7043      	strb	r3, [r0, #1]
 8009df4:	dd29      	ble.n	8009e4a <__exponent+0x68>
 8009df6:	f10d 0307 	add.w	r3, sp, #7
 8009dfa:	461d      	mov	r5, r3
 8009dfc:	270a      	movs	r7, #10
 8009dfe:	461a      	mov	r2, r3
 8009e00:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e04:	fb07 1416 	mls	r4, r7, r6, r1
 8009e08:	3430      	adds	r4, #48	@ 0x30
 8009e0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009e0e:	460c      	mov	r4, r1
 8009e10:	2c63      	cmp	r4, #99	@ 0x63
 8009e12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e16:	4631      	mov	r1, r6
 8009e18:	dcf1      	bgt.n	8009dfe <__exponent+0x1c>
 8009e1a:	3130      	adds	r1, #48	@ 0x30
 8009e1c:	1e94      	subs	r4, r2, #2
 8009e1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e22:	1c41      	adds	r1, r0, #1
 8009e24:	4623      	mov	r3, r4
 8009e26:	42ab      	cmp	r3, r5
 8009e28:	d30a      	bcc.n	8009e40 <__exponent+0x5e>
 8009e2a:	f10d 0309 	add.w	r3, sp, #9
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	42ac      	cmp	r4, r5
 8009e32:	bf88      	it	hi
 8009e34:	2300      	movhi	r3, #0
 8009e36:	3302      	adds	r3, #2
 8009e38:	4403      	add	r3, r0
 8009e3a:	1a18      	subs	r0, r3, r0
 8009e3c:	b003      	add	sp, #12
 8009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e48:	e7ed      	b.n	8009e26 <__exponent+0x44>
 8009e4a:	2330      	movs	r3, #48	@ 0x30
 8009e4c:	3130      	adds	r1, #48	@ 0x30
 8009e4e:	7083      	strb	r3, [r0, #2]
 8009e50:	70c1      	strb	r1, [r0, #3]
 8009e52:	1d03      	adds	r3, r0, #4
 8009e54:	e7f1      	b.n	8009e3a <__exponent+0x58>
	...

08009e58 <_printf_float>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	b08d      	sub	sp, #52	@ 0x34
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e64:	4616      	mov	r6, r2
 8009e66:	461f      	mov	r7, r3
 8009e68:	4605      	mov	r5, r0
 8009e6a:	f000 fcdb 	bl	800a824 <_localeconv_r>
 8009e6e:	6803      	ldr	r3, [r0, #0]
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7f6 fa1c 	bl	80002b0 <strlen>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e80:	9005      	str	r0, [sp, #20]
 8009e82:	3307      	adds	r3, #7
 8009e84:	f023 0307 	bic.w	r3, r3, #7
 8009e88:	f103 0208 	add.w	r2, r3, #8
 8009e8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e90:	f8d4 b000 	ldr.w	fp, [r4]
 8009e94:	f8c8 2000 	str.w	r2, [r8]
 8009e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ea0:	9307      	str	r3, [sp, #28]
 8009ea2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ea6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eae:	4b9c      	ldr	r3, [pc, #624]	@ (800a120 <_printf_float+0x2c8>)
 8009eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb4:	f7f6 fe5a 	bl	8000b6c <__aeabi_dcmpun>
 8009eb8:	bb70      	cbnz	r0, 8009f18 <_printf_float+0xc0>
 8009eba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ebe:	4b98      	ldr	r3, [pc, #608]	@ (800a120 <_printf_float+0x2c8>)
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	f7f6 fe34 	bl	8000b30 <__aeabi_dcmple>
 8009ec8:	bb30      	cbnz	r0, 8009f18 <_printf_float+0xc0>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 fe23 	bl	8000b1c <__aeabi_dcmplt>
 8009ed6:	b110      	cbz	r0, 8009ede <_printf_float+0x86>
 8009ed8:	232d      	movs	r3, #45	@ 0x2d
 8009eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ede:	4a91      	ldr	r2, [pc, #580]	@ (800a124 <_printf_float+0x2cc>)
 8009ee0:	4b91      	ldr	r3, [pc, #580]	@ (800a128 <_printf_float+0x2d0>)
 8009ee2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ee6:	bf8c      	ite	hi
 8009ee8:	4690      	movhi	r8, r2
 8009eea:	4698      	movls	r8, r3
 8009eec:	2303      	movs	r3, #3
 8009eee:	6123      	str	r3, [r4, #16]
 8009ef0:	f02b 0304 	bic.w	r3, fp, #4
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	f04f 0900 	mov.w	r9, #0
 8009efa:	9700      	str	r7, [sp, #0]
 8009efc:	4633      	mov	r3, r6
 8009efe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f00:	4621      	mov	r1, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 f9d2 	bl	800a2ac <_printf_common>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f040 808d 	bne.w	800a028 <_printf_float+0x1d0>
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	b00d      	add	sp, #52	@ 0x34
 8009f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 fe24 	bl	8000b6c <__aeabi_dcmpun>
 8009f24:	b140      	cbz	r0, 8009f38 <_printf_float+0xe0>
 8009f26:	464b      	mov	r3, r9
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bfbc      	itt	lt
 8009f2c:	232d      	movlt	r3, #45	@ 0x2d
 8009f2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009f32:	4a7e      	ldr	r2, [pc, #504]	@ (800a12c <_printf_float+0x2d4>)
 8009f34:	4b7e      	ldr	r3, [pc, #504]	@ (800a130 <_printf_float+0x2d8>)
 8009f36:	e7d4      	b.n	8009ee2 <_printf_float+0x8a>
 8009f38:	6863      	ldr	r3, [r4, #4]
 8009f3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f3e:	9206      	str	r2, [sp, #24]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	d13b      	bne.n	8009fbc <_printf_float+0x164>
 8009f44:	2306      	movs	r3, #6
 8009f46:	6063      	str	r3, [r4, #4]
 8009f48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6022      	str	r2, [r4, #0]
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f58:	ab09      	add	r3, sp, #36	@ 0x24
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	ec49 8b10 	vmov	d0, r8, r9
 8009f62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f66:	4628      	mov	r0, r5
 8009f68:	f7ff fed6 	bl	8009d18 <__cvt>
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f70:	2b47      	cmp	r3, #71	@ 0x47
 8009f72:	4680      	mov	r8, r0
 8009f74:	d129      	bne.n	8009fca <_printf_float+0x172>
 8009f76:	1cc8      	adds	r0, r1, #3
 8009f78:	db02      	blt.n	8009f80 <_printf_float+0x128>
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	dd41      	ble.n	800a004 <_printf_float+0x1ac>
 8009f80:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f84:	fa5f fa8a 	uxtb.w	sl, sl
 8009f88:	3901      	subs	r1, #1
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f90:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f92:	f7ff ff26 	bl	8009de2 <__exponent>
 8009f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f98:	1813      	adds	r3, r2, r0
 8009f9a:	2a01      	cmp	r2, #1
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	dc02      	bgt.n	8009fa8 <_printf_float+0x150>
 8009fa2:	6822      	ldr	r2, [r4, #0]
 8009fa4:	07d2      	lsls	r2, r2, #31
 8009fa6:	d501      	bpl.n	8009fac <_printf_float+0x154>
 8009fa8:	3301      	adds	r3, #1
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0a2      	beq.n	8009efa <_printf_float+0xa2>
 8009fb4:	232d      	movs	r3, #45	@ 0x2d
 8009fb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fba:	e79e      	b.n	8009efa <_printf_float+0xa2>
 8009fbc:	9a06      	ldr	r2, [sp, #24]
 8009fbe:	2a47      	cmp	r2, #71	@ 0x47
 8009fc0:	d1c2      	bne.n	8009f48 <_printf_float+0xf0>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1c0      	bne.n	8009f48 <_printf_float+0xf0>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e7bd      	b.n	8009f46 <_printf_float+0xee>
 8009fca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fce:	d9db      	bls.n	8009f88 <_printf_float+0x130>
 8009fd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009fd4:	d118      	bne.n	800a008 <_printf_float+0x1b0>
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	dd0b      	ble.n	8009ff4 <_printf_float+0x19c>
 8009fdc:	6121      	str	r1, [r4, #16]
 8009fde:	b913      	cbnz	r3, 8009fe6 <_printf_float+0x18e>
 8009fe0:	6822      	ldr	r2, [r4, #0]
 8009fe2:	07d0      	lsls	r0, r2, #31
 8009fe4:	d502      	bpl.n	8009fec <_printf_float+0x194>
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	440b      	add	r3, r1
 8009fea:	6123      	str	r3, [r4, #16]
 8009fec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	e7db      	b.n	8009fac <_printf_float+0x154>
 8009ff4:	b913      	cbnz	r3, 8009ffc <_printf_float+0x1a4>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	07d2      	lsls	r2, r2, #31
 8009ffa:	d501      	bpl.n	800a000 <_printf_float+0x1a8>
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	e7f4      	b.n	8009fea <_printf_float+0x192>
 800a000:	2301      	movs	r3, #1
 800a002:	e7f2      	b.n	8009fea <_printf_float+0x192>
 800a004:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a00a:	4299      	cmp	r1, r3
 800a00c:	db05      	blt.n	800a01a <_printf_float+0x1c2>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	6121      	str	r1, [r4, #16]
 800a012:	07d8      	lsls	r0, r3, #31
 800a014:	d5ea      	bpl.n	8009fec <_printf_float+0x194>
 800a016:	1c4b      	adds	r3, r1, #1
 800a018:	e7e7      	b.n	8009fea <_printf_float+0x192>
 800a01a:	2900      	cmp	r1, #0
 800a01c:	bfd4      	ite	le
 800a01e:	f1c1 0202 	rsble	r2, r1, #2
 800a022:	2201      	movgt	r2, #1
 800a024:	4413      	add	r3, r2
 800a026:	e7e0      	b.n	8009fea <_printf_float+0x192>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	055a      	lsls	r2, r3, #21
 800a02c:	d407      	bmi.n	800a03e <_printf_float+0x1e6>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	4642      	mov	r2, r8
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	d12b      	bne.n	800a094 <_printf_float+0x23c>
 800a03c:	e767      	b.n	8009f0e <_printf_float+0xb6>
 800a03e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a042:	f240 80dd 	bls.w	800a200 <_printf_float+0x3a8>
 800a046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	f7f6 fd5b 	bl	8000b08 <__aeabi_dcmpeq>
 800a052:	2800      	cmp	r0, #0
 800a054:	d033      	beq.n	800a0be <_printf_float+0x266>
 800a056:	4a37      	ldr	r2, [pc, #220]	@ (800a134 <_printf_float+0x2dc>)
 800a058:	2301      	movs	r3, #1
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	f43f af54 	beq.w	8009f0e <_printf_float+0xb6>
 800a066:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a06a:	4543      	cmp	r3, r8
 800a06c:	db02      	blt.n	800a074 <_printf_float+0x21c>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	07d8      	lsls	r0, r3, #31
 800a072:	d50f      	bpl.n	800a094 <_printf_float+0x23c>
 800a074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f af45 	beq.w	8009f0e <_printf_float+0xb6>
 800a084:	f04f 0900 	mov.w	r9, #0
 800a088:	f108 38ff 	add.w	r8, r8, #4294967295
 800a08c:	f104 0a1a 	add.w	sl, r4, #26
 800a090:	45c8      	cmp	r8, r9
 800a092:	dc09      	bgt.n	800a0a8 <_printf_float+0x250>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	079b      	lsls	r3, r3, #30
 800a098:	f100 8103 	bmi.w	800a2a2 <_printf_float+0x44a>
 800a09c:	68e0      	ldr	r0, [r4, #12]
 800a09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0a0:	4298      	cmp	r0, r3
 800a0a2:	bfb8      	it	lt
 800a0a4:	4618      	movlt	r0, r3
 800a0a6:	e734      	b.n	8009f12 <_printf_float+0xba>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4652      	mov	r2, sl
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af2b 	beq.w	8009f0e <_printf_float+0xb6>
 800a0b8:	f109 0901 	add.w	r9, r9, #1
 800a0bc:	e7e8      	b.n	800a090 <_printf_float+0x238>
 800a0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dc39      	bgt.n	800a138 <_printf_float+0x2e0>
 800a0c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a134 <_printf_float+0x2dc>)
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f af1d 	beq.w	8009f0e <_printf_float+0xb6>
 800a0d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a0d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a0dc:	d102      	bne.n	800a0e4 <_printf_float+0x28c>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	07d9      	lsls	r1, r3, #31
 800a0e2:	d5d7      	bpl.n	800a094 <_printf_float+0x23c>
 800a0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f af0d 	beq.w	8009f0e <_printf_float+0xb6>
 800a0f4:	f04f 0a00 	mov.w	sl, #0
 800a0f8:	f104 0b1a 	add.w	fp, r4, #26
 800a0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0fe:	425b      	negs	r3, r3
 800a100:	4553      	cmp	r3, sl
 800a102:	dc01      	bgt.n	800a108 <_printf_float+0x2b0>
 800a104:	464b      	mov	r3, r9
 800a106:	e793      	b.n	800a030 <_printf_float+0x1d8>
 800a108:	2301      	movs	r3, #1
 800a10a:	465a      	mov	r2, fp
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	f43f aefb 	beq.w	8009f0e <_printf_float+0xb6>
 800a118:	f10a 0a01 	add.w	sl, sl, #1
 800a11c:	e7ee      	b.n	800a0fc <_printf_float+0x2a4>
 800a11e:	bf00      	nop
 800a120:	7fefffff 	.word	0x7fefffff
 800a124:	0800cefc 	.word	0x0800cefc
 800a128:	0800cef8 	.word	0x0800cef8
 800a12c:	0800cf04 	.word	0x0800cf04
 800a130:	0800cf00 	.word	0x0800cf00
 800a134:	0800cf08 	.word	0x0800cf08
 800a138:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a13a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a13e:	4553      	cmp	r3, sl
 800a140:	bfa8      	it	ge
 800a142:	4653      	movge	r3, sl
 800a144:	2b00      	cmp	r3, #0
 800a146:	4699      	mov	r9, r3
 800a148:	dc36      	bgt.n	800a1b8 <_printf_float+0x360>
 800a14a:	f04f 0b00 	mov.w	fp, #0
 800a14e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a152:	f104 021a 	add.w	r2, r4, #26
 800a156:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a158:	9306      	str	r3, [sp, #24]
 800a15a:	eba3 0309 	sub.w	r3, r3, r9
 800a15e:	455b      	cmp	r3, fp
 800a160:	dc31      	bgt.n	800a1c6 <_printf_float+0x36e>
 800a162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a164:	459a      	cmp	sl, r3
 800a166:	dc3a      	bgt.n	800a1de <_printf_float+0x386>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	07da      	lsls	r2, r3, #31
 800a16c:	d437      	bmi.n	800a1de <_printf_float+0x386>
 800a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a170:	ebaa 0903 	sub.w	r9, sl, r3
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	ebaa 0303 	sub.w	r3, sl, r3
 800a17a:	4599      	cmp	r9, r3
 800a17c:	bfa8      	it	ge
 800a17e:	4699      	movge	r9, r3
 800a180:	f1b9 0f00 	cmp.w	r9, #0
 800a184:	dc33      	bgt.n	800a1ee <_printf_float+0x396>
 800a186:	f04f 0800 	mov.w	r8, #0
 800a18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a18e:	f104 0b1a 	add.w	fp, r4, #26
 800a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a194:	ebaa 0303 	sub.w	r3, sl, r3
 800a198:	eba3 0309 	sub.w	r3, r3, r9
 800a19c:	4543      	cmp	r3, r8
 800a19e:	f77f af79 	ble.w	800a094 <_printf_float+0x23c>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	465a      	mov	r2, fp
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f43f aeae 	beq.w	8009f0e <_printf_float+0xb6>
 800a1b2:	f108 0801 	add.w	r8, r8, #1
 800a1b6:	e7ec      	b.n	800a192 <_printf_float+0x33a>
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d1c2      	bne.n	800a14a <_printf_float+0x2f2>
 800a1c4:	e6a3      	b.n	8009f0e <_printf_float+0xb6>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	9206      	str	r2, [sp, #24]
 800a1ce:	47b8      	blx	r7
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	f43f ae9c 	beq.w	8009f0e <_printf_float+0xb6>
 800a1d6:	9a06      	ldr	r2, [sp, #24]
 800a1d8:	f10b 0b01 	add.w	fp, fp, #1
 800a1dc:	e7bb      	b.n	800a156 <_printf_float+0x2fe>
 800a1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b8      	blx	r7
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d1c0      	bne.n	800a16e <_printf_float+0x316>
 800a1ec:	e68f      	b.n	8009f0e <_printf_float+0xb6>
 800a1ee:	9a06      	ldr	r2, [sp, #24]
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	4442      	add	r2, r8
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	47b8      	blx	r7
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d1c3      	bne.n	800a186 <_printf_float+0x32e>
 800a1fe:	e686      	b.n	8009f0e <_printf_float+0xb6>
 800a200:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a204:	f1ba 0f01 	cmp.w	sl, #1
 800a208:	dc01      	bgt.n	800a20e <_printf_float+0x3b6>
 800a20a:	07db      	lsls	r3, r3, #31
 800a20c:	d536      	bpl.n	800a27c <_printf_float+0x424>
 800a20e:	2301      	movs	r3, #1
 800a210:	4642      	mov	r2, r8
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	f43f ae78 	beq.w	8009f0e <_printf_float+0xb6>
 800a21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f ae70 	beq.w	8009f0e <_printf_float+0xb6>
 800a22e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a232:	2200      	movs	r2, #0
 800a234:	2300      	movs	r3, #0
 800a236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a23a:	f7f6 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800a23e:	b9c0      	cbnz	r0, 800a272 <_printf_float+0x41a>
 800a240:	4653      	mov	r3, sl
 800a242:	f108 0201 	add.w	r2, r8, #1
 800a246:	4631      	mov	r1, r6
 800a248:	4628      	mov	r0, r5
 800a24a:	47b8      	blx	r7
 800a24c:	3001      	adds	r0, #1
 800a24e:	d10c      	bne.n	800a26a <_printf_float+0x412>
 800a250:	e65d      	b.n	8009f0e <_printf_float+0xb6>
 800a252:	2301      	movs	r3, #1
 800a254:	465a      	mov	r2, fp
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	f43f ae56 	beq.w	8009f0e <_printf_float+0xb6>
 800a262:	f108 0801 	add.w	r8, r8, #1
 800a266:	45d0      	cmp	r8, sl
 800a268:	dbf3      	blt.n	800a252 <_printf_float+0x3fa>
 800a26a:	464b      	mov	r3, r9
 800a26c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a270:	e6df      	b.n	800a032 <_printf_float+0x1da>
 800a272:	f04f 0800 	mov.w	r8, #0
 800a276:	f104 0b1a 	add.w	fp, r4, #26
 800a27a:	e7f4      	b.n	800a266 <_printf_float+0x40e>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4642      	mov	r2, r8
 800a280:	e7e1      	b.n	800a246 <_printf_float+0x3ee>
 800a282:	2301      	movs	r3, #1
 800a284:	464a      	mov	r2, r9
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	f43f ae3e 	beq.w	8009f0e <_printf_float+0xb6>
 800a292:	f108 0801 	add.w	r8, r8, #1
 800a296:	68e3      	ldr	r3, [r4, #12]
 800a298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a29a:	1a5b      	subs	r3, r3, r1
 800a29c:	4543      	cmp	r3, r8
 800a29e:	dcf0      	bgt.n	800a282 <_printf_float+0x42a>
 800a2a0:	e6fc      	b.n	800a09c <_printf_float+0x244>
 800a2a2:	f04f 0800 	mov.w	r8, #0
 800a2a6:	f104 0919 	add.w	r9, r4, #25
 800a2aa:	e7f4      	b.n	800a296 <_printf_float+0x43e>

0800a2ac <_printf_common>:
 800a2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	4698      	mov	r8, r3
 800a2b4:	688a      	ldr	r2, [r1, #8]
 800a2b6:	690b      	ldr	r3, [r1, #16]
 800a2b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	bfb8      	it	lt
 800a2c0:	4613      	movlt	r3, r2
 800a2c2:	6033      	str	r3, [r6, #0]
 800a2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	b10a      	cbz	r2, 800a2d2 <_printf_common+0x26>
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	6033      	str	r3, [r6, #0]
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	0699      	lsls	r1, r3, #26
 800a2d6:	bf42      	ittt	mi
 800a2d8:	6833      	ldrmi	r3, [r6, #0]
 800a2da:	3302      	addmi	r3, #2
 800a2dc:	6033      	strmi	r3, [r6, #0]
 800a2de:	6825      	ldr	r5, [r4, #0]
 800a2e0:	f015 0506 	ands.w	r5, r5, #6
 800a2e4:	d106      	bne.n	800a2f4 <_printf_common+0x48>
 800a2e6:	f104 0a19 	add.w	sl, r4, #25
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	6832      	ldr	r2, [r6, #0]
 800a2ee:	1a9b      	subs	r3, r3, r2
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	dc26      	bgt.n	800a342 <_printf_common+0x96>
 800a2f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	3b00      	subs	r3, #0
 800a2fc:	bf18      	it	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	0692      	lsls	r2, r2, #26
 800a302:	d42b      	bmi.n	800a35c <_printf_common+0xb0>
 800a304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a308:	4641      	mov	r1, r8
 800a30a:	4638      	mov	r0, r7
 800a30c:	47c8      	blx	r9
 800a30e:	3001      	adds	r0, #1
 800a310:	d01e      	beq.n	800a350 <_printf_common+0xa4>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	f003 0306 	and.w	r3, r3, #6
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	bf02      	ittt	eq
 800a31e:	68e5      	ldreq	r5, [r4, #12]
 800a320:	6833      	ldreq	r3, [r6, #0]
 800a322:	1aed      	subeq	r5, r5, r3
 800a324:	68a3      	ldr	r3, [r4, #8]
 800a326:	bf0c      	ite	eq
 800a328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a32c:	2500      	movne	r5, #0
 800a32e:	4293      	cmp	r3, r2
 800a330:	bfc4      	itt	gt
 800a332:	1a9b      	subgt	r3, r3, r2
 800a334:	18ed      	addgt	r5, r5, r3
 800a336:	2600      	movs	r6, #0
 800a338:	341a      	adds	r4, #26
 800a33a:	42b5      	cmp	r5, r6
 800a33c:	d11a      	bne.n	800a374 <_printf_common+0xc8>
 800a33e:	2000      	movs	r0, #0
 800a340:	e008      	b.n	800a354 <_printf_common+0xa8>
 800a342:	2301      	movs	r3, #1
 800a344:	4652      	mov	r2, sl
 800a346:	4641      	mov	r1, r8
 800a348:	4638      	mov	r0, r7
 800a34a:	47c8      	blx	r9
 800a34c:	3001      	adds	r0, #1
 800a34e:	d103      	bne.n	800a358 <_printf_common+0xac>
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a358:	3501      	adds	r5, #1
 800a35a:	e7c6      	b.n	800a2ea <_printf_common+0x3e>
 800a35c:	18e1      	adds	r1, r4, r3
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	2030      	movs	r0, #48	@ 0x30
 800a362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a366:	4422      	add	r2, r4
 800a368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a36c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a370:	3302      	adds	r3, #2
 800a372:	e7c7      	b.n	800a304 <_printf_common+0x58>
 800a374:	2301      	movs	r3, #1
 800a376:	4622      	mov	r2, r4
 800a378:	4641      	mov	r1, r8
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c8      	blx	r9
 800a37e:	3001      	adds	r0, #1
 800a380:	d0e6      	beq.n	800a350 <_printf_common+0xa4>
 800a382:	3601      	adds	r6, #1
 800a384:	e7d9      	b.n	800a33a <_printf_common+0x8e>
	...

0800a388 <_printf_i>:
 800a388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	7e0f      	ldrb	r7, [r1, #24]
 800a38e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a390:	2f78      	cmp	r7, #120	@ 0x78
 800a392:	4691      	mov	r9, r2
 800a394:	4680      	mov	r8, r0
 800a396:	460c      	mov	r4, r1
 800a398:	469a      	mov	sl, r3
 800a39a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a39e:	d807      	bhi.n	800a3b0 <_printf_i+0x28>
 800a3a0:	2f62      	cmp	r7, #98	@ 0x62
 800a3a2:	d80a      	bhi.n	800a3ba <_printf_i+0x32>
 800a3a4:	2f00      	cmp	r7, #0
 800a3a6:	f000 80d1 	beq.w	800a54c <_printf_i+0x1c4>
 800a3aa:	2f58      	cmp	r7, #88	@ 0x58
 800a3ac:	f000 80b8 	beq.w	800a520 <_printf_i+0x198>
 800a3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3b8:	e03a      	b.n	800a430 <_printf_i+0xa8>
 800a3ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3be:	2b15      	cmp	r3, #21
 800a3c0:	d8f6      	bhi.n	800a3b0 <_printf_i+0x28>
 800a3c2:	a101      	add	r1, pc, #4	@ (adr r1, 800a3c8 <_printf_i+0x40>)
 800a3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3c8:	0800a421 	.word	0x0800a421
 800a3cc:	0800a435 	.word	0x0800a435
 800a3d0:	0800a3b1 	.word	0x0800a3b1
 800a3d4:	0800a3b1 	.word	0x0800a3b1
 800a3d8:	0800a3b1 	.word	0x0800a3b1
 800a3dc:	0800a3b1 	.word	0x0800a3b1
 800a3e0:	0800a435 	.word	0x0800a435
 800a3e4:	0800a3b1 	.word	0x0800a3b1
 800a3e8:	0800a3b1 	.word	0x0800a3b1
 800a3ec:	0800a3b1 	.word	0x0800a3b1
 800a3f0:	0800a3b1 	.word	0x0800a3b1
 800a3f4:	0800a533 	.word	0x0800a533
 800a3f8:	0800a45f 	.word	0x0800a45f
 800a3fc:	0800a4ed 	.word	0x0800a4ed
 800a400:	0800a3b1 	.word	0x0800a3b1
 800a404:	0800a3b1 	.word	0x0800a3b1
 800a408:	0800a555 	.word	0x0800a555
 800a40c:	0800a3b1 	.word	0x0800a3b1
 800a410:	0800a45f 	.word	0x0800a45f
 800a414:	0800a3b1 	.word	0x0800a3b1
 800a418:	0800a3b1 	.word	0x0800a3b1
 800a41c:	0800a4f5 	.word	0x0800a4f5
 800a420:	6833      	ldr	r3, [r6, #0]
 800a422:	1d1a      	adds	r2, r3, #4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6032      	str	r2, [r6, #0]
 800a428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a42c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a430:	2301      	movs	r3, #1
 800a432:	e09c      	b.n	800a56e <_printf_i+0x1e6>
 800a434:	6833      	ldr	r3, [r6, #0]
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	1d19      	adds	r1, r3, #4
 800a43a:	6031      	str	r1, [r6, #0]
 800a43c:	0606      	lsls	r6, r0, #24
 800a43e:	d501      	bpl.n	800a444 <_printf_i+0xbc>
 800a440:	681d      	ldr	r5, [r3, #0]
 800a442:	e003      	b.n	800a44c <_printf_i+0xc4>
 800a444:	0645      	lsls	r5, r0, #25
 800a446:	d5fb      	bpl.n	800a440 <_printf_i+0xb8>
 800a448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a44c:	2d00      	cmp	r5, #0
 800a44e:	da03      	bge.n	800a458 <_printf_i+0xd0>
 800a450:	232d      	movs	r3, #45	@ 0x2d
 800a452:	426d      	negs	r5, r5
 800a454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a458:	4858      	ldr	r0, [pc, #352]	@ (800a5bc <_printf_i+0x234>)
 800a45a:	230a      	movs	r3, #10
 800a45c:	e011      	b.n	800a482 <_printf_i+0xfa>
 800a45e:	6821      	ldr	r1, [r4, #0]
 800a460:	6833      	ldr	r3, [r6, #0]
 800a462:	0608      	lsls	r0, r1, #24
 800a464:	f853 5b04 	ldr.w	r5, [r3], #4
 800a468:	d402      	bmi.n	800a470 <_printf_i+0xe8>
 800a46a:	0649      	lsls	r1, r1, #25
 800a46c:	bf48      	it	mi
 800a46e:	b2ad      	uxthmi	r5, r5
 800a470:	2f6f      	cmp	r7, #111	@ 0x6f
 800a472:	4852      	ldr	r0, [pc, #328]	@ (800a5bc <_printf_i+0x234>)
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	bf14      	ite	ne
 800a478:	230a      	movne	r3, #10
 800a47a:	2308      	moveq	r3, #8
 800a47c:	2100      	movs	r1, #0
 800a47e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a482:	6866      	ldr	r6, [r4, #4]
 800a484:	60a6      	str	r6, [r4, #8]
 800a486:	2e00      	cmp	r6, #0
 800a488:	db05      	blt.n	800a496 <_printf_i+0x10e>
 800a48a:	6821      	ldr	r1, [r4, #0]
 800a48c:	432e      	orrs	r6, r5
 800a48e:	f021 0104 	bic.w	r1, r1, #4
 800a492:	6021      	str	r1, [r4, #0]
 800a494:	d04b      	beq.n	800a52e <_printf_i+0x1a6>
 800a496:	4616      	mov	r6, r2
 800a498:	fbb5 f1f3 	udiv	r1, r5, r3
 800a49c:	fb03 5711 	mls	r7, r3, r1, r5
 800a4a0:	5dc7      	ldrb	r7, [r0, r7]
 800a4a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4a6:	462f      	mov	r7, r5
 800a4a8:	42bb      	cmp	r3, r7
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	d9f4      	bls.n	800a498 <_printf_i+0x110>
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d10b      	bne.n	800a4ca <_printf_i+0x142>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	07df      	lsls	r7, r3, #31
 800a4b6:	d508      	bpl.n	800a4ca <_printf_i+0x142>
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	6861      	ldr	r1, [r4, #4]
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	bfde      	ittt	le
 800a4c0:	2330      	movle	r3, #48	@ 0x30
 800a4c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4ca:	1b92      	subs	r2, r2, r6
 800a4cc:	6122      	str	r2, [r4, #16]
 800a4ce:	f8cd a000 	str.w	sl, [sp]
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	aa03      	add	r2, sp, #12
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f7ff fee7 	bl	800a2ac <_printf_common>
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d14a      	bne.n	800a578 <_printf_i+0x1f0>
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	b004      	add	sp, #16
 800a4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	f043 0320 	orr.w	r3, r3, #32
 800a4f2:	6023      	str	r3, [r4, #0]
 800a4f4:	4832      	ldr	r0, [pc, #200]	@ (800a5c0 <_printf_i+0x238>)
 800a4f6:	2778      	movs	r7, #120	@ 0x78
 800a4f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	6831      	ldr	r1, [r6, #0]
 800a500:	061f      	lsls	r7, r3, #24
 800a502:	f851 5b04 	ldr.w	r5, [r1], #4
 800a506:	d402      	bmi.n	800a50e <_printf_i+0x186>
 800a508:	065f      	lsls	r7, r3, #25
 800a50a:	bf48      	it	mi
 800a50c:	b2ad      	uxthmi	r5, r5
 800a50e:	6031      	str	r1, [r6, #0]
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	bf44      	itt	mi
 800a514:	f043 0320 	orrmi.w	r3, r3, #32
 800a518:	6023      	strmi	r3, [r4, #0]
 800a51a:	b11d      	cbz	r5, 800a524 <_printf_i+0x19c>
 800a51c:	2310      	movs	r3, #16
 800a51e:	e7ad      	b.n	800a47c <_printf_i+0xf4>
 800a520:	4826      	ldr	r0, [pc, #152]	@ (800a5bc <_printf_i+0x234>)
 800a522:	e7e9      	b.n	800a4f8 <_printf_i+0x170>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	f023 0320 	bic.w	r3, r3, #32
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	e7f6      	b.n	800a51c <_printf_i+0x194>
 800a52e:	4616      	mov	r6, r2
 800a530:	e7bd      	b.n	800a4ae <_printf_i+0x126>
 800a532:	6833      	ldr	r3, [r6, #0]
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	6961      	ldr	r1, [r4, #20]
 800a538:	1d18      	adds	r0, r3, #4
 800a53a:	6030      	str	r0, [r6, #0]
 800a53c:	062e      	lsls	r6, r5, #24
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	d501      	bpl.n	800a546 <_printf_i+0x1be>
 800a542:	6019      	str	r1, [r3, #0]
 800a544:	e002      	b.n	800a54c <_printf_i+0x1c4>
 800a546:	0668      	lsls	r0, r5, #25
 800a548:	d5fb      	bpl.n	800a542 <_printf_i+0x1ba>
 800a54a:	8019      	strh	r1, [r3, #0]
 800a54c:	2300      	movs	r3, #0
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	4616      	mov	r6, r2
 800a552:	e7bc      	b.n	800a4ce <_printf_i+0x146>
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	6032      	str	r2, [r6, #0]
 800a55a:	681e      	ldr	r6, [r3, #0]
 800a55c:	6862      	ldr	r2, [r4, #4]
 800a55e:	2100      	movs	r1, #0
 800a560:	4630      	mov	r0, r6
 800a562:	f7f5 fe55 	bl	8000210 <memchr>
 800a566:	b108      	cbz	r0, 800a56c <_printf_i+0x1e4>
 800a568:	1b80      	subs	r0, r0, r6
 800a56a:	6060      	str	r0, [r4, #4]
 800a56c:	6863      	ldr	r3, [r4, #4]
 800a56e:	6123      	str	r3, [r4, #16]
 800a570:	2300      	movs	r3, #0
 800a572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a576:	e7aa      	b.n	800a4ce <_printf_i+0x146>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	4632      	mov	r2, r6
 800a57c:	4649      	mov	r1, r9
 800a57e:	4640      	mov	r0, r8
 800a580:	47d0      	blx	sl
 800a582:	3001      	adds	r0, #1
 800a584:	d0ad      	beq.n	800a4e2 <_printf_i+0x15a>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	079b      	lsls	r3, r3, #30
 800a58a:	d413      	bmi.n	800a5b4 <_printf_i+0x22c>
 800a58c:	68e0      	ldr	r0, [r4, #12]
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	4298      	cmp	r0, r3
 800a592:	bfb8      	it	lt
 800a594:	4618      	movlt	r0, r3
 800a596:	e7a6      	b.n	800a4e6 <_printf_i+0x15e>
 800a598:	2301      	movs	r3, #1
 800a59a:	4632      	mov	r2, r6
 800a59c:	4649      	mov	r1, r9
 800a59e:	4640      	mov	r0, r8
 800a5a0:	47d0      	blx	sl
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d09d      	beq.n	800a4e2 <_printf_i+0x15a>
 800a5a6:	3501      	adds	r5, #1
 800a5a8:	68e3      	ldr	r3, [r4, #12]
 800a5aa:	9903      	ldr	r1, [sp, #12]
 800a5ac:	1a5b      	subs	r3, r3, r1
 800a5ae:	42ab      	cmp	r3, r5
 800a5b0:	dcf2      	bgt.n	800a598 <_printf_i+0x210>
 800a5b2:	e7eb      	b.n	800a58c <_printf_i+0x204>
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	f104 0619 	add.w	r6, r4, #25
 800a5ba:	e7f5      	b.n	800a5a8 <_printf_i+0x220>
 800a5bc:	0800cf0a 	.word	0x0800cf0a
 800a5c0:	0800cf1b 	.word	0x0800cf1b

0800a5c4 <std>:
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5d2:	6083      	str	r3, [r0, #8]
 800a5d4:	8181      	strh	r1, [r0, #12]
 800a5d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5d8:	81c2      	strh	r2, [r0, #14]
 800a5da:	6183      	str	r3, [r0, #24]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	2208      	movs	r2, #8
 800a5e0:	305c      	adds	r0, #92	@ 0x5c
 800a5e2:	f000 f916 	bl	800a812 <memset>
 800a5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a61c <std+0x58>)
 800a5e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <std+0x5c>)
 800a5ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a624 <std+0x60>)
 800a5f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <std+0x64>)
 800a5f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a62c <std+0x68>)
 800a5f8:	6224      	str	r4, [r4, #32]
 800a5fa:	429c      	cmp	r4, r3
 800a5fc:	d006      	beq.n	800a60c <std+0x48>
 800a5fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a602:	4294      	cmp	r4, r2
 800a604:	d002      	beq.n	800a60c <std+0x48>
 800a606:	33d0      	adds	r3, #208	@ 0xd0
 800a608:	429c      	cmp	r4, r3
 800a60a:	d105      	bne.n	800a618 <std+0x54>
 800a60c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a614:	f000 b9d8 	b.w	800a9c8 <__retarget_lock_init_recursive>
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800a78d 	.word	0x0800a78d
 800a620:	0800a7af 	.word	0x0800a7af
 800a624:	0800a7e7 	.word	0x0800a7e7
 800a628:	0800a80b 	.word	0x0800a80b
 800a62c:	20005204 	.word	0x20005204

0800a630 <stdio_exit_handler>:
 800a630:	4a02      	ldr	r2, [pc, #8]	@ (800a63c <stdio_exit_handler+0xc>)
 800a632:	4903      	ldr	r1, [pc, #12]	@ (800a640 <stdio_exit_handler+0x10>)
 800a634:	4803      	ldr	r0, [pc, #12]	@ (800a644 <stdio_exit_handler+0x14>)
 800a636:	f000 b869 	b.w	800a70c <_fwalk_sglue>
 800a63a:	bf00      	nop
 800a63c:	20000018 	.word	0x20000018
 800a640:	0800c34d 	.word	0x0800c34d
 800a644:	20000028 	.word	0x20000028

0800a648 <cleanup_stdio>:
 800a648:	6841      	ldr	r1, [r0, #4]
 800a64a:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <cleanup_stdio+0x34>)
 800a64c:	4299      	cmp	r1, r3
 800a64e:	b510      	push	{r4, lr}
 800a650:	4604      	mov	r4, r0
 800a652:	d001      	beq.n	800a658 <cleanup_stdio+0x10>
 800a654:	f001 fe7a 	bl	800c34c <_fflush_r>
 800a658:	68a1      	ldr	r1, [r4, #8]
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <cleanup_stdio+0x38>)
 800a65c:	4299      	cmp	r1, r3
 800a65e:	d002      	beq.n	800a666 <cleanup_stdio+0x1e>
 800a660:	4620      	mov	r0, r4
 800a662:	f001 fe73 	bl	800c34c <_fflush_r>
 800a666:	68e1      	ldr	r1, [r4, #12]
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <cleanup_stdio+0x3c>)
 800a66a:	4299      	cmp	r1, r3
 800a66c:	d004      	beq.n	800a678 <cleanup_stdio+0x30>
 800a66e:	4620      	mov	r0, r4
 800a670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a674:	f001 be6a 	b.w	800c34c <_fflush_r>
 800a678:	bd10      	pop	{r4, pc}
 800a67a:	bf00      	nop
 800a67c:	20005204 	.word	0x20005204
 800a680:	2000526c 	.word	0x2000526c
 800a684:	200052d4 	.word	0x200052d4

0800a688 <global_stdio_init.part.0>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b8 <global_stdio_init.part.0+0x30>)
 800a68c:	4c0b      	ldr	r4, [pc, #44]	@ (800a6bc <global_stdio_init.part.0+0x34>)
 800a68e:	4a0c      	ldr	r2, [pc, #48]	@ (800a6c0 <global_stdio_init.part.0+0x38>)
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	4620      	mov	r0, r4
 800a694:	2200      	movs	r2, #0
 800a696:	2104      	movs	r1, #4
 800a698:	f7ff ff94 	bl	800a5c4 <std>
 800a69c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2109      	movs	r1, #9
 800a6a4:	f7ff ff8e 	bl	800a5c4 <std>
 800a6a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b2:	2112      	movs	r1, #18
 800a6b4:	f7ff bf86 	b.w	800a5c4 <std>
 800a6b8:	2000533c 	.word	0x2000533c
 800a6bc:	20005204 	.word	0x20005204
 800a6c0:	0800a631 	.word	0x0800a631

0800a6c4 <__sfp_lock_acquire>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	@ (800a6cc <__sfp_lock_acquire+0x8>)
 800a6c6:	f000 b980 	b.w	800a9ca <__retarget_lock_acquire_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20005345 	.word	0x20005345

0800a6d0 <__sfp_lock_release>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	@ (800a6d8 <__sfp_lock_release+0x8>)
 800a6d2:	f000 b97b 	b.w	800a9cc <__retarget_lock_release_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	20005345 	.word	0x20005345

0800a6dc <__sinit>:
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	4604      	mov	r4, r0
 800a6e0:	f7ff fff0 	bl	800a6c4 <__sfp_lock_acquire>
 800a6e4:	6a23      	ldr	r3, [r4, #32]
 800a6e6:	b11b      	cbz	r3, 800a6f0 <__sinit+0x14>
 800a6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ec:	f7ff bff0 	b.w	800a6d0 <__sfp_lock_release>
 800a6f0:	4b04      	ldr	r3, [pc, #16]	@ (800a704 <__sinit+0x28>)
 800a6f2:	6223      	str	r3, [r4, #32]
 800a6f4:	4b04      	ldr	r3, [pc, #16]	@ (800a708 <__sinit+0x2c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f5      	bne.n	800a6e8 <__sinit+0xc>
 800a6fc:	f7ff ffc4 	bl	800a688 <global_stdio_init.part.0>
 800a700:	e7f2      	b.n	800a6e8 <__sinit+0xc>
 800a702:	bf00      	nop
 800a704:	0800a649 	.word	0x0800a649
 800a708:	2000533c 	.word	0x2000533c

0800a70c <_fwalk_sglue>:
 800a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a710:	4607      	mov	r7, r0
 800a712:	4688      	mov	r8, r1
 800a714:	4614      	mov	r4, r2
 800a716:	2600      	movs	r6, #0
 800a718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a71c:	f1b9 0901 	subs.w	r9, r9, #1
 800a720:	d505      	bpl.n	800a72e <_fwalk_sglue+0x22>
 800a722:	6824      	ldr	r4, [r4, #0]
 800a724:	2c00      	cmp	r4, #0
 800a726:	d1f7      	bne.n	800a718 <_fwalk_sglue+0xc>
 800a728:	4630      	mov	r0, r6
 800a72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a72e:	89ab      	ldrh	r3, [r5, #12]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d907      	bls.n	800a744 <_fwalk_sglue+0x38>
 800a734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a738:	3301      	adds	r3, #1
 800a73a:	d003      	beq.n	800a744 <_fwalk_sglue+0x38>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4638      	mov	r0, r7
 800a740:	47c0      	blx	r8
 800a742:	4306      	orrs	r6, r0
 800a744:	3568      	adds	r5, #104	@ 0x68
 800a746:	e7e9      	b.n	800a71c <_fwalk_sglue+0x10>

0800a748 <siprintf>:
 800a748:	b40e      	push	{r1, r2, r3}
 800a74a:	b510      	push	{r4, lr}
 800a74c:	b09d      	sub	sp, #116	@ 0x74
 800a74e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a750:	9002      	str	r0, [sp, #8]
 800a752:	9006      	str	r0, [sp, #24]
 800a754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a758:	480a      	ldr	r0, [pc, #40]	@ (800a784 <siprintf+0x3c>)
 800a75a:	9107      	str	r1, [sp, #28]
 800a75c:	9104      	str	r1, [sp, #16]
 800a75e:	490a      	ldr	r1, [pc, #40]	@ (800a788 <siprintf+0x40>)
 800a760:	f853 2b04 	ldr.w	r2, [r3], #4
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	2400      	movs	r4, #0
 800a768:	a902      	add	r1, sp, #8
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a770:	f001 fc6c 	bl	800c04c <_svfiprintf_r>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	701c      	strb	r4, [r3, #0]
 800a778:	b01d      	add	sp, #116	@ 0x74
 800a77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77e:	b003      	add	sp, #12
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20000024 	.word	0x20000024
 800a788:	ffff0208 	.word	0xffff0208

0800a78c <__sread>:
 800a78c:	b510      	push	{r4, lr}
 800a78e:	460c      	mov	r4, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	f000 f8ca 	bl	800a92c <_read_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	bfab      	itete	ge
 800a79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a79e:	89a3      	ldrhlt	r3, [r4, #12]
 800a7a0:	181b      	addge	r3, r3, r0
 800a7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7a6:	bfac      	ite	ge
 800a7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7aa:	81a3      	strhlt	r3, [r4, #12]
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <__swrite>:
 800a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	05db      	lsls	r3, r3, #23
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4616      	mov	r6, r2
 800a7be:	d505      	bpl.n	800a7cc <__swrite+0x1e>
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f000 f89e 	bl	800a908 <_lseek_r>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	4632      	mov	r2, r6
 800a7da:	463b      	mov	r3, r7
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	f000 b8b5 	b.w	800a950 <_write_r>

0800a7e6 <__sseek>:
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ee:	f000 f88b 	bl	800a908 <_lseek_r>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	bf15      	itete	ne
 800a7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a802:	81a3      	strheq	r3, [r4, #12]
 800a804:	bf18      	it	ne
 800a806:	81a3      	strhne	r3, [r4, #12]
 800a808:	bd10      	pop	{r4, pc}

0800a80a <__sclose>:
 800a80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80e:	f000 b80d 	b.w	800a82c <_close_r>

0800a812 <memset>:
 800a812:	4402      	add	r2, r0
 800a814:	4603      	mov	r3, r0
 800a816:	4293      	cmp	r3, r2
 800a818:	d100      	bne.n	800a81c <memset+0xa>
 800a81a:	4770      	bx	lr
 800a81c:	f803 1b01 	strb.w	r1, [r3], #1
 800a820:	e7f9      	b.n	800a816 <memset+0x4>
	...

0800a824 <_localeconv_r>:
 800a824:	4800      	ldr	r0, [pc, #0]	@ (800a828 <_localeconv_r+0x4>)
 800a826:	4770      	bx	lr
 800a828:	20000164 	.word	0x20000164

0800a82c <_close_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d06      	ldr	r5, [pc, #24]	@ (800a848 <_close_r+0x1c>)
 800a830:	2300      	movs	r3, #0
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	f7f7 fdbc 	bl	80023b4 <_close>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_close_r+0x1a>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_close_r+0x1a>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20005340 	.word	0x20005340

0800a84c <_reclaim_reent>:
 800a84c:	4b2d      	ldr	r3, [pc, #180]	@ (800a904 <_reclaim_reent+0xb8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4283      	cmp	r3, r0
 800a852:	b570      	push	{r4, r5, r6, lr}
 800a854:	4604      	mov	r4, r0
 800a856:	d053      	beq.n	800a900 <_reclaim_reent+0xb4>
 800a858:	69c3      	ldr	r3, [r0, #28]
 800a85a:	b31b      	cbz	r3, 800a8a4 <_reclaim_reent+0x58>
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	b163      	cbz	r3, 800a87a <_reclaim_reent+0x2e>
 800a860:	2500      	movs	r5, #0
 800a862:	69e3      	ldr	r3, [r4, #28]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	5959      	ldr	r1, [r3, r5]
 800a868:	b9b1      	cbnz	r1, 800a898 <_reclaim_reent+0x4c>
 800a86a:	3504      	adds	r5, #4
 800a86c:	2d80      	cmp	r5, #128	@ 0x80
 800a86e:	d1f8      	bne.n	800a862 <_reclaim_reent+0x16>
 800a870:	69e3      	ldr	r3, [r4, #28]
 800a872:	4620      	mov	r0, r4
 800a874:	68d9      	ldr	r1, [r3, #12]
 800a876:	f000 ff13 	bl	800b6a0 <_free_r>
 800a87a:	69e3      	ldr	r3, [r4, #28]
 800a87c:	6819      	ldr	r1, [r3, #0]
 800a87e:	b111      	cbz	r1, 800a886 <_reclaim_reent+0x3a>
 800a880:	4620      	mov	r0, r4
 800a882:	f000 ff0d 	bl	800b6a0 <_free_r>
 800a886:	69e3      	ldr	r3, [r4, #28]
 800a888:	689d      	ldr	r5, [r3, #8]
 800a88a:	b15d      	cbz	r5, 800a8a4 <_reclaim_reent+0x58>
 800a88c:	4629      	mov	r1, r5
 800a88e:	4620      	mov	r0, r4
 800a890:	682d      	ldr	r5, [r5, #0]
 800a892:	f000 ff05 	bl	800b6a0 <_free_r>
 800a896:	e7f8      	b.n	800a88a <_reclaim_reent+0x3e>
 800a898:	680e      	ldr	r6, [r1, #0]
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 ff00 	bl	800b6a0 <_free_r>
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	e7e1      	b.n	800a868 <_reclaim_reent+0x1c>
 800a8a4:	6961      	ldr	r1, [r4, #20]
 800a8a6:	b111      	cbz	r1, 800a8ae <_reclaim_reent+0x62>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fef9 	bl	800b6a0 <_free_r>
 800a8ae:	69e1      	ldr	r1, [r4, #28]
 800a8b0:	b111      	cbz	r1, 800a8b8 <_reclaim_reent+0x6c>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fef4 	bl	800b6a0 <_free_r>
 800a8b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a8ba:	b111      	cbz	r1, 800a8c2 <_reclaim_reent+0x76>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 feef 	bl	800b6a0 <_free_r>
 800a8c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c4:	b111      	cbz	r1, 800a8cc <_reclaim_reent+0x80>
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 feea 	bl	800b6a0 <_free_r>
 800a8cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a8ce:	b111      	cbz	r1, 800a8d6 <_reclaim_reent+0x8a>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fee5 	bl	800b6a0 <_free_r>
 800a8d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a8d8:	b111      	cbz	r1, 800a8e0 <_reclaim_reent+0x94>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fee0 	bl	800b6a0 <_free_r>
 800a8e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a8e2:	b111      	cbz	r1, 800a8ea <_reclaim_reent+0x9e>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fedb 	bl	800b6a0 <_free_r>
 800a8ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8ec:	b111      	cbz	r1, 800a8f4 <_reclaim_reent+0xa8>
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 fed6 	bl	800b6a0 <_free_r>
 800a8f4:	6a23      	ldr	r3, [r4, #32]
 800a8f6:	b11b      	cbz	r3, 800a900 <_reclaim_reent+0xb4>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8fe:	4718      	bx	r3
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	bf00      	nop
 800a904:	20000024 	.word	0x20000024

0800a908 <_lseek_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	@ (800a928 <_lseek_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f7 fd73 	bl	8002402 <_lseek>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_lseek_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_lseek_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20005340 	.word	0x20005340

0800a92c <_read_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d07      	ldr	r5, [pc, #28]	@ (800a94c <_read_r+0x20>)
 800a930:	4604      	mov	r4, r0
 800a932:	4608      	mov	r0, r1
 800a934:	4611      	mov	r1, r2
 800a936:	2200      	movs	r2, #0
 800a938:	602a      	str	r2, [r5, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f7f7 fd01 	bl	8002342 <_read>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_read_r+0x1e>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_read_r+0x1e>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20005340 	.word	0x20005340

0800a950 <_write_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	@ (800a970 <_write_r+0x20>)
 800a954:	4604      	mov	r4, r0
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	2200      	movs	r2, #0
 800a95c:	602a      	str	r2, [r5, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	f7f7 fd0c 	bl	800237c <_write>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_write_r+0x1e>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_write_r+0x1e>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20005340 	.word	0x20005340

0800a974 <__errno>:
 800a974:	4b01      	ldr	r3, [pc, #4]	@ (800a97c <__errno+0x8>)
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	20000024 	.word	0x20000024

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b8 <__libc_init_array+0x38>)
 800a984:	4c0d      	ldr	r4, [pc, #52]	@ (800a9bc <__libc_init_array+0x3c>)
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	2600      	movs	r6, #0
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c0 <__libc_init_array+0x40>)
 800a992:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c4 <__libc_init_array+0x44>)
 800a994:	f002 f86a 	bl	800ca6c <_init>
 800a998:	1b64      	subs	r4, r4, r5
 800a99a:	10a4      	asrs	r4, r4, #2
 800a99c:	2600      	movs	r6, #0
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a8:	4798      	blx	r3
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b2:	4798      	blx	r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	0800d274 	.word	0x0800d274
 800a9bc:	0800d274 	.word	0x0800d274
 800a9c0:	0800d274 	.word	0x0800d274
 800a9c4:	0800d278 	.word	0x0800d278

0800a9c8 <__retarget_lock_init_recursive>:
 800a9c8:	4770      	bx	lr

0800a9ca <__retarget_lock_acquire_recursive>:
 800a9ca:	4770      	bx	lr

0800a9cc <__retarget_lock_release_recursive>:
 800a9cc:	4770      	bx	lr

0800a9ce <memcpy>:
 800a9ce:	440a      	add	r2, r1
 800a9d0:	4291      	cmp	r1, r2
 800a9d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9d6:	d100      	bne.n	800a9da <memcpy+0xc>
 800a9d8:	4770      	bx	lr
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e4:	4291      	cmp	r1, r2
 800a9e6:	d1f9      	bne.n	800a9dc <memcpy+0xe>
 800a9e8:	bd10      	pop	{r4, pc}

0800a9ea <quorem>:
 800a9ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ee:	6903      	ldr	r3, [r0, #16]
 800a9f0:	690c      	ldr	r4, [r1, #16]
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	db7e      	blt.n	800aaf6 <quorem+0x10c>
 800a9f8:	3c01      	subs	r4, #1
 800a9fa:	f101 0814 	add.w	r8, r1, #20
 800a9fe:	00a3      	lsls	r3, r4, #2
 800aa00:	f100 0514 	add.w	r5, r0, #20
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa14:	3301      	adds	r3, #1
 800aa16:	429a      	cmp	r2, r3
 800aa18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa20:	d32e      	bcc.n	800aa80 <quorem+0x96>
 800aa22:	f04f 0a00 	mov.w	sl, #0
 800aa26:	46c4      	mov	ip, r8
 800aa28:	46ae      	mov	lr, r5
 800aa2a:	46d3      	mov	fp, sl
 800aa2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa30:	b298      	uxth	r0, r3
 800aa32:	fb06 a000 	mla	r0, r6, r0, sl
 800aa36:	0c02      	lsrs	r2, r0, #16
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	fb06 2303 	mla	r3, r6, r3, r2
 800aa3e:	f8de 2000 	ldr.w	r2, [lr]
 800aa42:	b280      	uxth	r0, r0
 800aa44:	b292      	uxth	r2, r2
 800aa46:	1a12      	subs	r2, r2, r0
 800aa48:	445a      	add	r2, fp
 800aa4a:	f8de 0000 	ldr.w	r0, [lr]
 800aa4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa5c:	b292      	uxth	r2, r2
 800aa5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa62:	45e1      	cmp	r9, ip
 800aa64:	f84e 2b04 	str.w	r2, [lr], #4
 800aa68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa6c:	d2de      	bcs.n	800aa2c <quorem+0x42>
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	58eb      	ldr	r3, [r5, r3]
 800aa72:	b92b      	cbnz	r3, 800aa80 <quorem+0x96>
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	3b04      	subs	r3, #4
 800aa78:	429d      	cmp	r5, r3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	d32f      	bcc.n	800aade <quorem+0xf4>
 800aa7e:	613c      	str	r4, [r7, #16]
 800aa80:	4638      	mov	r0, r7
 800aa82:	f001 f97f 	bl	800bd84 <__mcmp>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	db25      	blt.n	800aad6 <quorem+0xec>
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa92:	f8d1 c000 	ldr.w	ip, [r1]
 800aa96:	fa1f fe82 	uxth.w	lr, r2
 800aa9a:	fa1f f38c 	uxth.w	r3, ip
 800aa9e:	eba3 030e 	sub.w	r3, r3, lr
 800aaa2:	4403      	add	r3, r0
 800aaa4:	0c12      	lsrs	r2, r2, #16
 800aaa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aaaa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab4:	45c1      	cmp	r9, r8
 800aab6:	f841 3b04 	str.w	r3, [r1], #4
 800aaba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aabe:	d2e6      	bcs.n	800aa8e <quorem+0xa4>
 800aac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aac8:	b922      	cbnz	r2, 800aad4 <quorem+0xea>
 800aaca:	3b04      	subs	r3, #4
 800aacc:	429d      	cmp	r5, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	d30b      	bcc.n	800aaea <quorem+0x100>
 800aad2:	613c      	str	r4, [r7, #16]
 800aad4:	3601      	adds	r6, #1
 800aad6:	4630      	mov	r0, r6
 800aad8:	b003      	add	sp, #12
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aade:	6812      	ldr	r2, [r2, #0]
 800aae0:	3b04      	subs	r3, #4
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d1cb      	bne.n	800aa7e <quorem+0x94>
 800aae6:	3c01      	subs	r4, #1
 800aae8:	e7c6      	b.n	800aa78 <quorem+0x8e>
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	d1ef      	bne.n	800aad2 <quorem+0xe8>
 800aaf2:	3c01      	subs	r4, #1
 800aaf4:	e7ea      	b.n	800aacc <quorem+0xe2>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e7ee      	b.n	800aad8 <quorem+0xee>
 800aafa:	0000      	movs	r0, r0
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <_dtoa_r>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	69c7      	ldr	r7, [r0, #28]
 800ab06:	b097      	sub	sp, #92	@ 0x5c
 800ab08:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab0c:	ec55 4b10 	vmov	r4, r5, d0
 800ab10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab12:	9107      	str	r1, [sp, #28]
 800ab14:	4681      	mov	r9, r0
 800ab16:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab1a:	b97f      	cbnz	r7, 800ab3c <_dtoa_r+0x3c>
 800ab1c:	2010      	movs	r0, #16
 800ab1e:	f000 fe09 	bl	800b734 <malloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab28:	b920      	cbnz	r0, 800ab34 <_dtoa_r+0x34>
 800ab2a:	4ba9      	ldr	r3, [pc, #676]	@ (800add0 <_dtoa_r+0x2d0>)
 800ab2c:	21ef      	movs	r1, #239	@ 0xef
 800ab2e:	48a9      	ldr	r0, [pc, #676]	@ (800add4 <_dtoa_r+0x2d4>)
 800ab30:	f001 fc5e 	bl	800c3f0 <__assert_func>
 800ab34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab38:	6007      	str	r7, [r0, #0]
 800ab3a:	60c7      	str	r7, [r0, #12]
 800ab3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab40:	6819      	ldr	r1, [r3, #0]
 800ab42:	b159      	cbz	r1, 800ab5c <_dtoa_r+0x5c>
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	604a      	str	r2, [r1, #4]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	4093      	lsls	r3, r2
 800ab4c:	608b      	str	r3, [r1, #8]
 800ab4e:	4648      	mov	r0, r9
 800ab50:	f000 fee6 	bl	800b920 <_Bfree>
 800ab54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	1e2b      	subs	r3, r5, #0
 800ab5e:	bfb9      	ittee	lt
 800ab60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab64:	9305      	strlt	r3, [sp, #20]
 800ab66:	2300      	movge	r3, #0
 800ab68:	6033      	strge	r3, [r6, #0]
 800ab6a:	9f05      	ldr	r7, [sp, #20]
 800ab6c:	4b9a      	ldr	r3, [pc, #616]	@ (800add8 <_dtoa_r+0x2d8>)
 800ab6e:	bfbc      	itt	lt
 800ab70:	2201      	movlt	r2, #1
 800ab72:	6032      	strlt	r2, [r6, #0]
 800ab74:	43bb      	bics	r3, r7
 800ab76:	d112      	bne.n	800ab9e <_dtoa_r+0x9e>
 800ab78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab84:	4323      	orrs	r3, r4
 800ab86:	f000 855a 	beq.w	800b63e <_dtoa_r+0xb3e>
 800ab8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800adec <_dtoa_r+0x2ec>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 855c 	beq.w	800b64e <_dtoa_r+0xb4e>
 800ab96:	f10a 0303 	add.w	r3, sl, #3
 800ab9a:	f000 bd56 	b.w	800b64a <_dtoa_r+0xb4a>
 800ab9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aba2:	2200      	movs	r2, #0
 800aba4:	ec51 0b17 	vmov	r0, r1, d7
 800aba8:	2300      	movs	r3, #0
 800abaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800abae:	f7f5 ffab 	bl	8000b08 <__aeabi_dcmpeq>
 800abb2:	4680      	mov	r8, r0
 800abb4:	b158      	cbz	r0, 800abce <_dtoa_r+0xce>
 800abb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abb8:	2301      	movs	r3, #1
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abbe:	b113      	cbz	r3, 800abc6 <_dtoa_r+0xc6>
 800abc0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abc2:	4b86      	ldr	r3, [pc, #536]	@ (800addc <_dtoa_r+0x2dc>)
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800adf0 <_dtoa_r+0x2f0>
 800abca:	f000 bd40 	b.w	800b64e <_dtoa_r+0xb4e>
 800abce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abd2:	aa14      	add	r2, sp, #80	@ 0x50
 800abd4:	a915      	add	r1, sp, #84	@ 0x54
 800abd6:	4648      	mov	r0, r9
 800abd8:	f001 f984 	bl	800bee4 <__d2b>
 800abdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abe0:	9002      	str	r0, [sp, #8]
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d078      	beq.n	800acd8 <_dtoa_r+0x1d8>
 800abe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac00:	4619      	mov	r1, r3
 800ac02:	2200      	movs	r2, #0
 800ac04:	4b76      	ldr	r3, [pc, #472]	@ (800ade0 <_dtoa_r+0x2e0>)
 800ac06:	f7f5 fb5f 	bl	80002c8 <__aeabi_dsub>
 800ac0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800adb8 <_dtoa_r+0x2b8>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	a36a      	add	r3, pc, #424	@ (adr r3, 800adc0 <_dtoa_r+0x2c0>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f7f5 fb57 	bl	80002cc <__adddf3>
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4630      	mov	r0, r6
 800ac22:	460d      	mov	r5, r1
 800ac24:	f7f5 fc9e 	bl	8000564 <__aeabi_i2d>
 800ac28:	a367      	add	r3, pc, #412	@ (adr r3, 800adc8 <_dtoa_r+0x2c8>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4620      	mov	r0, r4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7f5 fb47 	bl	80002cc <__adddf3>
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460d      	mov	r5, r1
 800ac42:	f7f5 ffa9 	bl	8000b98 <__aeabi_d2iz>
 800ac46:	2200      	movs	r2, #0
 800ac48:	4607      	mov	r7, r0
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 ff64 	bl	8000b1c <__aeabi_dcmplt>
 800ac54:	b140      	cbz	r0, 800ac68 <_dtoa_r+0x168>
 800ac56:	4638      	mov	r0, r7
 800ac58:	f7f5 fc84 	bl	8000564 <__aeabi_i2d>
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f7f5 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 800ac64:	b900      	cbnz	r0, 800ac68 <_dtoa_r+0x168>
 800ac66:	3f01      	subs	r7, #1
 800ac68:	2f16      	cmp	r7, #22
 800ac6a:	d852      	bhi.n	800ad12 <_dtoa_r+0x212>
 800ac6c:	4b5d      	ldr	r3, [pc, #372]	@ (800ade4 <_dtoa_r+0x2e4>)
 800ac6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac7a:	f7f5 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d049      	beq.n	800ad16 <_dtoa_r+0x216>
 800ac82:	3f01      	subs	r7, #1
 800ac84:	2300      	movs	r3, #0
 800ac86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac8a:	1b9b      	subs	r3, r3, r6
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	bf45      	ittet	mi
 800ac90:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac94:	9300      	strmi	r3, [sp, #0]
 800ac96:	2300      	movpl	r3, #0
 800ac98:	2300      	movmi	r3, #0
 800ac9a:	9206      	str	r2, [sp, #24]
 800ac9c:	bf54      	ite	pl
 800ac9e:	9300      	strpl	r3, [sp, #0]
 800aca0:	9306      	strmi	r3, [sp, #24]
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	db39      	blt.n	800ad1a <_dtoa_r+0x21a>
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	970d      	str	r7, [sp, #52]	@ 0x34
 800acaa:	443b      	add	r3, r7
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	2300      	movs	r3, #0
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	9b07      	ldr	r3, [sp, #28]
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d863      	bhi.n	800ad80 <_dtoa_r+0x280>
 800acb8:	2b05      	cmp	r3, #5
 800acba:	bfc4      	itt	gt
 800acbc:	3b04      	subgt	r3, #4
 800acbe:	9307      	strgt	r3, [sp, #28]
 800acc0:	9b07      	ldr	r3, [sp, #28]
 800acc2:	f1a3 0302 	sub.w	r3, r3, #2
 800acc6:	bfcc      	ite	gt
 800acc8:	2400      	movgt	r4, #0
 800acca:	2401      	movle	r4, #1
 800accc:	2b03      	cmp	r3, #3
 800acce:	d863      	bhi.n	800ad98 <_dtoa_r+0x298>
 800acd0:	e8df f003 	tbb	[pc, r3]
 800acd4:	2b375452 	.word	0x2b375452
 800acd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acdc:	441e      	add	r6, r3
 800acde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ace2:	2b20      	cmp	r3, #32
 800ace4:	bfc1      	itttt	gt
 800ace6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acea:	409f      	lslgt	r7, r3
 800acec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acf0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acf4:	bfd6      	itet	le
 800acf6:	f1c3 0320 	rsble	r3, r3, #32
 800acfa:	ea47 0003 	orrgt.w	r0, r7, r3
 800acfe:	fa04 f003 	lslle.w	r0, r4, r3
 800ad02:	f7f5 fc1f 	bl	8000544 <__aeabi_ui2d>
 800ad06:	2201      	movs	r2, #1
 800ad08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad0c:	3e01      	subs	r6, #1
 800ad0e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad10:	e776      	b.n	800ac00 <_dtoa_r+0x100>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e7b7      	b.n	800ac86 <_dtoa_r+0x186>
 800ad16:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad18:	e7b6      	b.n	800ac88 <_dtoa_r+0x188>
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	1bdb      	subs	r3, r3, r7
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	427b      	negs	r3, r7
 800ad22:	9308      	str	r3, [sp, #32]
 800ad24:	2300      	movs	r3, #0
 800ad26:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad28:	e7c3      	b.n	800acb2 <_dtoa_r+0x1b2>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad30:	eb07 0b03 	add.w	fp, r7, r3
 800ad34:	f10b 0301 	add.w	r3, fp, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	9303      	str	r3, [sp, #12]
 800ad3c:	bfb8      	it	lt
 800ad3e:	2301      	movlt	r3, #1
 800ad40:	e006      	b.n	800ad50 <_dtoa_r+0x250>
 800ad42:	2301      	movs	r3, #1
 800ad44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dd28      	ble.n	800ad9e <_dtoa_r+0x29e>
 800ad4c:	469b      	mov	fp, r3
 800ad4e:	9303      	str	r3, [sp, #12]
 800ad50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad54:	2100      	movs	r1, #0
 800ad56:	2204      	movs	r2, #4
 800ad58:	f102 0514 	add.w	r5, r2, #20
 800ad5c:	429d      	cmp	r5, r3
 800ad5e:	d926      	bls.n	800adae <_dtoa_r+0x2ae>
 800ad60:	6041      	str	r1, [r0, #4]
 800ad62:	4648      	mov	r0, r9
 800ad64:	f000 fd9c 	bl	800b8a0 <_Balloc>
 800ad68:	4682      	mov	sl, r0
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d142      	bne.n	800adf4 <_dtoa_r+0x2f4>
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <_dtoa_r+0x2e8>)
 800ad70:	4602      	mov	r2, r0
 800ad72:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad76:	e6da      	b.n	800ab2e <_dtoa_r+0x2e>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e7e3      	b.n	800ad44 <_dtoa_r+0x244>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e7d5      	b.n	800ad2c <_dtoa_r+0x22c>
 800ad80:	2401      	movs	r4, #1
 800ad82:	2300      	movs	r3, #0
 800ad84:	9307      	str	r3, [sp, #28]
 800ad86:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad88:	f04f 3bff 	mov.w	fp, #4294967295
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad92:	2312      	movs	r3, #18
 800ad94:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad96:	e7db      	b.n	800ad50 <_dtoa_r+0x250>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9c:	e7f4      	b.n	800ad88 <_dtoa_r+0x288>
 800ad9e:	f04f 0b01 	mov.w	fp, #1
 800ada2:	f8cd b00c 	str.w	fp, [sp, #12]
 800ada6:	465b      	mov	r3, fp
 800ada8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800adac:	e7d0      	b.n	800ad50 <_dtoa_r+0x250>
 800adae:	3101      	adds	r1, #1
 800adb0:	0052      	lsls	r2, r2, #1
 800adb2:	e7d1      	b.n	800ad58 <_dtoa_r+0x258>
 800adb4:	f3af 8000 	nop.w
 800adb8:	636f4361 	.word	0x636f4361
 800adbc:	3fd287a7 	.word	0x3fd287a7
 800adc0:	8b60c8b3 	.word	0x8b60c8b3
 800adc4:	3fc68a28 	.word	0x3fc68a28
 800adc8:	509f79fb 	.word	0x509f79fb
 800adcc:	3fd34413 	.word	0x3fd34413
 800add0:	0800cf39 	.word	0x0800cf39
 800add4:	0800cf50 	.word	0x0800cf50
 800add8:	7ff00000 	.word	0x7ff00000
 800addc:	0800cf09 	.word	0x0800cf09
 800ade0:	3ff80000 	.word	0x3ff80000
 800ade4:	0800d0a0 	.word	0x0800d0a0
 800ade8:	0800cfa8 	.word	0x0800cfa8
 800adec:	0800cf35 	.word	0x0800cf35
 800adf0:	0800cf08 	.word	0x0800cf08
 800adf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adf8:	6018      	str	r0, [r3, #0]
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	2b0e      	cmp	r3, #14
 800adfe:	f200 80a1 	bhi.w	800af44 <_dtoa_r+0x444>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	f000 809e 	beq.w	800af44 <_dtoa_r+0x444>
 800ae08:	2f00      	cmp	r7, #0
 800ae0a:	dd33      	ble.n	800ae74 <_dtoa_r+0x374>
 800ae0c:	4b9c      	ldr	r3, [pc, #624]	@ (800b080 <_dtoa_r+0x580>)
 800ae0e:	f007 020f 	and.w	r2, r7, #15
 800ae12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae16:	ed93 7b00 	vldr	d7, [r3]
 800ae1a:	05f8      	lsls	r0, r7, #23
 800ae1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae24:	d516      	bpl.n	800ae54 <_dtoa_r+0x354>
 800ae26:	4b97      	ldr	r3, [pc, #604]	@ (800b084 <_dtoa_r+0x584>)
 800ae28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae30:	f7f5 fd2c 	bl	800088c <__aeabi_ddiv>
 800ae34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae38:	f004 040f 	and.w	r4, r4, #15
 800ae3c:	2603      	movs	r6, #3
 800ae3e:	4d91      	ldr	r5, [pc, #580]	@ (800b084 <_dtoa_r+0x584>)
 800ae40:	b954      	cbnz	r4, 800ae58 <_dtoa_r+0x358>
 800ae42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4a:	f7f5 fd1f 	bl	800088c <__aeabi_ddiv>
 800ae4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae52:	e028      	b.n	800aea6 <_dtoa_r+0x3a6>
 800ae54:	2602      	movs	r6, #2
 800ae56:	e7f2      	b.n	800ae3e <_dtoa_r+0x33e>
 800ae58:	07e1      	lsls	r1, r4, #31
 800ae5a:	d508      	bpl.n	800ae6e <_dtoa_r+0x36e>
 800ae5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae64:	f7f5 fbe8 	bl	8000638 <__aeabi_dmul>
 800ae68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	1064      	asrs	r4, r4, #1
 800ae70:	3508      	adds	r5, #8
 800ae72:	e7e5      	b.n	800ae40 <_dtoa_r+0x340>
 800ae74:	f000 80af 	beq.w	800afd6 <_dtoa_r+0x4d6>
 800ae78:	427c      	negs	r4, r7
 800ae7a:	4b81      	ldr	r3, [pc, #516]	@ (800b080 <_dtoa_r+0x580>)
 800ae7c:	4d81      	ldr	r5, [pc, #516]	@ (800b084 <_dtoa_r+0x584>)
 800ae7e:	f004 020f 	and.w	r2, r4, #15
 800ae82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae8e:	f7f5 fbd3 	bl	8000638 <__aeabi_dmul>
 800ae92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae96:	1124      	asrs	r4, r4, #4
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2602      	movs	r6, #2
 800ae9c:	2c00      	cmp	r4, #0
 800ae9e:	f040 808f 	bne.w	800afc0 <_dtoa_r+0x4c0>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1d3      	bne.n	800ae4e <_dtoa_r+0x34e>
 800aea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aea8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 8094 	beq.w	800afda <_dtoa_r+0x4da>
 800aeb2:	4b75      	ldr	r3, [pc, #468]	@ (800b088 <_dtoa_r+0x588>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f000 808b 	beq.w	800afda <_dtoa_r+0x4da>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8087 	beq.w	800afda <_dtoa_r+0x4da>
 800aecc:	f1bb 0f00 	cmp.w	fp, #0
 800aed0:	dd34      	ble.n	800af3c <_dtoa_r+0x43c>
 800aed2:	4620      	mov	r0, r4
 800aed4:	4b6d      	ldr	r3, [pc, #436]	@ (800b08c <_dtoa_r+0x58c>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fbad 	bl	8000638 <__aeabi_dmul>
 800aede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aee2:	f107 38ff 	add.w	r8, r7, #4294967295
 800aee6:	3601      	adds	r6, #1
 800aee8:	465c      	mov	r4, fp
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7f5 fb3a 	bl	8000564 <__aeabi_i2d>
 800aef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef4:	f7f5 fba0 	bl	8000638 <__aeabi_dmul>
 800aef8:	4b65      	ldr	r3, [pc, #404]	@ (800b090 <_dtoa_r+0x590>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	f7f5 f9e6 	bl	80002cc <__adddf3>
 800af00:	4605      	mov	r5, r0
 800af02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af06:	2c00      	cmp	r4, #0
 800af08:	d16a      	bne.n	800afe0 <_dtoa_r+0x4e0>
 800af0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af0e:	4b61      	ldr	r3, [pc, #388]	@ (800b094 <_dtoa_r+0x594>)
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 f9d9 	bl	80002c8 <__aeabi_dsub>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af1e:	462a      	mov	r2, r5
 800af20:	4633      	mov	r3, r6
 800af22:	f7f5 fe19 	bl	8000b58 <__aeabi_dcmpgt>
 800af26:	2800      	cmp	r0, #0
 800af28:	f040 8298 	bne.w	800b45c <_dtoa_r+0x95c>
 800af2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af30:	462a      	mov	r2, r5
 800af32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af36:	f7f5 fdf1 	bl	8000b1c <__aeabi_dcmplt>
 800af3a:	bb38      	cbnz	r0, 800af8c <_dtoa_r+0x48c>
 800af3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af46:	2b00      	cmp	r3, #0
 800af48:	f2c0 8157 	blt.w	800b1fa <_dtoa_r+0x6fa>
 800af4c:	2f0e      	cmp	r7, #14
 800af4e:	f300 8154 	bgt.w	800b1fa <_dtoa_r+0x6fa>
 800af52:	4b4b      	ldr	r3, [pc, #300]	@ (800b080 <_dtoa_r+0x580>)
 800af54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af58:	ed93 7b00 	vldr	d7, [r3]
 800af5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af5e:	2b00      	cmp	r3, #0
 800af60:	ed8d 7b00 	vstr	d7, [sp]
 800af64:	f280 80e5 	bge.w	800b132 <_dtoa_r+0x632>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f300 80e1 	bgt.w	800b132 <_dtoa_r+0x632>
 800af70:	d10c      	bne.n	800af8c <_dtoa_r+0x48c>
 800af72:	4b48      	ldr	r3, [pc, #288]	@ (800b094 <_dtoa_r+0x594>)
 800af74:	2200      	movs	r2, #0
 800af76:	ec51 0b17 	vmov	r0, r1, d7
 800af7a:	f7f5 fb5d 	bl	8000638 <__aeabi_dmul>
 800af7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af82:	f7f5 fddf 	bl	8000b44 <__aeabi_dcmpge>
 800af86:	2800      	cmp	r0, #0
 800af88:	f000 8266 	beq.w	800b458 <_dtoa_r+0x958>
 800af8c:	2400      	movs	r4, #0
 800af8e:	4625      	mov	r5, r4
 800af90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af92:	4656      	mov	r6, sl
 800af94:	ea6f 0803 	mvn.w	r8, r3
 800af98:	2700      	movs	r7, #0
 800af9a:	4621      	mov	r1, r4
 800af9c:	4648      	mov	r0, r9
 800af9e:	f000 fcbf 	bl	800b920 <_Bfree>
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	f000 80bd 	beq.w	800b122 <_dtoa_r+0x622>
 800afa8:	b12f      	cbz	r7, 800afb6 <_dtoa_r+0x4b6>
 800afaa:	42af      	cmp	r7, r5
 800afac:	d003      	beq.n	800afb6 <_dtoa_r+0x4b6>
 800afae:	4639      	mov	r1, r7
 800afb0:	4648      	mov	r0, r9
 800afb2:	f000 fcb5 	bl	800b920 <_Bfree>
 800afb6:	4629      	mov	r1, r5
 800afb8:	4648      	mov	r0, r9
 800afba:	f000 fcb1 	bl	800b920 <_Bfree>
 800afbe:	e0b0      	b.n	800b122 <_dtoa_r+0x622>
 800afc0:	07e2      	lsls	r2, r4, #31
 800afc2:	d505      	bpl.n	800afd0 <_dtoa_r+0x4d0>
 800afc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc8:	f7f5 fb36 	bl	8000638 <__aeabi_dmul>
 800afcc:	3601      	adds	r6, #1
 800afce:	2301      	movs	r3, #1
 800afd0:	1064      	asrs	r4, r4, #1
 800afd2:	3508      	adds	r5, #8
 800afd4:	e762      	b.n	800ae9c <_dtoa_r+0x39c>
 800afd6:	2602      	movs	r6, #2
 800afd8:	e765      	b.n	800aea6 <_dtoa_r+0x3a6>
 800afda:	9c03      	ldr	r4, [sp, #12]
 800afdc:	46b8      	mov	r8, r7
 800afde:	e784      	b.n	800aeea <_dtoa_r+0x3ea>
 800afe0:	4b27      	ldr	r3, [pc, #156]	@ (800b080 <_dtoa_r+0x580>)
 800afe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afec:	4454      	add	r4, sl
 800afee:	2900      	cmp	r1, #0
 800aff0:	d054      	beq.n	800b09c <_dtoa_r+0x59c>
 800aff2:	4929      	ldr	r1, [pc, #164]	@ (800b098 <_dtoa_r+0x598>)
 800aff4:	2000      	movs	r0, #0
 800aff6:	f7f5 fc49 	bl	800088c <__aeabi_ddiv>
 800affa:	4633      	mov	r3, r6
 800affc:	462a      	mov	r2, r5
 800affe:	f7f5 f963 	bl	80002c8 <__aeabi_dsub>
 800b002:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b006:	4656      	mov	r6, sl
 800b008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00c:	f7f5 fdc4 	bl	8000b98 <__aeabi_d2iz>
 800b010:	4605      	mov	r5, r0
 800b012:	f7f5 faa7 	bl	8000564 <__aeabi_i2d>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01e:	f7f5 f953 	bl	80002c8 <__aeabi_dsub>
 800b022:	3530      	adds	r5, #48	@ 0x30
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b02c:	f806 5b01 	strb.w	r5, [r6], #1
 800b030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b034:	f7f5 fd72 	bl	8000b1c <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d172      	bne.n	800b122 <_dtoa_r+0x622>
 800b03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b040:	4911      	ldr	r1, [pc, #68]	@ (800b088 <_dtoa_r+0x588>)
 800b042:	2000      	movs	r0, #0
 800b044:	f7f5 f940 	bl	80002c8 <__aeabi_dsub>
 800b048:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b04c:	f7f5 fd66 	bl	8000b1c <__aeabi_dcmplt>
 800b050:	2800      	cmp	r0, #0
 800b052:	f040 80b4 	bne.w	800b1be <_dtoa_r+0x6be>
 800b056:	42a6      	cmp	r6, r4
 800b058:	f43f af70 	beq.w	800af3c <_dtoa_r+0x43c>
 800b05c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b060:	4b0a      	ldr	r3, [pc, #40]	@ (800b08c <_dtoa_r+0x58c>)
 800b062:	2200      	movs	r2, #0
 800b064:	f7f5 fae8 	bl	8000638 <__aeabi_dmul>
 800b068:	4b08      	ldr	r3, [pc, #32]	@ (800b08c <_dtoa_r+0x58c>)
 800b06a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b06e:	2200      	movs	r2, #0
 800b070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b07c:	e7c4      	b.n	800b008 <_dtoa_r+0x508>
 800b07e:	bf00      	nop
 800b080:	0800d0a0 	.word	0x0800d0a0
 800b084:	0800d078 	.word	0x0800d078
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	40240000 	.word	0x40240000
 800b090:	401c0000 	.word	0x401c0000
 800b094:	40140000 	.word	0x40140000
 800b098:	3fe00000 	.word	0x3fe00000
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f7f5 faca 	bl	8000638 <__aeabi_dmul>
 800b0a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0aa:	4656      	mov	r6, sl
 800b0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0b0:	f7f5 fd72 	bl	8000b98 <__aeabi_d2iz>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	f7f5 fa55 	bl	8000564 <__aeabi_i2d>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c2:	f7f5 f901 	bl	80002c8 <__aeabi_dsub>
 800b0c6:	3530      	adds	r5, #48	@ 0x30
 800b0c8:	f806 5b01 	strb.w	r5, [r6], #1
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	d124      	bne.n	800b126 <_dtoa_r+0x626>
 800b0dc:	4baf      	ldr	r3, [pc, #700]	@ (800b39c <_dtoa_r+0x89c>)
 800b0de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0e2:	f7f5 f8f3 	bl	80002cc <__adddf3>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ee:	f7f5 fd33 	bl	8000b58 <__aeabi_dcmpgt>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d163      	bne.n	800b1be <_dtoa_r+0x6be>
 800b0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0fa:	49a8      	ldr	r1, [pc, #672]	@ (800b39c <_dtoa_r+0x89c>)
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b10a:	f7f5 fd07 	bl	8000b1c <__aeabi_dcmplt>
 800b10e:	2800      	cmp	r0, #0
 800b110:	f43f af14 	beq.w	800af3c <_dtoa_r+0x43c>
 800b114:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b116:	1e73      	subs	r3, r6, #1
 800b118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b11a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b11e:	2b30      	cmp	r3, #48	@ 0x30
 800b120:	d0f8      	beq.n	800b114 <_dtoa_r+0x614>
 800b122:	4647      	mov	r7, r8
 800b124:	e03b      	b.n	800b19e <_dtoa_r+0x69e>
 800b126:	4b9e      	ldr	r3, [pc, #632]	@ (800b3a0 <_dtoa_r+0x8a0>)
 800b128:	f7f5 fa86 	bl	8000638 <__aeabi_dmul>
 800b12c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b130:	e7bc      	b.n	800b0ac <_dtoa_r+0x5ac>
 800b132:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b136:	4656      	mov	r6, sl
 800b138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 fba4 	bl	800088c <__aeabi_ddiv>
 800b144:	f7f5 fd28 	bl	8000b98 <__aeabi_d2iz>
 800b148:	4680      	mov	r8, r0
 800b14a:	f7f5 fa0b 	bl	8000564 <__aeabi_i2d>
 800b14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b152:	f7f5 fa71 	bl	8000638 <__aeabi_dmul>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4620      	mov	r0, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b162:	f7f5 f8b1 	bl	80002c8 <__aeabi_dsub>
 800b166:	f806 4b01 	strb.w	r4, [r6], #1
 800b16a:	9d03      	ldr	r5, [sp, #12]
 800b16c:	eba6 040a 	sub.w	r4, r6, sl
 800b170:	42a5      	cmp	r5, r4
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	d133      	bne.n	800b1e0 <_dtoa_r+0x6e0>
 800b178:	f7f5 f8a8 	bl	80002cc <__adddf3>
 800b17c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b180:	4604      	mov	r4, r0
 800b182:	460d      	mov	r5, r1
 800b184:	f7f5 fce8 	bl	8000b58 <__aeabi_dcmpgt>
 800b188:	b9c0      	cbnz	r0, 800b1bc <_dtoa_r+0x6bc>
 800b18a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b18e:	4620      	mov	r0, r4
 800b190:	4629      	mov	r1, r5
 800b192:	f7f5 fcb9 	bl	8000b08 <__aeabi_dcmpeq>
 800b196:	b110      	cbz	r0, 800b19e <_dtoa_r+0x69e>
 800b198:	f018 0f01 	tst.w	r8, #1
 800b19c:	d10e      	bne.n	800b1bc <_dtoa_r+0x6bc>
 800b19e:	9902      	ldr	r1, [sp, #8]
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f000 fbbd 	bl	800b920 <_Bfree>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	7033      	strb	r3, [r6, #0]
 800b1aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1ac:	3701      	adds	r7, #1
 800b1ae:	601f      	str	r7, [r3, #0]
 800b1b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 824b 	beq.w	800b64e <_dtoa_r+0xb4e>
 800b1b8:	601e      	str	r6, [r3, #0]
 800b1ba:	e248      	b.n	800b64e <_dtoa_r+0xb4e>
 800b1bc:	46b8      	mov	r8, r7
 800b1be:	4633      	mov	r3, r6
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1c6:	2a39      	cmp	r2, #57	@ 0x39
 800b1c8:	d106      	bne.n	800b1d8 <_dtoa_r+0x6d8>
 800b1ca:	459a      	cmp	sl, r3
 800b1cc:	d1f8      	bne.n	800b1c0 <_dtoa_r+0x6c0>
 800b1ce:	2230      	movs	r2, #48	@ 0x30
 800b1d0:	f108 0801 	add.w	r8, r8, #1
 800b1d4:	f88a 2000 	strb.w	r2, [sl]
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	3201      	adds	r2, #1
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	e7a0      	b.n	800b122 <_dtoa_r+0x622>
 800b1e0:	4b6f      	ldr	r3, [pc, #444]	@ (800b3a0 <_dtoa_r+0x8a0>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	f7f5 fc8a 	bl	8000b08 <__aeabi_dcmpeq>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d09f      	beq.n	800b138 <_dtoa_r+0x638>
 800b1f8:	e7d1      	b.n	800b19e <_dtoa_r+0x69e>
 800b1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1fc:	2a00      	cmp	r2, #0
 800b1fe:	f000 80ea 	beq.w	800b3d6 <_dtoa_r+0x8d6>
 800b202:	9a07      	ldr	r2, [sp, #28]
 800b204:	2a01      	cmp	r2, #1
 800b206:	f300 80cd 	bgt.w	800b3a4 <_dtoa_r+0x8a4>
 800b20a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b20c:	2a00      	cmp	r2, #0
 800b20e:	f000 80c1 	beq.w	800b394 <_dtoa_r+0x894>
 800b212:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b216:	9c08      	ldr	r4, [sp, #32]
 800b218:	9e00      	ldr	r6, [sp, #0]
 800b21a:	9a00      	ldr	r2, [sp, #0]
 800b21c:	441a      	add	r2, r3
 800b21e:	9200      	str	r2, [sp, #0]
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	2101      	movs	r1, #1
 800b224:	441a      	add	r2, r3
 800b226:	4648      	mov	r0, r9
 800b228:	9206      	str	r2, [sp, #24]
 800b22a:	f000 fc2d 	bl	800ba88 <__i2b>
 800b22e:	4605      	mov	r5, r0
 800b230:	b166      	cbz	r6, 800b24c <_dtoa_r+0x74c>
 800b232:	9b06      	ldr	r3, [sp, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd09      	ble.n	800b24c <_dtoa_r+0x74c>
 800b238:	42b3      	cmp	r3, r6
 800b23a:	9a00      	ldr	r2, [sp, #0]
 800b23c:	bfa8      	it	ge
 800b23e:	4633      	movge	r3, r6
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	9200      	str	r2, [sp, #0]
 800b244:	9a06      	ldr	r2, [sp, #24]
 800b246:	1af6      	subs	r6, r6, r3
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	9306      	str	r3, [sp, #24]
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	b30b      	cbz	r3, 800b294 <_dtoa_r+0x794>
 800b250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 80c6 	beq.w	800b3e4 <_dtoa_r+0x8e4>
 800b258:	2c00      	cmp	r4, #0
 800b25a:	f000 80c0 	beq.w	800b3de <_dtoa_r+0x8de>
 800b25e:	4629      	mov	r1, r5
 800b260:	4622      	mov	r2, r4
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fcc8 	bl	800bbf8 <__pow5mult>
 800b268:	9a02      	ldr	r2, [sp, #8]
 800b26a:	4601      	mov	r1, r0
 800b26c:	4605      	mov	r5, r0
 800b26e:	4648      	mov	r0, r9
 800b270:	f000 fc20 	bl	800bab4 <__multiply>
 800b274:	9902      	ldr	r1, [sp, #8]
 800b276:	4680      	mov	r8, r0
 800b278:	4648      	mov	r0, r9
 800b27a:	f000 fb51 	bl	800b920 <_Bfree>
 800b27e:	9b08      	ldr	r3, [sp, #32]
 800b280:	1b1b      	subs	r3, r3, r4
 800b282:	9308      	str	r3, [sp, #32]
 800b284:	f000 80b1 	beq.w	800b3ea <_dtoa_r+0x8ea>
 800b288:	9a08      	ldr	r2, [sp, #32]
 800b28a:	4641      	mov	r1, r8
 800b28c:	4648      	mov	r0, r9
 800b28e:	f000 fcb3 	bl	800bbf8 <__pow5mult>
 800b292:	9002      	str	r0, [sp, #8]
 800b294:	2101      	movs	r1, #1
 800b296:	4648      	mov	r0, r9
 800b298:	f000 fbf6 	bl	800ba88 <__i2b>
 800b29c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b29e:	4604      	mov	r4, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 81d8 	beq.w	800b656 <_dtoa_r+0xb56>
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4648      	mov	r0, r9
 800b2ac:	f000 fca4 	bl	800bbf8 <__pow5mult>
 800b2b0:	9b07      	ldr	r3, [sp, #28]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	f300 809f 	bgt.w	800b3f8 <_dtoa_r+0x8f8>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f040 8097 	bne.w	800b3f0 <_dtoa_r+0x8f0>
 800b2c2:	9b05      	ldr	r3, [sp, #20]
 800b2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f040 8093 	bne.w	800b3f4 <_dtoa_r+0x8f4>
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2d4:	0d1b      	lsrs	r3, r3, #20
 800b2d6:	051b      	lsls	r3, r3, #20
 800b2d8:	b133      	cbz	r3, 800b2e8 <_dtoa_r+0x7e8>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	9b06      	ldr	r3, [sp, #24]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9306      	str	r3, [sp, #24]
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 81b8 	beq.w	800b662 <_dtoa_r+0xb62>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f8:	6918      	ldr	r0, [r3, #16]
 800b2fa:	f000 fb79 	bl	800b9f0 <__hi0bits>
 800b2fe:	f1c0 0020 	rsb	r0, r0, #32
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	4418      	add	r0, r3
 800b306:	f010 001f 	ands.w	r0, r0, #31
 800b30a:	f000 8082 	beq.w	800b412 <_dtoa_r+0x912>
 800b30e:	f1c0 0320 	rsb	r3, r0, #32
 800b312:	2b04      	cmp	r3, #4
 800b314:	dd73      	ble.n	800b3fe <_dtoa_r+0x8fe>
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	f1c0 001c 	rsb	r0, r0, #28
 800b31c:	4403      	add	r3, r0
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	4403      	add	r3, r0
 800b324:	4406      	add	r6, r0
 800b326:	9306      	str	r3, [sp, #24]
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dd05      	ble.n	800b33a <_dtoa_r+0x83a>
 800b32e:	9902      	ldr	r1, [sp, #8]
 800b330:	461a      	mov	r2, r3
 800b332:	4648      	mov	r0, r9
 800b334:	f000 fcba 	bl	800bcac <__lshift>
 800b338:	9002      	str	r0, [sp, #8]
 800b33a:	9b06      	ldr	r3, [sp, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd05      	ble.n	800b34c <_dtoa_r+0x84c>
 800b340:	4621      	mov	r1, r4
 800b342:	461a      	mov	r2, r3
 800b344:	4648      	mov	r0, r9
 800b346:	f000 fcb1 	bl	800bcac <__lshift>
 800b34a:	4604      	mov	r4, r0
 800b34c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d061      	beq.n	800b416 <_dtoa_r+0x916>
 800b352:	9802      	ldr	r0, [sp, #8]
 800b354:	4621      	mov	r1, r4
 800b356:	f000 fd15 	bl	800bd84 <__mcmp>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	da5b      	bge.n	800b416 <_dtoa_r+0x916>
 800b35e:	2300      	movs	r3, #0
 800b360:	9902      	ldr	r1, [sp, #8]
 800b362:	220a      	movs	r2, #10
 800b364:	4648      	mov	r0, r9
 800b366:	f000 fafd 	bl	800b964 <__multadd>
 800b36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8177 	beq.w	800b666 <_dtoa_r+0xb66>
 800b378:	4629      	mov	r1, r5
 800b37a:	2300      	movs	r3, #0
 800b37c:	220a      	movs	r2, #10
 800b37e:	4648      	mov	r0, r9
 800b380:	f000 faf0 	bl	800b964 <__multadd>
 800b384:	f1bb 0f00 	cmp.w	fp, #0
 800b388:	4605      	mov	r5, r0
 800b38a:	dc6f      	bgt.n	800b46c <_dtoa_r+0x96c>
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	dc49      	bgt.n	800b426 <_dtoa_r+0x926>
 800b392:	e06b      	b.n	800b46c <_dtoa_r+0x96c>
 800b394:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b39a:	e73c      	b.n	800b216 <_dtoa_r+0x716>
 800b39c:	3fe00000 	.word	0x3fe00000
 800b3a0:	40240000 	.word	0x40240000
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	1e5c      	subs	r4, r3, #1
 800b3a8:	9b08      	ldr	r3, [sp, #32]
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	db09      	blt.n	800b3c2 <_dtoa_r+0x8c2>
 800b3ae:	1b1c      	subs	r4, r3, r4
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f6bf af30 	bge.w	800b218 <_dtoa_r+0x718>
 800b3b8:	9b00      	ldr	r3, [sp, #0]
 800b3ba:	9a03      	ldr	r2, [sp, #12]
 800b3bc:	1a9e      	subs	r6, r3, r2
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e72b      	b.n	800b21a <_dtoa_r+0x71a>
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3c6:	9408      	str	r4, [sp, #32]
 800b3c8:	1ae3      	subs	r3, r4, r3
 800b3ca:	441a      	add	r2, r3
 800b3cc:	9e00      	ldr	r6, [sp, #0]
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3d2:	2400      	movs	r4, #0
 800b3d4:	e721      	b.n	800b21a <_dtoa_r+0x71a>
 800b3d6:	9c08      	ldr	r4, [sp, #32]
 800b3d8:	9e00      	ldr	r6, [sp, #0]
 800b3da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3dc:	e728      	b.n	800b230 <_dtoa_r+0x730>
 800b3de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3e2:	e751      	b.n	800b288 <_dtoa_r+0x788>
 800b3e4:	9a08      	ldr	r2, [sp, #32]
 800b3e6:	9902      	ldr	r1, [sp, #8]
 800b3e8:	e750      	b.n	800b28c <_dtoa_r+0x78c>
 800b3ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3ee:	e751      	b.n	800b294 <_dtoa_r+0x794>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e779      	b.n	800b2e8 <_dtoa_r+0x7e8>
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	e777      	b.n	800b2e8 <_dtoa_r+0x7e8>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	e779      	b.n	800b2f2 <_dtoa_r+0x7f2>
 800b3fe:	d093      	beq.n	800b328 <_dtoa_r+0x828>
 800b400:	9a00      	ldr	r2, [sp, #0]
 800b402:	331c      	adds	r3, #28
 800b404:	441a      	add	r2, r3
 800b406:	9200      	str	r2, [sp, #0]
 800b408:	9a06      	ldr	r2, [sp, #24]
 800b40a:	441a      	add	r2, r3
 800b40c:	441e      	add	r6, r3
 800b40e:	9206      	str	r2, [sp, #24]
 800b410:	e78a      	b.n	800b328 <_dtoa_r+0x828>
 800b412:	4603      	mov	r3, r0
 800b414:	e7f4      	b.n	800b400 <_dtoa_r+0x900>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	46b8      	mov	r8, r7
 800b41c:	dc20      	bgt.n	800b460 <_dtoa_r+0x960>
 800b41e:	469b      	mov	fp, r3
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	2b02      	cmp	r3, #2
 800b424:	dd1e      	ble.n	800b464 <_dtoa_r+0x964>
 800b426:	f1bb 0f00 	cmp.w	fp, #0
 800b42a:	f47f adb1 	bne.w	800af90 <_dtoa_r+0x490>
 800b42e:	4621      	mov	r1, r4
 800b430:	465b      	mov	r3, fp
 800b432:	2205      	movs	r2, #5
 800b434:	4648      	mov	r0, r9
 800b436:	f000 fa95 	bl	800b964 <__multadd>
 800b43a:	4601      	mov	r1, r0
 800b43c:	4604      	mov	r4, r0
 800b43e:	9802      	ldr	r0, [sp, #8]
 800b440:	f000 fca0 	bl	800bd84 <__mcmp>
 800b444:	2800      	cmp	r0, #0
 800b446:	f77f ada3 	ble.w	800af90 <_dtoa_r+0x490>
 800b44a:	4656      	mov	r6, sl
 800b44c:	2331      	movs	r3, #49	@ 0x31
 800b44e:	f806 3b01 	strb.w	r3, [r6], #1
 800b452:	f108 0801 	add.w	r8, r8, #1
 800b456:	e59f      	b.n	800af98 <_dtoa_r+0x498>
 800b458:	9c03      	ldr	r4, [sp, #12]
 800b45a:	46b8      	mov	r8, r7
 800b45c:	4625      	mov	r5, r4
 800b45e:	e7f4      	b.n	800b44a <_dtoa_r+0x94a>
 800b460:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 8101 	beq.w	800b66e <_dtoa_r+0xb6e>
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	dd05      	ble.n	800b47c <_dtoa_r+0x97c>
 800b470:	4629      	mov	r1, r5
 800b472:	4632      	mov	r2, r6
 800b474:	4648      	mov	r0, r9
 800b476:	f000 fc19 	bl	800bcac <__lshift>
 800b47a:	4605      	mov	r5, r0
 800b47c:	9b08      	ldr	r3, [sp, #32]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d05c      	beq.n	800b53c <_dtoa_r+0xa3c>
 800b482:	6869      	ldr	r1, [r5, #4]
 800b484:	4648      	mov	r0, r9
 800b486:	f000 fa0b 	bl	800b8a0 <_Balloc>
 800b48a:	4606      	mov	r6, r0
 800b48c:	b928      	cbnz	r0, 800b49a <_dtoa_r+0x99a>
 800b48e:	4b82      	ldr	r3, [pc, #520]	@ (800b698 <_dtoa_r+0xb98>)
 800b490:	4602      	mov	r2, r0
 800b492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b496:	f7ff bb4a 	b.w	800ab2e <_dtoa_r+0x2e>
 800b49a:	692a      	ldr	r2, [r5, #16]
 800b49c:	3202      	adds	r2, #2
 800b49e:	0092      	lsls	r2, r2, #2
 800b4a0:	f105 010c 	add.w	r1, r5, #12
 800b4a4:	300c      	adds	r0, #12
 800b4a6:	f7ff fa92 	bl	800a9ce <memcpy>
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4648      	mov	r0, r9
 800b4b0:	f000 fbfc 	bl	800bcac <__lshift>
 800b4b4:	f10a 0301 	add.w	r3, sl, #1
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	eb0a 030b 	add.w	r3, sl, fp
 800b4be:	9308      	str	r3, [sp, #32]
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	462f      	mov	r7, r5
 800b4c8:	9306      	str	r3, [sp, #24]
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	9802      	ldr	r0, [sp, #8]
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4d6:	f7ff fa88 	bl	800a9ea <quorem>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	3330      	adds	r3, #48	@ 0x30
 800b4de:	9003      	str	r0, [sp, #12]
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	9802      	ldr	r0, [sp, #8]
 800b4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e6:	f000 fc4d 	bl	800bd84 <__mcmp>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	9004      	str	r0, [sp, #16]
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4648      	mov	r0, r9
 800b4f2:	f000 fc63 	bl	800bdbc <__mdiff>
 800b4f6:	68c2      	ldr	r2, [r0, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	bb02      	cbnz	r2, 800b540 <_dtoa_r+0xa40>
 800b4fe:	4601      	mov	r1, r0
 800b500:	9802      	ldr	r0, [sp, #8]
 800b502:	f000 fc3f 	bl	800bd84 <__mcmp>
 800b506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b508:	4602      	mov	r2, r0
 800b50a:	4631      	mov	r1, r6
 800b50c:	4648      	mov	r0, r9
 800b50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b510:	9309      	str	r3, [sp, #36]	@ 0x24
 800b512:	f000 fa05 	bl	800b920 <_Bfree>
 800b516:	9b07      	ldr	r3, [sp, #28]
 800b518:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b51a:	9e00      	ldr	r6, [sp, #0]
 800b51c:	ea42 0103 	orr.w	r1, r2, r3
 800b520:	9b06      	ldr	r3, [sp, #24]
 800b522:	4319      	orrs	r1, r3
 800b524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b526:	d10d      	bne.n	800b544 <_dtoa_r+0xa44>
 800b528:	2b39      	cmp	r3, #57	@ 0x39
 800b52a:	d027      	beq.n	800b57c <_dtoa_r+0xa7c>
 800b52c:	9a04      	ldr	r2, [sp, #16]
 800b52e:	2a00      	cmp	r2, #0
 800b530:	dd01      	ble.n	800b536 <_dtoa_r+0xa36>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	3331      	adds	r3, #49	@ 0x31
 800b536:	f88b 3000 	strb.w	r3, [fp]
 800b53a:	e52e      	b.n	800af9a <_dtoa_r+0x49a>
 800b53c:	4628      	mov	r0, r5
 800b53e:	e7b9      	b.n	800b4b4 <_dtoa_r+0x9b4>
 800b540:	2201      	movs	r2, #1
 800b542:	e7e2      	b.n	800b50a <_dtoa_r+0xa0a>
 800b544:	9904      	ldr	r1, [sp, #16]
 800b546:	2900      	cmp	r1, #0
 800b548:	db04      	blt.n	800b554 <_dtoa_r+0xa54>
 800b54a:	9807      	ldr	r0, [sp, #28]
 800b54c:	4301      	orrs	r1, r0
 800b54e:	9806      	ldr	r0, [sp, #24]
 800b550:	4301      	orrs	r1, r0
 800b552:	d120      	bne.n	800b596 <_dtoa_r+0xa96>
 800b554:	2a00      	cmp	r2, #0
 800b556:	ddee      	ble.n	800b536 <_dtoa_r+0xa36>
 800b558:	9902      	ldr	r1, [sp, #8]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2201      	movs	r2, #1
 800b55e:	4648      	mov	r0, r9
 800b560:	f000 fba4 	bl	800bcac <__lshift>
 800b564:	4621      	mov	r1, r4
 800b566:	9002      	str	r0, [sp, #8]
 800b568:	f000 fc0c 	bl	800bd84 <__mcmp>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	dc02      	bgt.n	800b578 <_dtoa_r+0xa78>
 800b572:	d1e0      	bne.n	800b536 <_dtoa_r+0xa36>
 800b574:	07da      	lsls	r2, r3, #31
 800b576:	d5de      	bpl.n	800b536 <_dtoa_r+0xa36>
 800b578:	2b39      	cmp	r3, #57	@ 0x39
 800b57a:	d1da      	bne.n	800b532 <_dtoa_r+0xa32>
 800b57c:	2339      	movs	r3, #57	@ 0x39
 800b57e:	f88b 3000 	strb.w	r3, [fp]
 800b582:	4633      	mov	r3, r6
 800b584:	461e      	mov	r6, r3
 800b586:	3b01      	subs	r3, #1
 800b588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b58c:	2a39      	cmp	r2, #57	@ 0x39
 800b58e:	d04e      	beq.n	800b62e <_dtoa_r+0xb2e>
 800b590:	3201      	adds	r2, #1
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	e501      	b.n	800af9a <_dtoa_r+0x49a>
 800b596:	2a00      	cmp	r2, #0
 800b598:	dd03      	ble.n	800b5a2 <_dtoa_r+0xaa2>
 800b59a:	2b39      	cmp	r3, #57	@ 0x39
 800b59c:	d0ee      	beq.n	800b57c <_dtoa_r+0xa7c>
 800b59e:	3301      	adds	r3, #1
 800b5a0:	e7c9      	b.n	800b536 <_dtoa_r+0xa36>
 800b5a2:	9a00      	ldr	r2, [sp, #0]
 800b5a4:	9908      	ldr	r1, [sp, #32]
 800b5a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5aa:	428a      	cmp	r2, r1
 800b5ac:	d028      	beq.n	800b600 <_dtoa_r+0xb00>
 800b5ae:	9902      	ldr	r1, [sp, #8]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	220a      	movs	r2, #10
 800b5b4:	4648      	mov	r0, r9
 800b5b6:	f000 f9d5 	bl	800b964 <__multadd>
 800b5ba:	42af      	cmp	r7, r5
 800b5bc:	9002      	str	r0, [sp, #8]
 800b5be:	f04f 0300 	mov.w	r3, #0
 800b5c2:	f04f 020a 	mov.w	r2, #10
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	4648      	mov	r0, r9
 800b5ca:	d107      	bne.n	800b5dc <_dtoa_r+0xadc>
 800b5cc:	f000 f9ca 	bl	800b964 <__multadd>
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	e777      	b.n	800b4cc <_dtoa_r+0x9cc>
 800b5dc:	f000 f9c2 	bl	800b964 <__multadd>
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4607      	mov	r7, r0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	220a      	movs	r2, #10
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f000 f9bb 	bl	800b964 <__multadd>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	e7f0      	b.n	800b5d4 <_dtoa_r+0xad4>
 800b5f2:	f1bb 0f00 	cmp.w	fp, #0
 800b5f6:	bfcc      	ite	gt
 800b5f8:	465e      	movgt	r6, fp
 800b5fa:	2601      	movle	r6, #1
 800b5fc:	4456      	add	r6, sl
 800b5fe:	2700      	movs	r7, #0
 800b600:	9902      	ldr	r1, [sp, #8]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	2201      	movs	r2, #1
 800b606:	4648      	mov	r0, r9
 800b608:	f000 fb50 	bl	800bcac <__lshift>
 800b60c:	4621      	mov	r1, r4
 800b60e:	9002      	str	r0, [sp, #8]
 800b610:	f000 fbb8 	bl	800bd84 <__mcmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	dcb4      	bgt.n	800b582 <_dtoa_r+0xa82>
 800b618:	d102      	bne.n	800b620 <_dtoa_r+0xb20>
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	07db      	lsls	r3, r3, #31
 800b61e:	d4b0      	bmi.n	800b582 <_dtoa_r+0xa82>
 800b620:	4633      	mov	r3, r6
 800b622:	461e      	mov	r6, r3
 800b624:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b628:	2a30      	cmp	r2, #48	@ 0x30
 800b62a:	d0fa      	beq.n	800b622 <_dtoa_r+0xb22>
 800b62c:	e4b5      	b.n	800af9a <_dtoa_r+0x49a>
 800b62e:	459a      	cmp	sl, r3
 800b630:	d1a8      	bne.n	800b584 <_dtoa_r+0xa84>
 800b632:	2331      	movs	r3, #49	@ 0x31
 800b634:	f108 0801 	add.w	r8, r8, #1
 800b638:	f88a 3000 	strb.w	r3, [sl]
 800b63c:	e4ad      	b.n	800af9a <_dtoa_r+0x49a>
 800b63e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b640:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b69c <_dtoa_r+0xb9c>
 800b644:	b11b      	cbz	r3, 800b64e <_dtoa_r+0xb4e>
 800b646:	f10a 0308 	add.w	r3, sl, #8
 800b64a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	4650      	mov	r0, sl
 800b650:	b017      	add	sp, #92	@ 0x5c
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f77f ae2e 	ble.w	800b2ba <_dtoa_r+0x7ba>
 800b65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b660:	9308      	str	r3, [sp, #32]
 800b662:	2001      	movs	r0, #1
 800b664:	e64d      	b.n	800b302 <_dtoa_r+0x802>
 800b666:	f1bb 0f00 	cmp.w	fp, #0
 800b66a:	f77f aed9 	ble.w	800b420 <_dtoa_r+0x920>
 800b66e:	4656      	mov	r6, sl
 800b670:	9802      	ldr	r0, [sp, #8]
 800b672:	4621      	mov	r1, r4
 800b674:	f7ff f9b9 	bl	800a9ea <quorem>
 800b678:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b67c:	f806 3b01 	strb.w	r3, [r6], #1
 800b680:	eba6 020a 	sub.w	r2, r6, sl
 800b684:	4593      	cmp	fp, r2
 800b686:	ddb4      	ble.n	800b5f2 <_dtoa_r+0xaf2>
 800b688:	9902      	ldr	r1, [sp, #8]
 800b68a:	2300      	movs	r3, #0
 800b68c:	220a      	movs	r2, #10
 800b68e:	4648      	mov	r0, r9
 800b690:	f000 f968 	bl	800b964 <__multadd>
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	e7eb      	b.n	800b670 <_dtoa_r+0xb70>
 800b698:	0800cfa8 	.word	0x0800cfa8
 800b69c:	0800cf2c 	.word	0x0800cf2c

0800b6a0 <_free_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	d041      	beq.n	800b72c <_free_r+0x8c>
 800b6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ac:	1f0c      	subs	r4, r1, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bfb8      	it	lt
 800b6b2:	18e4      	addlt	r4, r4, r3
 800b6b4:	f000 f8e8 	bl	800b888 <__malloc_lock>
 800b6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b730 <_free_r+0x90>)
 800b6ba:	6813      	ldr	r3, [r2, #0]
 800b6bc:	b933      	cbnz	r3, 800b6cc <_free_r+0x2c>
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	6014      	str	r4, [r2, #0]
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c8:	f000 b8e4 	b.w	800b894 <__malloc_unlock>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d908      	bls.n	800b6e2 <_free_r+0x42>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	1821      	adds	r1, r4, r0
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	bf01      	itttt	eq
 800b6d8:	6819      	ldreq	r1, [r3, #0]
 800b6da:	685b      	ldreq	r3, [r3, #4]
 800b6dc:	1809      	addeq	r1, r1, r0
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	e7ed      	b.n	800b6be <_free_r+0x1e>
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	b10b      	cbz	r3, 800b6ec <_free_r+0x4c>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d9fa      	bls.n	800b6e2 <_free_r+0x42>
 800b6ec:	6811      	ldr	r1, [r2, #0]
 800b6ee:	1850      	adds	r0, r2, r1
 800b6f0:	42a0      	cmp	r0, r4
 800b6f2:	d10b      	bne.n	800b70c <_free_r+0x6c>
 800b6f4:	6820      	ldr	r0, [r4, #0]
 800b6f6:	4401      	add	r1, r0
 800b6f8:	1850      	adds	r0, r2, r1
 800b6fa:	4283      	cmp	r3, r0
 800b6fc:	6011      	str	r1, [r2, #0]
 800b6fe:	d1e0      	bne.n	800b6c2 <_free_r+0x22>
 800b700:	6818      	ldr	r0, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	6053      	str	r3, [r2, #4]
 800b706:	4408      	add	r0, r1
 800b708:	6010      	str	r0, [r2, #0]
 800b70a:	e7da      	b.n	800b6c2 <_free_r+0x22>
 800b70c:	d902      	bls.n	800b714 <_free_r+0x74>
 800b70e:	230c      	movs	r3, #12
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	e7d6      	b.n	800b6c2 <_free_r+0x22>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	1821      	adds	r1, r4, r0
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf04      	itt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	bf04      	itt	eq
 800b724:	1809      	addeq	r1, r1, r0
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	6054      	str	r4, [r2, #4]
 800b72a:	e7ca      	b.n	800b6c2 <_free_r+0x22>
 800b72c:	bd38      	pop	{r3, r4, r5, pc}
 800b72e:	bf00      	nop
 800b730:	2000534c 	.word	0x2000534c

0800b734 <malloc>:
 800b734:	4b02      	ldr	r3, [pc, #8]	@ (800b740 <malloc+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 b825 	b.w	800b788 <_malloc_r>
 800b73e:	bf00      	nop
 800b740:	20000024 	.word	0x20000024

0800b744 <sbrk_aligned>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	4e0f      	ldr	r6, [pc, #60]	@ (800b784 <sbrk_aligned+0x40>)
 800b748:	460c      	mov	r4, r1
 800b74a:	6831      	ldr	r1, [r6, #0]
 800b74c:	4605      	mov	r5, r0
 800b74e:	b911      	cbnz	r1, 800b756 <sbrk_aligned+0x12>
 800b750:	f000 fe3e 	bl	800c3d0 <_sbrk_r>
 800b754:	6030      	str	r0, [r6, #0]
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 fe39 	bl	800c3d0 <_sbrk_r>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d103      	bne.n	800b76a <sbrk_aligned+0x26>
 800b762:	f04f 34ff 	mov.w	r4, #4294967295
 800b766:	4620      	mov	r0, r4
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	1cc4      	adds	r4, r0, #3
 800b76c:	f024 0403 	bic.w	r4, r4, #3
 800b770:	42a0      	cmp	r0, r4
 800b772:	d0f8      	beq.n	800b766 <sbrk_aligned+0x22>
 800b774:	1a21      	subs	r1, r4, r0
 800b776:	4628      	mov	r0, r5
 800b778:	f000 fe2a 	bl	800c3d0 <_sbrk_r>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d1f2      	bne.n	800b766 <sbrk_aligned+0x22>
 800b780:	e7ef      	b.n	800b762 <sbrk_aligned+0x1e>
 800b782:	bf00      	nop
 800b784:	20005348 	.word	0x20005348

0800b788 <_malloc_r>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	1ccd      	adds	r5, r1, #3
 800b78e:	f025 0503 	bic.w	r5, r5, #3
 800b792:	3508      	adds	r5, #8
 800b794:	2d0c      	cmp	r5, #12
 800b796:	bf38      	it	cc
 800b798:	250c      	movcc	r5, #12
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	4606      	mov	r6, r0
 800b79e:	db01      	blt.n	800b7a4 <_malloc_r+0x1c>
 800b7a0:	42a9      	cmp	r1, r5
 800b7a2:	d904      	bls.n	800b7ae <_malloc_r+0x26>
 800b7a4:	230c      	movs	r3, #12
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b884 <_malloc_r+0xfc>
 800b7b2:	f000 f869 	bl	800b888 <__malloc_lock>
 800b7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ba:	461c      	mov	r4, r3
 800b7bc:	bb44      	cbnz	r4, 800b810 <_malloc_r+0x88>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff ffbf 	bl	800b744 <sbrk_aligned>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	d158      	bne.n	800b87e <_malloc_r+0xf6>
 800b7cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b7d0:	4627      	mov	r7, r4
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	d143      	bne.n	800b85e <_malloc_r+0xd6>
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	d04b      	beq.n	800b872 <_malloc_r+0xea>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4639      	mov	r1, r7
 800b7de:	4630      	mov	r0, r6
 800b7e0:	eb04 0903 	add.w	r9, r4, r3
 800b7e4:	f000 fdf4 	bl	800c3d0 <_sbrk_r>
 800b7e8:	4581      	cmp	r9, r0
 800b7ea:	d142      	bne.n	800b872 <_malloc_r+0xea>
 800b7ec:	6821      	ldr	r1, [r4, #0]
 800b7ee:	1a6d      	subs	r5, r5, r1
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7ff ffa6 	bl	800b744 <sbrk_aligned>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	d03a      	beq.n	800b872 <_malloc_r+0xea>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	442b      	add	r3, r5
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	f8d8 3000 	ldr.w	r3, [r8]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	bb62      	cbnz	r2, 800b864 <_malloc_r+0xdc>
 800b80a:	f8c8 7000 	str.w	r7, [r8]
 800b80e:	e00f      	b.n	800b830 <_malloc_r+0xa8>
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	1b52      	subs	r2, r2, r5
 800b814:	d420      	bmi.n	800b858 <_malloc_r+0xd0>
 800b816:	2a0b      	cmp	r2, #11
 800b818:	d917      	bls.n	800b84a <_malloc_r+0xc2>
 800b81a:	1961      	adds	r1, r4, r5
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	6025      	str	r5, [r4, #0]
 800b820:	bf18      	it	ne
 800b822:	6059      	strne	r1, [r3, #4]
 800b824:	6863      	ldr	r3, [r4, #4]
 800b826:	bf08      	it	eq
 800b828:	f8c8 1000 	streq.w	r1, [r8]
 800b82c:	5162      	str	r2, [r4, r5]
 800b82e:	604b      	str	r3, [r1, #4]
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f82f 	bl	800b894 <__malloc_unlock>
 800b836:	f104 000b 	add.w	r0, r4, #11
 800b83a:	1d23      	adds	r3, r4, #4
 800b83c:	f020 0007 	bic.w	r0, r0, #7
 800b840:	1ac2      	subs	r2, r0, r3
 800b842:	bf1c      	itt	ne
 800b844:	1a1b      	subne	r3, r3, r0
 800b846:	50a3      	strne	r3, [r4, r2]
 800b848:	e7af      	b.n	800b7aa <_malloc_r+0x22>
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	bf0c      	ite	eq
 800b850:	f8c8 2000 	streq.w	r2, [r8]
 800b854:	605a      	strne	r2, [r3, #4]
 800b856:	e7eb      	b.n	800b830 <_malloc_r+0xa8>
 800b858:	4623      	mov	r3, r4
 800b85a:	6864      	ldr	r4, [r4, #4]
 800b85c:	e7ae      	b.n	800b7bc <_malloc_r+0x34>
 800b85e:	463c      	mov	r4, r7
 800b860:	687f      	ldr	r7, [r7, #4]
 800b862:	e7b6      	b.n	800b7d2 <_malloc_r+0x4a>
 800b864:	461a      	mov	r2, r3
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	42a3      	cmp	r3, r4
 800b86a:	d1fb      	bne.n	800b864 <_malloc_r+0xdc>
 800b86c:	2300      	movs	r3, #0
 800b86e:	6053      	str	r3, [r2, #4]
 800b870:	e7de      	b.n	800b830 <_malloc_r+0xa8>
 800b872:	230c      	movs	r3, #12
 800b874:	6033      	str	r3, [r6, #0]
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f80c 	bl	800b894 <__malloc_unlock>
 800b87c:	e794      	b.n	800b7a8 <_malloc_r+0x20>
 800b87e:	6005      	str	r5, [r0, #0]
 800b880:	e7d6      	b.n	800b830 <_malloc_r+0xa8>
 800b882:	bf00      	nop
 800b884:	2000534c 	.word	0x2000534c

0800b888 <__malloc_lock>:
 800b888:	4801      	ldr	r0, [pc, #4]	@ (800b890 <__malloc_lock+0x8>)
 800b88a:	f7ff b89e 	b.w	800a9ca <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	20005344 	.word	0x20005344

0800b894 <__malloc_unlock>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__malloc_unlock+0x8>)
 800b896:	f7ff b899 	b.w	800a9cc <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	20005344 	.word	0x20005344

0800b8a0 <_Balloc>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	69c6      	ldr	r6, [r0, #28]
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	b976      	cbnz	r6, 800b8c8 <_Balloc+0x28>
 800b8aa:	2010      	movs	r0, #16
 800b8ac:	f7ff ff42 	bl	800b734 <malloc>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	61e0      	str	r0, [r4, #28]
 800b8b4:	b920      	cbnz	r0, 800b8c0 <_Balloc+0x20>
 800b8b6:	4b18      	ldr	r3, [pc, #96]	@ (800b918 <_Balloc+0x78>)
 800b8b8:	4818      	ldr	r0, [pc, #96]	@ (800b91c <_Balloc+0x7c>)
 800b8ba:	216b      	movs	r1, #107	@ 0x6b
 800b8bc:	f000 fd98 	bl	800c3f0 <__assert_func>
 800b8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c4:	6006      	str	r6, [r0, #0]
 800b8c6:	60c6      	str	r6, [r0, #12]
 800b8c8:	69e6      	ldr	r6, [r4, #28]
 800b8ca:	68f3      	ldr	r3, [r6, #12]
 800b8cc:	b183      	cbz	r3, 800b8f0 <_Balloc+0x50>
 800b8ce:	69e3      	ldr	r3, [r4, #28]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8d6:	b9b8      	cbnz	r0, 800b908 <_Balloc+0x68>
 800b8d8:	2101      	movs	r1, #1
 800b8da:	fa01 f605 	lsl.w	r6, r1, r5
 800b8de:	1d72      	adds	r2, r6, #5
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fda2 	bl	800c42c <_calloc_r>
 800b8e8:	b160      	cbz	r0, 800b904 <_Balloc+0x64>
 800b8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ee:	e00e      	b.n	800b90e <_Balloc+0x6e>
 800b8f0:	2221      	movs	r2, #33	@ 0x21
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fd99 	bl	800c42c <_calloc_r>
 800b8fa:	69e3      	ldr	r3, [r4, #28]
 800b8fc:	60f0      	str	r0, [r6, #12]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e4      	bne.n	800b8ce <_Balloc+0x2e>
 800b904:	2000      	movs	r0, #0
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	6802      	ldr	r2, [r0, #0]
 800b90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b90e:	2300      	movs	r3, #0
 800b910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b914:	e7f7      	b.n	800b906 <_Balloc+0x66>
 800b916:	bf00      	nop
 800b918:	0800cf39 	.word	0x0800cf39
 800b91c:	0800cfb9 	.word	0x0800cfb9

0800b920 <_Bfree>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	69c6      	ldr	r6, [r0, #28]
 800b924:	4605      	mov	r5, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b976      	cbnz	r6, 800b948 <_Bfree+0x28>
 800b92a:	2010      	movs	r0, #16
 800b92c:	f7ff ff02 	bl	800b734 <malloc>
 800b930:	4602      	mov	r2, r0
 800b932:	61e8      	str	r0, [r5, #28]
 800b934:	b920      	cbnz	r0, 800b940 <_Bfree+0x20>
 800b936:	4b09      	ldr	r3, [pc, #36]	@ (800b95c <_Bfree+0x3c>)
 800b938:	4809      	ldr	r0, [pc, #36]	@ (800b960 <_Bfree+0x40>)
 800b93a:	218f      	movs	r1, #143	@ 0x8f
 800b93c:	f000 fd58 	bl	800c3f0 <__assert_func>
 800b940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b944:	6006      	str	r6, [r0, #0]
 800b946:	60c6      	str	r6, [r0, #12]
 800b948:	b13c      	cbz	r4, 800b95a <_Bfree+0x3a>
 800b94a:	69eb      	ldr	r3, [r5, #28]
 800b94c:	6862      	ldr	r2, [r4, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b954:	6021      	str	r1, [r4, #0]
 800b956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	0800cf39 	.word	0x0800cf39
 800b960:	0800cfb9 	.word	0x0800cfb9

0800b964 <__multadd>:
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	690d      	ldr	r5, [r1, #16]
 800b96a:	4607      	mov	r7, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	461e      	mov	r6, r3
 800b970:	f101 0c14 	add.w	ip, r1, #20
 800b974:	2000      	movs	r0, #0
 800b976:	f8dc 3000 	ldr.w	r3, [ip]
 800b97a:	b299      	uxth	r1, r3
 800b97c:	fb02 6101 	mla	r1, r2, r1, r6
 800b980:	0c1e      	lsrs	r6, r3, #16
 800b982:	0c0b      	lsrs	r3, r1, #16
 800b984:	fb02 3306 	mla	r3, r2, r6, r3
 800b988:	b289      	uxth	r1, r1
 800b98a:	3001      	adds	r0, #1
 800b98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b990:	4285      	cmp	r5, r0
 800b992:	f84c 1b04 	str.w	r1, [ip], #4
 800b996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b99a:	dcec      	bgt.n	800b976 <__multadd+0x12>
 800b99c:	b30e      	cbz	r6, 800b9e2 <__multadd+0x7e>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	dc19      	bgt.n	800b9d8 <__multadd+0x74>
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	3101      	adds	r1, #1
 800b9aa:	f7ff ff79 	bl	800b8a0 <_Balloc>
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <__multadd+0x5a>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e8 <__multadd+0x84>)
 800b9b6:	480d      	ldr	r0, [pc, #52]	@ (800b9ec <__multadd+0x88>)
 800b9b8:	21ba      	movs	r1, #186	@ 0xba
 800b9ba:	f000 fd19 	bl	800c3f0 <__assert_func>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	f104 010c 	add.w	r1, r4, #12
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7ff f800 	bl	800a9ce <memcpy>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa5 	bl	800b920 <_Bfree>
 800b9d6:	4644      	mov	r4, r8
 800b9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9dc:	3501      	adds	r5, #1
 800b9de:	615e      	str	r6, [r3, #20]
 800b9e0:	6125      	str	r5, [r4, #16]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	0800cfa8 	.word	0x0800cfa8
 800b9ec:	0800cfb9 	.word	0x0800cfb9

0800b9f0 <__hi0bits>:
 800b9f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	bf36      	itet	cc
 800b9f8:	0403      	lslcc	r3, r0, #16
 800b9fa:	2000      	movcs	r0, #0
 800b9fc:	2010      	movcc	r0, #16
 800b9fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba02:	bf3c      	itt	cc
 800ba04:	021b      	lslcc	r3, r3, #8
 800ba06:	3008      	addcc	r0, #8
 800ba08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba0c:	bf3c      	itt	cc
 800ba0e:	011b      	lslcc	r3, r3, #4
 800ba10:	3004      	addcc	r0, #4
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba16:	bf3c      	itt	cc
 800ba18:	009b      	lslcc	r3, r3, #2
 800ba1a:	3002      	addcc	r0, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	db05      	blt.n	800ba2c <__hi0bits+0x3c>
 800ba20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba24:	f100 0001 	add.w	r0, r0, #1
 800ba28:	bf08      	it	eq
 800ba2a:	2020      	moveq	r0, #32
 800ba2c:	4770      	bx	lr

0800ba2e <__lo0bits>:
 800ba2e:	6803      	ldr	r3, [r0, #0]
 800ba30:	4602      	mov	r2, r0
 800ba32:	f013 0007 	ands.w	r0, r3, #7
 800ba36:	d00b      	beq.n	800ba50 <__lo0bits+0x22>
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	d421      	bmi.n	800ba80 <__lo0bits+0x52>
 800ba3c:	0798      	lsls	r0, r3, #30
 800ba3e:	bf49      	itett	mi
 800ba40:	085b      	lsrmi	r3, r3, #1
 800ba42:	089b      	lsrpl	r3, r3, #2
 800ba44:	2001      	movmi	r0, #1
 800ba46:	6013      	strmi	r3, [r2, #0]
 800ba48:	bf5c      	itt	pl
 800ba4a:	6013      	strpl	r3, [r2, #0]
 800ba4c:	2002      	movpl	r0, #2
 800ba4e:	4770      	bx	lr
 800ba50:	b299      	uxth	r1, r3
 800ba52:	b909      	cbnz	r1, 800ba58 <__lo0bits+0x2a>
 800ba54:	0c1b      	lsrs	r3, r3, #16
 800ba56:	2010      	movs	r0, #16
 800ba58:	b2d9      	uxtb	r1, r3
 800ba5a:	b909      	cbnz	r1, 800ba60 <__lo0bits+0x32>
 800ba5c:	3008      	adds	r0, #8
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	0719      	lsls	r1, r3, #28
 800ba62:	bf04      	itt	eq
 800ba64:	091b      	lsreq	r3, r3, #4
 800ba66:	3004      	addeq	r0, #4
 800ba68:	0799      	lsls	r1, r3, #30
 800ba6a:	bf04      	itt	eq
 800ba6c:	089b      	lsreq	r3, r3, #2
 800ba6e:	3002      	addeq	r0, #2
 800ba70:	07d9      	lsls	r1, r3, #31
 800ba72:	d403      	bmi.n	800ba7c <__lo0bits+0x4e>
 800ba74:	085b      	lsrs	r3, r3, #1
 800ba76:	f100 0001 	add.w	r0, r0, #1
 800ba7a:	d003      	beq.n	800ba84 <__lo0bits+0x56>
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	4770      	bx	lr
 800ba80:	2000      	movs	r0, #0
 800ba82:	4770      	bx	lr
 800ba84:	2020      	movs	r0, #32
 800ba86:	4770      	bx	lr

0800ba88 <__i2b>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	f7ff ff07 	bl	800b8a0 <_Balloc>
 800ba92:	4602      	mov	r2, r0
 800ba94:	b928      	cbnz	r0, 800baa2 <__i2b+0x1a>
 800ba96:	4b05      	ldr	r3, [pc, #20]	@ (800baac <__i2b+0x24>)
 800ba98:	4805      	ldr	r0, [pc, #20]	@ (800bab0 <__i2b+0x28>)
 800ba9a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba9e:	f000 fca7 	bl	800c3f0 <__assert_func>
 800baa2:	2301      	movs	r3, #1
 800baa4:	6144      	str	r4, [r0, #20]
 800baa6:	6103      	str	r3, [r0, #16]
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	0800cfa8 	.word	0x0800cfa8
 800bab0:	0800cfb9 	.word	0x0800cfb9

0800bab4 <__multiply>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	4617      	mov	r7, r2
 800baba:	690a      	ldr	r2, [r1, #16]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	429a      	cmp	r2, r3
 800bac0:	bfa8      	it	ge
 800bac2:	463b      	movge	r3, r7
 800bac4:	4689      	mov	r9, r1
 800bac6:	bfa4      	itt	ge
 800bac8:	460f      	movge	r7, r1
 800baca:	4699      	movge	r9, r3
 800bacc:	693d      	ldr	r5, [r7, #16]
 800bace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	eb05 060a 	add.w	r6, r5, sl
 800bada:	42b3      	cmp	r3, r6
 800badc:	b085      	sub	sp, #20
 800bade:	bfb8      	it	lt
 800bae0:	3101      	addlt	r1, #1
 800bae2:	f7ff fedd 	bl	800b8a0 <_Balloc>
 800bae6:	b930      	cbnz	r0, 800baf6 <__multiply+0x42>
 800bae8:	4602      	mov	r2, r0
 800baea:	4b41      	ldr	r3, [pc, #260]	@ (800bbf0 <__multiply+0x13c>)
 800baec:	4841      	ldr	r0, [pc, #260]	@ (800bbf4 <__multiply+0x140>)
 800baee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baf2:	f000 fc7d 	bl	800c3f0 <__assert_func>
 800baf6:	f100 0414 	add.w	r4, r0, #20
 800bafa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bafe:	4623      	mov	r3, r4
 800bb00:	2200      	movs	r2, #0
 800bb02:	4573      	cmp	r3, lr
 800bb04:	d320      	bcc.n	800bb48 <__multiply+0x94>
 800bb06:	f107 0814 	add.w	r8, r7, #20
 800bb0a:	f109 0114 	add.w	r1, r9, #20
 800bb0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb16:	9302      	str	r3, [sp, #8]
 800bb18:	1beb      	subs	r3, r5, r7
 800bb1a:	3b15      	subs	r3, #21
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	3304      	adds	r3, #4
 800bb22:	3715      	adds	r7, #21
 800bb24:	42bd      	cmp	r5, r7
 800bb26:	bf38      	it	cc
 800bb28:	2304      	movcc	r3, #4
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	9b02      	ldr	r3, [sp, #8]
 800bb2e:	9103      	str	r1, [sp, #12]
 800bb30:	428b      	cmp	r3, r1
 800bb32:	d80c      	bhi.n	800bb4e <__multiply+0x9a>
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	dd03      	ble.n	800bb40 <__multiply+0x8c>
 800bb38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d055      	beq.n	800bbec <__multiply+0x138>
 800bb40:	6106      	str	r6, [r0, #16]
 800bb42:	b005      	add	sp, #20
 800bb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb48:	f843 2b04 	str.w	r2, [r3], #4
 800bb4c:	e7d9      	b.n	800bb02 <__multiply+0x4e>
 800bb4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb52:	f1ba 0f00 	cmp.w	sl, #0
 800bb56:	d01f      	beq.n	800bb98 <__multiply+0xe4>
 800bb58:	46c4      	mov	ip, r8
 800bb5a:	46a1      	mov	r9, r4
 800bb5c:	2700      	movs	r7, #0
 800bb5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb62:	f8d9 3000 	ldr.w	r3, [r9]
 800bb66:	fa1f fb82 	uxth.w	fp, r2
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb70:	443b      	add	r3, r7
 800bb72:	f8d9 7000 	ldr.w	r7, [r9]
 800bb76:	0c12      	lsrs	r2, r2, #16
 800bb78:	0c3f      	lsrs	r7, r7, #16
 800bb7a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb88:	4565      	cmp	r5, ip
 800bb8a:	f849 3b04 	str.w	r3, [r9], #4
 800bb8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb92:	d8e4      	bhi.n	800bb5e <__multiply+0xaa>
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	50e7      	str	r7, [r4, r3]
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb9e:	3104      	adds	r1, #4
 800bba0:	f1b9 0f00 	cmp.w	r9, #0
 800bba4:	d020      	beq.n	800bbe8 <__multiply+0x134>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	4647      	mov	r7, r8
 800bbaa:	46a4      	mov	ip, r4
 800bbac:	f04f 0a00 	mov.w	sl, #0
 800bbb0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bbb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bbb8:	fb09 220b 	mla	r2, r9, fp, r2
 800bbbc:	4452      	add	r2, sl
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbc4:	f84c 3b04 	str.w	r3, [ip], #4
 800bbc8:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbd0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbd4:	fb09 330a 	mla	r3, r9, sl, r3
 800bbd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbdc:	42bd      	cmp	r5, r7
 800bbde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbe2:	d8e5      	bhi.n	800bbb0 <__multiply+0xfc>
 800bbe4:	9a01      	ldr	r2, [sp, #4]
 800bbe6:	50a3      	str	r3, [r4, r2]
 800bbe8:	3404      	adds	r4, #4
 800bbea:	e79f      	b.n	800bb2c <__multiply+0x78>
 800bbec:	3e01      	subs	r6, #1
 800bbee:	e7a1      	b.n	800bb34 <__multiply+0x80>
 800bbf0:	0800cfa8 	.word	0x0800cfa8
 800bbf4:	0800cfb9 	.word	0x0800cfb9

0800bbf8 <__pow5mult>:
 800bbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbfc:	4615      	mov	r5, r2
 800bbfe:	f012 0203 	ands.w	r2, r2, #3
 800bc02:	4607      	mov	r7, r0
 800bc04:	460e      	mov	r6, r1
 800bc06:	d007      	beq.n	800bc18 <__pow5mult+0x20>
 800bc08:	4c25      	ldr	r4, [pc, #148]	@ (800bca0 <__pow5mult+0xa8>)
 800bc0a:	3a01      	subs	r2, #1
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc12:	f7ff fea7 	bl	800b964 <__multadd>
 800bc16:	4606      	mov	r6, r0
 800bc18:	10ad      	asrs	r5, r5, #2
 800bc1a:	d03d      	beq.n	800bc98 <__pow5mult+0xa0>
 800bc1c:	69fc      	ldr	r4, [r7, #28]
 800bc1e:	b97c      	cbnz	r4, 800bc40 <__pow5mult+0x48>
 800bc20:	2010      	movs	r0, #16
 800bc22:	f7ff fd87 	bl	800b734 <malloc>
 800bc26:	4602      	mov	r2, r0
 800bc28:	61f8      	str	r0, [r7, #28]
 800bc2a:	b928      	cbnz	r0, 800bc38 <__pow5mult+0x40>
 800bc2c:	4b1d      	ldr	r3, [pc, #116]	@ (800bca4 <__pow5mult+0xac>)
 800bc2e:	481e      	ldr	r0, [pc, #120]	@ (800bca8 <__pow5mult+0xb0>)
 800bc30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc34:	f000 fbdc 	bl	800c3f0 <__assert_func>
 800bc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc3c:	6004      	str	r4, [r0, #0]
 800bc3e:	60c4      	str	r4, [r0, #12]
 800bc40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc48:	b94c      	cbnz	r4, 800bc5e <__pow5mult+0x66>
 800bc4a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7ff ff1a 	bl	800ba88 <__i2b>
 800bc54:	2300      	movs	r3, #0
 800bc56:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	6003      	str	r3, [r0, #0]
 800bc5e:	f04f 0900 	mov.w	r9, #0
 800bc62:	07eb      	lsls	r3, r5, #31
 800bc64:	d50a      	bpl.n	800bc7c <__pow5mult+0x84>
 800bc66:	4631      	mov	r1, r6
 800bc68:	4622      	mov	r2, r4
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7ff ff22 	bl	800bab4 <__multiply>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4680      	mov	r8, r0
 800bc74:	4638      	mov	r0, r7
 800bc76:	f7ff fe53 	bl	800b920 <_Bfree>
 800bc7a:	4646      	mov	r6, r8
 800bc7c:	106d      	asrs	r5, r5, #1
 800bc7e:	d00b      	beq.n	800bc98 <__pow5mult+0xa0>
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	b938      	cbnz	r0, 800bc94 <__pow5mult+0x9c>
 800bc84:	4622      	mov	r2, r4
 800bc86:	4621      	mov	r1, r4
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff ff13 	bl	800bab4 <__multiply>
 800bc8e:	6020      	str	r0, [r4, #0]
 800bc90:	f8c0 9000 	str.w	r9, [r0]
 800bc94:	4604      	mov	r4, r0
 800bc96:	e7e4      	b.n	800bc62 <__pow5mult+0x6a>
 800bc98:	4630      	mov	r0, r6
 800bc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	bf00      	nop
 800bca0:	0800d06c 	.word	0x0800d06c
 800bca4:	0800cf39 	.word	0x0800cf39
 800bca8:	0800cfb9 	.word	0x0800cfb9

0800bcac <__lshift>:
 800bcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	6849      	ldr	r1, [r1, #4]
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	4691      	mov	r9, r2
 800bcc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc4:	f108 0601 	add.w	r6, r8, #1
 800bcc8:	42b3      	cmp	r3, r6
 800bcca:	db0b      	blt.n	800bce4 <__lshift+0x38>
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7ff fde7 	bl	800b8a0 <_Balloc>
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	b948      	cbnz	r0, 800bcea <__lshift+0x3e>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b28      	ldr	r3, [pc, #160]	@ (800bd7c <__lshift+0xd0>)
 800bcda:	4829      	ldr	r0, [pc, #164]	@ (800bd80 <__lshift+0xd4>)
 800bcdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bce0:	f000 fb86 	bl	800c3f0 <__assert_func>
 800bce4:	3101      	adds	r1, #1
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	e7ee      	b.n	800bcc8 <__lshift+0x1c>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f100 0114 	add.w	r1, r0, #20
 800bcf0:	f100 0210 	add.w	r2, r0, #16
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	4553      	cmp	r3, sl
 800bcf8:	db33      	blt.n	800bd62 <__lshift+0xb6>
 800bcfa:	6920      	ldr	r0, [r4, #16]
 800bcfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd00:	f104 0314 	add.w	r3, r4, #20
 800bd04:	f019 091f 	ands.w	r9, r9, #31
 800bd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd10:	d02b      	beq.n	800bd6a <__lshift+0xbe>
 800bd12:	f1c9 0e20 	rsb	lr, r9, #32
 800bd16:	468a      	mov	sl, r1
 800bd18:	2200      	movs	r2, #0
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd20:	4310      	orrs	r0, r2
 800bd22:	f84a 0b04 	str.w	r0, [sl], #4
 800bd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2a:	459c      	cmp	ip, r3
 800bd2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd30:	d8f3      	bhi.n	800bd1a <__lshift+0x6e>
 800bd32:	ebac 0304 	sub.w	r3, ip, r4
 800bd36:	3b15      	subs	r3, #21
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	f104 0015 	add.w	r0, r4, #21
 800bd42:	4560      	cmp	r0, ip
 800bd44:	bf88      	it	hi
 800bd46:	2304      	movhi	r3, #4
 800bd48:	50ca      	str	r2, [r1, r3]
 800bd4a:	b10a      	cbz	r2, 800bd50 <__lshift+0xa4>
 800bd4c:	f108 0602 	add.w	r6, r8, #2
 800bd50:	3e01      	subs	r6, #1
 800bd52:	4638      	mov	r0, r7
 800bd54:	612e      	str	r6, [r5, #16]
 800bd56:	4621      	mov	r1, r4
 800bd58:	f7ff fde2 	bl	800b920 <_Bfree>
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd66:	3301      	adds	r3, #1
 800bd68:	e7c5      	b.n	800bcf6 <__lshift+0x4a>
 800bd6a:	3904      	subs	r1, #4
 800bd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd74:	459c      	cmp	ip, r3
 800bd76:	d8f9      	bhi.n	800bd6c <__lshift+0xc0>
 800bd78:	e7ea      	b.n	800bd50 <__lshift+0xa4>
 800bd7a:	bf00      	nop
 800bd7c:	0800cfa8 	.word	0x0800cfa8
 800bd80:	0800cfb9 	.word	0x0800cfb9

0800bd84 <__mcmp>:
 800bd84:	690a      	ldr	r2, [r1, #16]
 800bd86:	4603      	mov	r3, r0
 800bd88:	6900      	ldr	r0, [r0, #16]
 800bd8a:	1a80      	subs	r0, r0, r2
 800bd8c:	b530      	push	{r4, r5, lr}
 800bd8e:	d10e      	bne.n	800bdae <__mcmp+0x2a>
 800bd90:	3314      	adds	r3, #20
 800bd92:	3114      	adds	r1, #20
 800bd94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bda0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bda4:	4295      	cmp	r5, r2
 800bda6:	d003      	beq.n	800bdb0 <__mcmp+0x2c>
 800bda8:	d205      	bcs.n	800bdb6 <__mcmp+0x32>
 800bdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bdae:	bd30      	pop	{r4, r5, pc}
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	d3f3      	bcc.n	800bd9c <__mcmp+0x18>
 800bdb4:	e7fb      	b.n	800bdae <__mcmp+0x2a>
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	e7f9      	b.n	800bdae <__mcmp+0x2a>
	...

0800bdbc <__mdiff>:
 800bdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	4689      	mov	r9, r1
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	4614      	mov	r4, r2
 800bdca:	f7ff ffdb 	bl	800bd84 <__mcmp>
 800bdce:	1e05      	subs	r5, r0, #0
 800bdd0:	d112      	bne.n	800bdf8 <__mdiff+0x3c>
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f7ff fd63 	bl	800b8a0 <_Balloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	b928      	cbnz	r0, 800bdea <__mdiff+0x2e>
 800bdde:	4b3f      	ldr	r3, [pc, #252]	@ (800bedc <__mdiff+0x120>)
 800bde0:	f240 2137 	movw	r1, #567	@ 0x237
 800bde4:	483e      	ldr	r0, [pc, #248]	@ (800bee0 <__mdiff+0x124>)
 800bde6:	f000 fb03 	bl	800c3f0 <__assert_func>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	bfbc      	itt	lt
 800bdfa:	464b      	movlt	r3, r9
 800bdfc:	46a1      	movlt	r9, r4
 800bdfe:	4630      	mov	r0, r6
 800be00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be04:	bfba      	itte	lt
 800be06:	461c      	movlt	r4, r3
 800be08:	2501      	movlt	r5, #1
 800be0a:	2500      	movge	r5, #0
 800be0c:	f7ff fd48 	bl	800b8a0 <_Balloc>
 800be10:	4602      	mov	r2, r0
 800be12:	b918      	cbnz	r0, 800be1c <__mdiff+0x60>
 800be14:	4b31      	ldr	r3, [pc, #196]	@ (800bedc <__mdiff+0x120>)
 800be16:	f240 2145 	movw	r1, #581	@ 0x245
 800be1a:	e7e3      	b.n	800bde4 <__mdiff+0x28>
 800be1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be20:	6926      	ldr	r6, [r4, #16]
 800be22:	60c5      	str	r5, [r0, #12]
 800be24:	f109 0310 	add.w	r3, r9, #16
 800be28:	f109 0514 	add.w	r5, r9, #20
 800be2c:	f104 0e14 	add.w	lr, r4, #20
 800be30:	f100 0b14 	add.w	fp, r0, #20
 800be34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	46d9      	mov	r9, fp
 800be40:	f04f 0c00 	mov.w	ip, #0
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	fa1f f38a 	uxth.w	r3, sl
 800be54:	4619      	mov	r1, r3
 800be56:	b283      	uxth	r3, r0
 800be58:	1acb      	subs	r3, r1, r3
 800be5a:	0c00      	lsrs	r0, r0, #16
 800be5c:	4463      	add	r3, ip
 800be5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be66:	b29b      	uxth	r3, r3
 800be68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be6c:	4576      	cmp	r6, lr
 800be6e:	f849 3b04 	str.w	r3, [r9], #4
 800be72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be76:	d8e5      	bhi.n	800be44 <__mdiff+0x88>
 800be78:	1b33      	subs	r3, r6, r4
 800be7a:	3b15      	subs	r3, #21
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	3415      	adds	r4, #21
 800be82:	3304      	adds	r3, #4
 800be84:	42a6      	cmp	r6, r4
 800be86:	bf38      	it	cc
 800be88:	2304      	movcc	r3, #4
 800be8a:	441d      	add	r5, r3
 800be8c:	445b      	add	r3, fp
 800be8e:	461e      	mov	r6, r3
 800be90:	462c      	mov	r4, r5
 800be92:	4544      	cmp	r4, r8
 800be94:	d30e      	bcc.n	800beb4 <__mdiff+0xf8>
 800be96:	f108 0103 	add.w	r1, r8, #3
 800be9a:	1b49      	subs	r1, r1, r5
 800be9c:	f021 0103 	bic.w	r1, r1, #3
 800bea0:	3d03      	subs	r5, #3
 800bea2:	45a8      	cmp	r8, r5
 800bea4:	bf38      	it	cc
 800bea6:	2100      	movcc	r1, #0
 800bea8:	440b      	add	r3, r1
 800beaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beae:	b191      	cbz	r1, 800bed6 <__mdiff+0x11a>
 800beb0:	6117      	str	r7, [r2, #16]
 800beb2:	e79d      	b.n	800bdf0 <__mdiff+0x34>
 800beb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800beb8:	46e6      	mov	lr, ip
 800beba:	0c08      	lsrs	r0, r1, #16
 800bebc:	fa1c fc81 	uxtah	ip, ip, r1
 800bec0:	4471      	add	r1, lr
 800bec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bec6:	b289      	uxth	r1, r1
 800bec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800becc:	f846 1b04 	str.w	r1, [r6], #4
 800bed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bed4:	e7dd      	b.n	800be92 <__mdiff+0xd6>
 800bed6:	3f01      	subs	r7, #1
 800bed8:	e7e7      	b.n	800beaa <__mdiff+0xee>
 800beda:	bf00      	nop
 800bedc:	0800cfa8 	.word	0x0800cfa8
 800bee0:	0800cfb9 	.word	0x0800cfb9

0800bee4 <__d2b>:
 800bee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee8:	460f      	mov	r7, r1
 800beea:	2101      	movs	r1, #1
 800beec:	ec59 8b10 	vmov	r8, r9, d0
 800bef0:	4616      	mov	r6, r2
 800bef2:	f7ff fcd5 	bl	800b8a0 <_Balloc>
 800bef6:	4604      	mov	r4, r0
 800bef8:	b930      	cbnz	r0, 800bf08 <__d2b+0x24>
 800befa:	4602      	mov	r2, r0
 800befc:	4b23      	ldr	r3, [pc, #140]	@ (800bf8c <__d2b+0xa8>)
 800befe:	4824      	ldr	r0, [pc, #144]	@ (800bf90 <__d2b+0xac>)
 800bf00:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf04:	f000 fa74 	bl	800c3f0 <__assert_func>
 800bf08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf10:	b10d      	cbz	r5, 800bf16 <__d2b+0x32>
 800bf12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	f1b8 0300 	subs.w	r3, r8, #0
 800bf1c:	d023      	beq.n	800bf66 <__d2b+0x82>
 800bf1e:	4668      	mov	r0, sp
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	f7ff fd84 	bl	800ba2e <__lo0bits>
 800bf26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf2a:	b1d0      	cbz	r0, 800bf62 <__d2b+0x7e>
 800bf2c:	f1c0 0320 	rsb	r3, r0, #32
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	430b      	orrs	r3, r1
 800bf36:	40c2      	lsrs	r2, r0
 800bf38:	6163      	str	r3, [r4, #20]
 800bf3a:	9201      	str	r2, [sp, #4]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	61a3      	str	r3, [r4, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bf0c      	ite	eq
 800bf44:	2201      	moveq	r2, #1
 800bf46:	2202      	movne	r2, #2
 800bf48:	6122      	str	r2, [r4, #16]
 800bf4a:	b1a5      	cbz	r5, 800bf76 <__d2b+0x92>
 800bf4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf50:	4405      	add	r5, r0
 800bf52:	603d      	str	r5, [r7, #0]
 800bf54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf58:	6030      	str	r0, [r6, #0]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	b003      	add	sp, #12
 800bf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf62:	6161      	str	r1, [r4, #20]
 800bf64:	e7ea      	b.n	800bf3c <__d2b+0x58>
 800bf66:	a801      	add	r0, sp, #4
 800bf68:	f7ff fd61 	bl	800ba2e <__lo0bits>
 800bf6c:	9b01      	ldr	r3, [sp, #4]
 800bf6e:	6163      	str	r3, [r4, #20]
 800bf70:	3020      	adds	r0, #32
 800bf72:	2201      	movs	r2, #1
 800bf74:	e7e8      	b.n	800bf48 <__d2b+0x64>
 800bf76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf7e:	6038      	str	r0, [r7, #0]
 800bf80:	6918      	ldr	r0, [r3, #16]
 800bf82:	f7ff fd35 	bl	800b9f0 <__hi0bits>
 800bf86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf8a:	e7e5      	b.n	800bf58 <__d2b+0x74>
 800bf8c:	0800cfa8 	.word	0x0800cfa8
 800bf90:	0800cfb9 	.word	0x0800cfb9

0800bf94 <__ssputs_r>:
 800bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	688e      	ldr	r6, [r1, #8]
 800bf9a:	461f      	mov	r7, r3
 800bf9c:	42be      	cmp	r6, r7
 800bf9e:	680b      	ldr	r3, [r1, #0]
 800bfa0:	4682      	mov	sl, r0
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	4690      	mov	r8, r2
 800bfa6:	d82d      	bhi.n	800c004 <__ssputs_r+0x70>
 800bfa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfb0:	d026      	beq.n	800c000 <__ssputs_r+0x6c>
 800bfb2:	6965      	ldr	r5, [r4, #20]
 800bfb4:	6909      	ldr	r1, [r1, #16]
 800bfb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfba:	eba3 0901 	sub.w	r9, r3, r1
 800bfbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfc2:	1c7b      	adds	r3, r7, #1
 800bfc4:	444b      	add	r3, r9
 800bfc6:	106d      	asrs	r5, r5, #1
 800bfc8:	429d      	cmp	r5, r3
 800bfca:	bf38      	it	cc
 800bfcc:	461d      	movcc	r5, r3
 800bfce:	0553      	lsls	r3, r2, #21
 800bfd0:	d527      	bpl.n	800c022 <__ssputs_r+0x8e>
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7ff fbd8 	bl	800b788 <_malloc_r>
 800bfd8:	4606      	mov	r6, r0
 800bfda:	b360      	cbz	r0, 800c036 <__ssputs_r+0xa2>
 800bfdc:	6921      	ldr	r1, [r4, #16]
 800bfde:	464a      	mov	r2, r9
 800bfe0:	f7fe fcf5 	bl	800a9ce <memcpy>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	6126      	str	r6, [r4, #16]
 800bff2:	6165      	str	r5, [r4, #20]
 800bff4:	444e      	add	r6, r9
 800bff6:	eba5 0509 	sub.w	r5, r5, r9
 800bffa:	6026      	str	r6, [r4, #0]
 800bffc:	60a5      	str	r5, [r4, #8]
 800bffe:	463e      	mov	r6, r7
 800c000:	42be      	cmp	r6, r7
 800c002:	d900      	bls.n	800c006 <__ssputs_r+0x72>
 800c004:	463e      	mov	r6, r7
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	4632      	mov	r2, r6
 800c00a:	4641      	mov	r1, r8
 800c00c:	f000 f9c6 	bl	800c39c <memmove>
 800c010:	68a3      	ldr	r3, [r4, #8]
 800c012:	1b9b      	subs	r3, r3, r6
 800c014:	60a3      	str	r3, [r4, #8]
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	4433      	add	r3, r6
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	2000      	movs	r0, #0
 800c01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c022:	462a      	mov	r2, r5
 800c024:	f000 fa28 	bl	800c478 <_realloc_r>
 800c028:	4606      	mov	r6, r0
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d1e0      	bne.n	800bff0 <__ssputs_r+0x5c>
 800c02e:	6921      	ldr	r1, [r4, #16]
 800c030:	4650      	mov	r0, sl
 800c032:	f7ff fb35 	bl	800b6a0 <_free_r>
 800c036:	230c      	movs	r3, #12
 800c038:	f8ca 3000 	str.w	r3, [sl]
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e7e9      	b.n	800c01e <__ssputs_r+0x8a>
	...

0800c04c <_svfiprintf_r>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	4698      	mov	r8, r3
 800c052:	898b      	ldrh	r3, [r1, #12]
 800c054:	061b      	lsls	r3, r3, #24
 800c056:	b09d      	sub	sp, #116	@ 0x74
 800c058:	4607      	mov	r7, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	4614      	mov	r4, r2
 800c05e:	d510      	bpl.n	800c082 <_svfiprintf_r+0x36>
 800c060:	690b      	ldr	r3, [r1, #16]
 800c062:	b973      	cbnz	r3, 800c082 <_svfiprintf_r+0x36>
 800c064:	2140      	movs	r1, #64	@ 0x40
 800c066:	f7ff fb8f 	bl	800b788 <_malloc_r>
 800c06a:	6028      	str	r0, [r5, #0]
 800c06c:	6128      	str	r0, [r5, #16]
 800c06e:	b930      	cbnz	r0, 800c07e <_svfiprintf_r+0x32>
 800c070:	230c      	movs	r3, #12
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	b01d      	add	sp, #116	@ 0x74
 800c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07e:	2340      	movs	r3, #64	@ 0x40
 800c080:	616b      	str	r3, [r5, #20]
 800c082:	2300      	movs	r3, #0
 800c084:	9309      	str	r3, [sp, #36]	@ 0x24
 800c086:	2320      	movs	r3, #32
 800c088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c08c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c090:	2330      	movs	r3, #48	@ 0x30
 800c092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c230 <_svfiprintf_r+0x1e4>
 800c096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c09a:	f04f 0901 	mov.w	r9, #1
 800c09e:	4623      	mov	r3, r4
 800c0a0:	469a      	mov	sl, r3
 800c0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0a6:	b10a      	cbz	r2, 800c0ac <_svfiprintf_r+0x60>
 800c0a8:	2a25      	cmp	r2, #37	@ 0x25
 800c0aa:	d1f9      	bne.n	800c0a0 <_svfiprintf_r+0x54>
 800c0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b0:	d00b      	beq.n	800c0ca <_svfiprintf_r+0x7e>
 800c0b2:	465b      	mov	r3, fp
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ff6b 	bl	800bf94 <__ssputs_r>
 800c0be:	3001      	adds	r0, #1
 800c0c0:	f000 80a7 	beq.w	800c212 <_svfiprintf_r+0x1c6>
 800c0c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0c6:	445a      	add	r2, fp
 800c0c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 809f 	beq.w	800c212 <_svfiprintf_r+0x1c6>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0de:	f10a 0a01 	add.w	sl, sl, #1
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	9307      	str	r3, [sp, #28]
 800c0e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0ec:	4654      	mov	r4, sl
 800c0ee:	2205      	movs	r2, #5
 800c0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f4:	484e      	ldr	r0, [pc, #312]	@ (800c230 <_svfiprintf_r+0x1e4>)
 800c0f6:	f7f4 f88b 	bl	8000210 <memchr>
 800c0fa:	9a04      	ldr	r2, [sp, #16]
 800c0fc:	b9d8      	cbnz	r0, 800c136 <_svfiprintf_r+0xea>
 800c0fe:	06d0      	lsls	r0, r2, #27
 800c100:	bf44      	itt	mi
 800c102:	2320      	movmi	r3, #32
 800c104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c108:	0711      	lsls	r1, r2, #28
 800c10a:	bf44      	itt	mi
 800c10c:	232b      	movmi	r3, #43	@ 0x2b
 800c10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c112:	f89a 3000 	ldrb.w	r3, [sl]
 800c116:	2b2a      	cmp	r3, #42	@ 0x2a
 800c118:	d015      	beq.n	800c146 <_svfiprintf_r+0xfa>
 800c11a:	9a07      	ldr	r2, [sp, #28]
 800c11c:	4654      	mov	r4, sl
 800c11e:	2000      	movs	r0, #0
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4621      	mov	r1, r4
 800c126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c12a:	3b30      	subs	r3, #48	@ 0x30
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	d94b      	bls.n	800c1c8 <_svfiprintf_r+0x17c>
 800c130:	b1b0      	cbz	r0, 800c160 <_svfiprintf_r+0x114>
 800c132:	9207      	str	r2, [sp, #28]
 800c134:	e014      	b.n	800c160 <_svfiprintf_r+0x114>
 800c136:	eba0 0308 	sub.w	r3, r0, r8
 800c13a:	fa09 f303 	lsl.w	r3, r9, r3
 800c13e:	4313      	orrs	r3, r2
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	46a2      	mov	sl, r4
 800c144:	e7d2      	b.n	800c0ec <_svfiprintf_r+0xa0>
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	1d19      	adds	r1, r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	9103      	str	r1, [sp, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bfbb      	ittet	lt
 800c152:	425b      	neglt	r3, r3
 800c154:	f042 0202 	orrlt.w	r2, r2, #2
 800c158:	9307      	strge	r3, [sp, #28]
 800c15a:	9307      	strlt	r3, [sp, #28]
 800c15c:	bfb8      	it	lt
 800c15e:	9204      	strlt	r2, [sp, #16]
 800c160:	7823      	ldrb	r3, [r4, #0]
 800c162:	2b2e      	cmp	r3, #46	@ 0x2e
 800c164:	d10a      	bne.n	800c17c <_svfiprintf_r+0x130>
 800c166:	7863      	ldrb	r3, [r4, #1]
 800c168:	2b2a      	cmp	r3, #42	@ 0x2a
 800c16a:	d132      	bne.n	800c1d2 <_svfiprintf_r+0x186>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	1d1a      	adds	r2, r3, #4
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	9203      	str	r2, [sp, #12]
 800c174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c178:	3402      	adds	r4, #2
 800c17a:	9305      	str	r3, [sp, #20]
 800c17c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c240 <_svfiprintf_r+0x1f4>
 800c180:	7821      	ldrb	r1, [r4, #0]
 800c182:	2203      	movs	r2, #3
 800c184:	4650      	mov	r0, sl
 800c186:	f7f4 f843 	bl	8000210 <memchr>
 800c18a:	b138      	cbz	r0, 800c19c <_svfiprintf_r+0x150>
 800c18c:	9b04      	ldr	r3, [sp, #16]
 800c18e:	eba0 000a 	sub.w	r0, r0, sl
 800c192:	2240      	movs	r2, #64	@ 0x40
 800c194:	4082      	lsls	r2, r0
 800c196:	4313      	orrs	r3, r2
 800c198:	3401      	adds	r4, #1
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a0:	4824      	ldr	r0, [pc, #144]	@ (800c234 <_svfiprintf_r+0x1e8>)
 800c1a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1a6:	2206      	movs	r2, #6
 800c1a8:	f7f4 f832 	bl	8000210 <memchr>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d036      	beq.n	800c21e <_svfiprintf_r+0x1d2>
 800c1b0:	4b21      	ldr	r3, [pc, #132]	@ (800c238 <_svfiprintf_r+0x1ec>)
 800c1b2:	bb1b      	cbnz	r3, 800c1fc <_svfiprintf_r+0x1b0>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	3307      	adds	r3, #7
 800c1b8:	f023 0307 	bic.w	r3, r3, #7
 800c1bc:	3308      	adds	r3, #8
 800c1be:	9303      	str	r3, [sp, #12]
 800c1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c2:	4433      	add	r3, r6
 800c1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c6:	e76a      	b.n	800c09e <_svfiprintf_r+0x52>
 800c1c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e7a8      	b.n	800c124 <_svfiprintf_r+0xd8>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	3401      	adds	r4, #1
 800c1d6:	9305      	str	r3, [sp, #20]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	f04f 0c0a 	mov.w	ip, #10
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1e4:	3a30      	subs	r2, #48	@ 0x30
 800c1e6:	2a09      	cmp	r2, #9
 800c1e8:	d903      	bls.n	800c1f2 <_svfiprintf_r+0x1a6>
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0c6      	beq.n	800c17c <_svfiprintf_r+0x130>
 800c1ee:	9105      	str	r1, [sp, #20]
 800c1f0:	e7c4      	b.n	800c17c <_svfiprintf_r+0x130>
 800c1f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e7f0      	b.n	800c1de <_svfiprintf_r+0x192>
 800c1fc:	ab03      	add	r3, sp, #12
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	462a      	mov	r2, r5
 800c202:	4b0e      	ldr	r3, [pc, #56]	@ (800c23c <_svfiprintf_r+0x1f0>)
 800c204:	a904      	add	r1, sp, #16
 800c206:	4638      	mov	r0, r7
 800c208:	f7fd fe26 	bl	8009e58 <_printf_float>
 800c20c:	1c42      	adds	r2, r0, #1
 800c20e:	4606      	mov	r6, r0
 800c210:	d1d6      	bne.n	800c1c0 <_svfiprintf_r+0x174>
 800c212:	89ab      	ldrh	r3, [r5, #12]
 800c214:	065b      	lsls	r3, r3, #25
 800c216:	f53f af2d 	bmi.w	800c074 <_svfiprintf_r+0x28>
 800c21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c21c:	e72c      	b.n	800c078 <_svfiprintf_r+0x2c>
 800c21e:	ab03      	add	r3, sp, #12
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	462a      	mov	r2, r5
 800c224:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <_svfiprintf_r+0x1f0>)
 800c226:	a904      	add	r1, sp, #16
 800c228:	4638      	mov	r0, r7
 800c22a:	f7fe f8ad 	bl	800a388 <_printf_i>
 800c22e:	e7ed      	b.n	800c20c <_svfiprintf_r+0x1c0>
 800c230:	0800d012 	.word	0x0800d012
 800c234:	0800d01c 	.word	0x0800d01c
 800c238:	08009e59 	.word	0x08009e59
 800c23c:	0800bf95 	.word	0x0800bf95
 800c240:	0800d018 	.word	0x0800d018

0800c244 <__sflush_r>:
 800c244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24c:	0716      	lsls	r6, r2, #28
 800c24e:	4605      	mov	r5, r0
 800c250:	460c      	mov	r4, r1
 800c252:	d454      	bmi.n	800c2fe <__sflush_r+0xba>
 800c254:	684b      	ldr	r3, [r1, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dc02      	bgt.n	800c260 <__sflush_r+0x1c>
 800c25a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dd48      	ble.n	800c2f2 <__sflush_r+0xae>
 800c260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c262:	2e00      	cmp	r6, #0
 800c264:	d045      	beq.n	800c2f2 <__sflush_r+0xae>
 800c266:	2300      	movs	r3, #0
 800c268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c26c:	682f      	ldr	r7, [r5, #0]
 800c26e:	6a21      	ldr	r1, [r4, #32]
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	d030      	beq.n	800c2d6 <__sflush_r+0x92>
 800c274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	0759      	lsls	r1, r3, #29
 800c27a:	d505      	bpl.n	800c288 <__sflush_r+0x44>
 800c27c:	6863      	ldr	r3, [r4, #4]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c282:	b10b      	cbz	r3, 800c288 <__sflush_r+0x44>
 800c284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c286:	1ad2      	subs	r2, r2, r3
 800c288:	2300      	movs	r3, #0
 800c28a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c28c:	6a21      	ldr	r1, [r4, #32]
 800c28e:	4628      	mov	r0, r5
 800c290:	47b0      	blx	r6
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	d106      	bne.n	800c2a6 <__sflush_r+0x62>
 800c298:	6829      	ldr	r1, [r5, #0]
 800c29a:	291d      	cmp	r1, #29
 800c29c:	d82b      	bhi.n	800c2f6 <__sflush_r+0xb2>
 800c29e:	4a2a      	ldr	r2, [pc, #168]	@ (800c348 <__sflush_r+0x104>)
 800c2a0:	40ca      	lsrs	r2, r1
 800c2a2:	07d6      	lsls	r6, r2, #31
 800c2a4:	d527      	bpl.n	800c2f6 <__sflush_r+0xb2>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	6062      	str	r2, [r4, #4]
 800c2aa:	04d9      	lsls	r1, r3, #19
 800c2ac:	6922      	ldr	r2, [r4, #16]
 800c2ae:	6022      	str	r2, [r4, #0]
 800c2b0:	d504      	bpl.n	800c2bc <__sflush_r+0x78>
 800c2b2:	1c42      	adds	r2, r0, #1
 800c2b4:	d101      	bne.n	800c2ba <__sflush_r+0x76>
 800c2b6:	682b      	ldr	r3, [r5, #0]
 800c2b8:	b903      	cbnz	r3, 800c2bc <__sflush_r+0x78>
 800c2ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2be:	602f      	str	r7, [r5, #0]
 800c2c0:	b1b9      	cbz	r1, 800c2f2 <__sflush_r+0xae>
 800c2c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2c6:	4299      	cmp	r1, r3
 800c2c8:	d002      	beq.n	800c2d0 <__sflush_r+0x8c>
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7ff f9e8 	bl	800b6a0 <_free_r>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2d4:	e00d      	b.n	800c2f2 <__sflush_r+0xae>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b0      	blx	r6
 800c2dc:	4602      	mov	r2, r0
 800c2de:	1c50      	adds	r0, r2, #1
 800c2e0:	d1c9      	bne.n	800c276 <__sflush_r+0x32>
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0c6      	beq.n	800c276 <__sflush_r+0x32>
 800c2e8:	2b1d      	cmp	r3, #29
 800c2ea:	d001      	beq.n	800c2f0 <__sflush_r+0xac>
 800c2ec:	2b16      	cmp	r3, #22
 800c2ee:	d11e      	bne.n	800c32e <__sflush_r+0xea>
 800c2f0:	602f      	str	r7, [r5, #0]
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	e022      	b.n	800c33c <__sflush_r+0xf8>
 800c2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2fa:	b21b      	sxth	r3, r3
 800c2fc:	e01b      	b.n	800c336 <__sflush_r+0xf2>
 800c2fe:	690f      	ldr	r7, [r1, #16]
 800c300:	2f00      	cmp	r7, #0
 800c302:	d0f6      	beq.n	800c2f2 <__sflush_r+0xae>
 800c304:	0793      	lsls	r3, r2, #30
 800c306:	680e      	ldr	r6, [r1, #0]
 800c308:	bf08      	it	eq
 800c30a:	694b      	ldreq	r3, [r1, #20]
 800c30c:	600f      	str	r7, [r1, #0]
 800c30e:	bf18      	it	ne
 800c310:	2300      	movne	r3, #0
 800c312:	eba6 0807 	sub.w	r8, r6, r7
 800c316:	608b      	str	r3, [r1, #8]
 800c318:	f1b8 0f00 	cmp.w	r8, #0
 800c31c:	dde9      	ble.n	800c2f2 <__sflush_r+0xae>
 800c31e:	6a21      	ldr	r1, [r4, #32]
 800c320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c322:	4643      	mov	r3, r8
 800c324:	463a      	mov	r2, r7
 800c326:	4628      	mov	r0, r5
 800c328:	47b0      	blx	r6
 800c32a:	2800      	cmp	r0, #0
 800c32c:	dc08      	bgt.n	800c340 <__sflush_r+0xfc>
 800c32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c340:	4407      	add	r7, r0
 800c342:	eba8 0800 	sub.w	r8, r8, r0
 800c346:	e7e7      	b.n	800c318 <__sflush_r+0xd4>
 800c348:	20400001 	.word	0x20400001

0800c34c <_fflush_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	690b      	ldr	r3, [r1, #16]
 800c350:	4605      	mov	r5, r0
 800c352:	460c      	mov	r4, r1
 800c354:	b913      	cbnz	r3, 800c35c <_fflush_r+0x10>
 800c356:	2500      	movs	r5, #0
 800c358:	4628      	mov	r0, r5
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	b118      	cbz	r0, 800c366 <_fflush_r+0x1a>
 800c35e:	6a03      	ldr	r3, [r0, #32]
 800c360:	b90b      	cbnz	r3, 800c366 <_fflush_r+0x1a>
 800c362:	f7fe f9bb 	bl	800a6dc <__sinit>
 800c366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0f3      	beq.n	800c356 <_fflush_r+0xa>
 800c36e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c370:	07d0      	lsls	r0, r2, #31
 800c372:	d404      	bmi.n	800c37e <_fflush_r+0x32>
 800c374:	0599      	lsls	r1, r3, #22
 800c376:	d402      	bmi.n	800c37e <_fflush_r+0x32>
 800c378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c37a:	f7fe fb26 	bl	800a9ca <__retarget_lock_acquire_recursive>
 800c37e:	4628      	mov	r0, r5
 800c380:	4621      	mov	r1, r4
 800c382:	f7ff ff5f 	bl	800c244 <__sflush_r>
 800c386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c388:	07da      	lsls	r2, r3, #31
 800c38a:	4605      	mov	r5, r0
 800c38c:	d4e4      	bmi.n	800c358 <_fflush_r+0xc>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	059b      	lsls	r3, r3, #22
 800c392:	d4e1      	bmi.n	800c358 <_fflush_r+0xc>
 800c394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c396:	f7fe fb19 	bl	800a9cc <__retarget_lock_release_recursive>
 800c39a:	e7dd      	b.n	800c358 <_fflush_r+0xc>

0800c39c <memmove>:
 800c39c:	4288      	cmp	r0, r1
 800c39e:	b510      	push	{r4, lr}
 800c3a0:	eb01 0402 	add.w	r4, r1, r2
 800c3a4:	d902      	bls.n	800c3ac <memmove+0x10>
 800c3a6:	4284      	cmp	r4, r0
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	d807      	bhi.n	800c3bc <memmove+0x20>
 800c3ac:	1e43      	subs	r3, r0, #1
 800c3ae:	42a1      	cmp	r1, r4
 800c3b0:	d008      	beq.n	800c3c4 <memmove+0x28>
 800c3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ba:	e7f8      	b.n	800c3ae <memmove+0x12>
 800c3bc:	4402      	add	r2, r0
 800c3be:	4601      	mov	r1, r0
 800c3c0:	428a      	cmp	r2, r1
 800c3c2:	d100      	bne.n	800c3c6 <memmove+0x2a>
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ce:	e7f7      	b.n	800c3c0 <memmove+0x24>

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	@ (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f6 f81e 	bl	800241c <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20005340 	.word	0x20005340

0800c3f0 <__assert_func>:
 800c3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3f2:	4614      	mov	r4, r2
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4b09      	ldr	r3, [pc, #36]	@ (800c41c <__assert_func+0x2c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	68d8      	ldr	r0, [r3, #12]
 800c3fe:	b14c      	cbz	r4, 800c414 <__assert_func+0x24>
 800c400:	4b07      	ldr	r3, [pc, #28]	@ (800c420 <__assert_func+0x30>)
 800c402:	9100      	str	r1, [sp, #0]
 800c404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c408:	4906      	ldr	r1, [pc, #24]	@ (800c424 <__assert_func+0x34>)
 800c40a:	462b      	mov	r3, r5
 800c40c:	f000 f870 	bl	800c4f0 <fiprintf>
 800c410:	f000 f880 	bl	800c514 <abort>
 800c414:	4b04      	ldr	r3, [pc, #16]	@ (800c428 <__assert_func+0x38>)
 800c416:	461c      	mov	r4, r3
 800c418:	e7f3      	b.n	800c402 <__assert_func+0x12>
 800c41a:	bf00      	nop
 800c41c:	20000024 	.word	0x20000024
 800c420:	0800d02d 	.word	0x0800d02d
 800c424:	0800d03a 	.word	0x0800d03a
 800c428:	0800d068 	.word	0x0800d068

0800c42c <_calloc_r>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	fba1 5402 	umull	r5, r4, r1, r2
 800c432:	b934      	cbnz	r4, 800c442 <_calloc_r+0x16>
 800c434:	4629      	mov	r1, r5
 800c436:	f7ff f9a7 	bl	800b788 <_malloc_r>
 800c43a:	4606      	mov	r6, r0
 800c43c:	b928      	cbnz	r0, 800c44a <_calloc_r+0x1e>
 800c43e:	4630      	mov	r0, r6
 800c440:	bd70      	pop	{r4, r5, r6, pc}
 800c442:	220c      	movs	r2, #12
 800c444:	6002      	str	r2, [r0, #0]
 800c446:	2600      	movs	r6, #0
 800c448:	e7f9      	b.n	800c43e <_calloc_r+0x12>
 800c44a:	462a      	mov	r2, r5
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7fe f9e0 	bl	800a812 <memset>
 800c452:	e7f4      	b.n	800c43e <_calloc_r+0x12>

0800c454 <__ascii_mbtowc>:
 800c454:	b082      	sub	sp, #8
 800c456:	b901      	cbnz	r1, 800c45a <__ascii_mbtowc+0x6>
 800c458:	a901      	add	r1, sp, #4
 800c45a:	b142      	cbz	r2, 800c46e <__ascii_mbtowc+0x1a>
 800c45c:	b14b      	cbz	r3, 800c472 <__ascii_mbtowc+0x1e>
 800c45e:	7813      	ldrb	r3, [r2, #0]
 800c460:	600b      	str	r3, [r1, #0]
 800c462:	7812      	ldrb	r2, [r2, #0]
 800c464:	1e10      	subs	r0, r2, #0
 800c466:	bf18      	it	ne
 800c468:	2001      	movne	r0, #1
 800c46a:	b002      	add	sp, #8
 800c46c:	4770      	bx	lr
 800c46e:	4610      	mov	r0, r2
 800c470:	e7fb      	b.n	800c46a <__ascii_mbtowc+0x16>
 800c472:	f06f 0001 	mvn.w	r0, #1
 800c476:	e7f8      	b.n	800c46a <__ascii_mbtowc+0x16>

0800c478 <_realloc_r>:
 800c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47c:	4607      	mov	r7, r0
 800c47e:	4614      	mov	r4, r2
 800c480:	460d      	mov	r5, r1
 800c482:	b921      	cbnz	r1, 800c48e <_realloc_r+0x16>
 800c484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	4611      	mov	r1, r2
 800c48a:	f7ff b97d 	b.w	800b788 <_malloc_r>
 800c48e:	b92a      	cbnz	r2, 800c49c <_realloc_r+0x24>
 800c490:	f7ff f906 	bl	800b6a0 <_free_r>
 800c494:	4625      	mov	r5, r4
 800c496:	4628      	mov	r0, r5
 800c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49c:	f000 f841 	bl	800c522 <_malloc_usable_size_r>
 800c4a0:	4284      	cmp	r4, r0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	d802      	bhi.n	800c4ac <_realloc_r+0x34>
 800c4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4aa:	d8f4      	bhi.n	800c496 <_realloc_r+0x1e>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f7ff f96a 	bl	800b788 <_malloc_r>
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	b908      	cbnz	r0, 800c4bc <_realloc_r+0x44>
 800c4b8:	4645      	mov	r5, r8
 800c4ba:	e7ec      	b.n	800c496 <_realloc_r+0x1e>
 800c4bc:	42b4      	cmp	r4, r6
 800c4be:	4622      	mov	r2, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	bf28      	it	cs
 800c4c4:	4632      	movcs	r2, r6
 800c4c6:	f7fe fa82 	bl	800a9ce <memcpy>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	f7ff f8e7 	bl	800b6a0 <_free_r>
 800c4d2:	e7f1      	b.n	800c4b8 <_realloc_r+0x40>

0800c4d4 <__ascii_wctomb>:
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	4608      	mov	r0, r1
 800c4d8:	b141      	cbz	r1, 800c4ec <__ascii_wctomb+0x18>
 800c4da:	2aff      	cmp	r2, #255	@ 0xff
 800c4dc:	d904      	bls.n	800c4e8 <__ascii_wctomb+0x14>
 800c4de:	228a      	movs	r2, #138	@ 0x8a
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e6:	4770      	bx	lr
 800c4e8:	700a      	strb	r2, [r1, #0]
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <fiprintf>:
 800c4f0:	b40e      	push	{r1, r2, r3}
 800c4f2:	b503      	push	{r0, r1, lr}
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	ab03      	add	r3, sp, #12
 800c4f8:	4805      	ldr	r0, [pc, #20]	@ (800c510 <fiprintf+0x20>)
 800c4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fe:	6800      	ldr	r0, [r0, #0]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	f000 f83f 	bl	800c584 <_vfiprintf_r>
 800c506:	b002      	add	sp, #8
 800c508:	f85d eb04 	ldr.w	lr, [sp], #4
 800c50c:	b003      	add	sp, #12
 800c50e:	4770      	bx	lr
 800c510:	20000024 	.word	0x20000024

0800c514 <abort>:
 800c514:	b508      	push	{r3, lr}
 800c516:	2006      	movs	r0, #6
 800c518:	f000 fa08 	bl	800c92c <raise>
 800c51c:	2001      	movs	r0, #1
 800c51e:	f7f5 ff05 	bl	800232c <_exit>

0800c522 <_malloc_usable_size_r>:
 800c522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c526:	1f18      	subs	r0, r3, #4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	bfbc      	itt	lt
 800c52c:	580b      	ldrlt	r3, [r1, r0]
 800c52e:	18c0      	addlt	r0, r0, r3
 800c530:	4770      	bx	lr

0800c532 <__sfputc_r>:
 800c532:	6893      	ldr	r3, [r2, #8]
 800c534:	3b01      	subs	r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	b410      	push	{r4}
 800c53a:	6093      	str	r3, [r2, #8]
 800c53c:	da08      	bge.n	800c550 <__sfputc_r+0x1e>
 800c53e:	6994      	ldr	r4, [r2, #24]
 800c540:	42a3      	cmp	r3, r4
 800c542:	db01      	blt.n	800c548 <__sfputc_r+0x16>
 800c544:	290a      	cmp	r1, #10
 800c546:	d103      	bne.n	800c550 <__sfputc_r+0x1e>
 800c548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c54c:	f000 b932 	b.w	800c7b4 <__swbuf_r>
 800c550:	6813      	ldr	r3, [r2, #0]
 800c552:	1c58      	adds	r0, r3, #1
 800c554:	6010      	str	r0, [r2, #0]
 800c556:	7019      	strb	r1, [r3, #0]
 800c558:	4608      	mov	r0, r1
 800c55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <__sfputs_r>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	4606      	mov	r6, r0
 800c564:	460f      	mov	r7, r1
 800c566:	4614      	mov	r4, r2
 800c568:	18d5      	adds	r5, r2, r3
 800c56a:	42ac      	cmp	r4, r5
 800c56c:	d101      	bne.n	800c572 <__sfputs_r+0x12>
 800c56e:	2000      	movs	r0, #0
 800c570:	e007      	b.n	800c582 <__sfputs_r+0x22>
 800c572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c576:	463a      	mov	r2, r7
 800c578:	4630      	mov	r0, r6
 800c57a:	f7ff ffda 	bl	800c532 <__sfputc_r>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	d1f3      	bne.n	800c56a <__sfputs_r+0xa>
 800c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c584 <_vfiprintf_r>:
 800c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c588:	460d      	mov	r5, r1
 800c58a:	b09d      	sub	sp, #116	@ 0x74
 800c58c:	4614      	mov	r4, r2
 800c58e:	4698      	mov	r8, r3
 800c590:	4606      	mov	r6, r0
 800c592:	b118      	cbz	r0, 800c59c <_vfiprintf_r+0x18>
 800c594:	6a03      	ldr	r3, [r0, #32]
 800c596:	b90b      	cbnz	r3, 800c59c <_vfiprintf_r+0x18>
 800c598:	f7fe f8a0 	bl	800a6dc <__sinit>
 800c59c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c59e:	07d9      	lsls	r1, r3, #31
 800c5a0:	d405      	bmi.n	800c5ae <_vfiprintf_r+0x2a>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	059a      	lsls	r2, r3, #22
 800c5a6:	d402      	bmi.n	800c5ae <_vfiprintf_r+0x2a>
 800c5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5aa:	f7fe fa0e 	bl	800a9ca <__retarget_lock_acquire_recursive>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	071b      	lsls	r3, r3, #28
 800c5b2:	d501      	bpl.n	800c5b8 <_vfiprintf_r+0x34>
 800c5b4:	692b      	ldr	r3, [r5, #16]
 800c5b6:	b99b      	cbnz	r3, 800c5e0 <_vfiprintf_r+0x5c>
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f000 f938 	bl	800c830 <__swsetup_r>
 800c5c0:	b170      	cbz	r0, 800c5e0 <_vfiprintf_r+0x5c>
 800c5c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5c4:	07dc      	lsls	r4, r3, #31
 800c5c6:	d504      	bpl.n	800c5d2 <_vfiprintf_r+0x4e>
 800c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5cc:	b01d      	add	sp, #116	@ 0x74
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	0598      	lsls	r0, r3, #22
 800c5d6:	d4f7      	bmi.n	800c5c8 <_vfiprintf_r+0x44>
 800c5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5da:	f7fe f9f7 	bl	800a9cc <__retarget_lock_release_recursive>
 800c5de:	e7f3      	b.n	800c5c8 <_vfiprintf_r+0x44>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e4:	2320      	movs	r3, #32
 800c5e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ee:	2330      	movs	r3, #48	@ 0x30
 800c5f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7a0 <_vfiprintf_r+0x21c>
 800c5f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5f8:	f04f 0901 	mov.w	r9, #1
 800c5fc:	4623      	mov	r3, r4
 800c5fe:	469a      	mov	sl, r3
 800c600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c604:	b10a      	cbz	r2, 800c60a <_vfiprintf_r+0x86>
 800c606:	2a25      	cmp	r2, #37	@ 0x25
 800c608:	d1f9      	bne.n	800c5fe <_vfiprintf_r+0x7a>
 800c60a:	ebba 0b04 	subs.w	fp, sl, r4
 800c60e:	d00b      	beq.n	800c628 <_vfiprintf_r+0xa4>
 800c610:	465b      	mov	r3, fp
 800c612:	4622      	mov	r2, r4
 800c614:	4629      	mov	r1, r5
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff ffa2 	bl	800c560 <__sfputs_r>
 800c61c:	3001      	adds	r0, #1
 800c61e:	f000 80a7 	beq.w	800c770 <_vfiprintf_r+0x1ec>
 800c622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c624:	445a      	add	r2, fp
 800c626:	9209      	str	r2, [sp, #36]	@ 0x24
 800c628:	f89a 3000 	ldrb.w	r3, [sl]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 809f 	beq.w	800c770 <_vfiprintf_r+0x1ec>
 800c632:	2300      	movs	r3, #0
 800c634:	f04f 32ff 	mov.w	r2, #4294967295
 800c638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63c:	f10a 0a01 	add.w	sl, sl, #1
 800c640:	9304      	str	r3, [sp, #16]
 800c642:	9307      	str	r3, [sp, #28]
 800c644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c648:	931a      	str	r3, [sp, #104]	@ 0x68
 800c64a:	4654      	mov	r4, sl
 800c64c:	2205      	movs	r2, #5
 800c64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c652:	4853      	ldr	r0, [pc, #332]	@ (800c7a0 <_vfiprintf_r+0x21c>)
 800c654:	f7f3 fddc 	bl	8000210 <memchr>
 800c658:	9a04      	ldr	r2, [sp, #16]
 800c65a:	b9d8      	cbnz	r0, 800c694 <_vfiprintf_r+0x110>
 800c65c:	06d1      	lsls	r1, r2, #27
 800c65e:	bf44      	itt	mi
 800c660:	2320      	movmi	r3, #32
 800c662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c666:	0713      	lsls	r3, r2, #28
 800c668:	bf44      	itt	mi
 800c66a:	232b      	movmi	r3, #43	@ 0x2b
 800c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c670:	f89a 3000 	ldrb.w	r3, [sl]
 800c674:	2b2a      	cmp	r3, #42	@ 0x2a
 800c676:	d015      	beq.n	800c6a4 <_vfiprintf_r+0x120>
 800c678:	9a07      	ldr	r2, [sp, #28]
 800c67a:	4654      	mov	r4, sl
 800c67c:	2000      	movs	r0, #0
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4621      	mov	r1, r4
 800c684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c688:	3b30      	subs	r3, #48	@ 0x30
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d94b      	bls.n	800c726 <_vfiprintf_r+0x1a2>
 800c68e:	b1b0      	cbz	r0, 800c6be <_vfiprintf_r+0x13a>
 800c690:	9207      	str	r2, [sp, #28]
 800c692:	e014      	b.n	800c6be <_vfiprintf_r+0x13a>
 800c694:	eba0 0308 	sub.w	r3, r0, r8
 800c698:	fa09 f303 	lsl.w	r3, r9, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	46a2      	mov	sl, r4
 800c6a2:	e7d2      	b.n	800c64a <_vfiprintf_r+0xc6>
 800c6a4:	9b03      	ldr	r3, [sp, #12]
 800c6a6:	1d19      	adds	r1, r3, #4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	9103      	str	r1, [sp, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bfbb      	ittet	lt
 800c6b0:	425b      	neglt	r3, r3
 800c6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b6:	9307      	strge	r3, [sp, #28]
 800c6b8:	9307      	strlt	r3, [sp, #28]
 800c6ba:	bfb8      	it	lt
 800c6bc:	9204      	strlt	r2, [sp, #16]
 800c6be:	7823      	ldrb	r3, [r4, #0]
 800c6c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6c2:	d10a      	bne.n	800c6da <_vfiprintf_r+0x156>
 800c6c4:	7863      	ldrb	r3, [r4, #1]
 800c6c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c8:	d132      	bne.n	800c730 <_vfiprintf_r+0x1ac>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	1d1a      	adds	r2, r3, #4
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	9203      	str	r2, [sp, #12]
 800c6d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6d6:	3402      	adds	r4, #2
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7b0 <_vfiprintf_r+0x22c>
 800c6de:	7821      	ldrb	r1, [r4, #0]
 800c6e0:	2203      	movs	r2, #3
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	f7f3 fd94 	bl	8000210 <memchr>
 800c6e8:	b138      	cbz	r0, 800c6fa <_vfiprintf_r+0x176>
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	eba0 000a 	sub.w	r0, r0, sl
 800c6f0:	2240      	movs	r2, #64	@ 0x40
 800c6f2:	4082      	lsls	r2, r0
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fe:	4829      	ldr	r0, [pc, #164]	@ (800c7a4 <_vfiprintf_r+0x220>)
 800c700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c704:	2206      	movs	r2, #6
 800c706:	f7f3 fd83 	bl	8000210 <memchr>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	d03f      	beq.n	800c78e <_vfiprintf_r+0x20a>
 800c70e:	4b26      	ldr	r3, [pc, #152]	@ (800c7a8 <_vfiprintf_r+0x224>)
 800c710:	bb1b      	cbnz	r3, 800c75a <_vfiprintf_r+0x1d6>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	3307      	adds	r3, #7
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	3308      	adds	r3, #8
 800c71c:	9303      	str	r3, [sp, #12]
 800c71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c720:	443b      	add	r3, r7
 800c722:	9309      	str	r3, [sp, #36]	@ 0x24
 800c724:	e76a      	b.n	800c5fc <_vfiprintf_r+0x78>
 800c726:	fb0c 3202 	mla	r2, ip, r2, r3
 800c72a:	460c      	mov	r4, r1
 800c72c:	2001      	movs	r0, #1
 800c72e:	e7a8      	b.n	800c682 <_vfiprintf_r+0xfe>
 800c730:	2300      	movs	r3, #0
 800c732:	3401      	adds	r4, #1
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	4619      	mov	r1, r3
 800c738:	f04f 0c0a 	mov.w	ip, #10
 800c73c:	4620      	mov	r0, r4
 800c73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c742:	3a30      	subs	r2, #48	@ 0x30
 800c744:	2a09      	cmp	r2, #9
 800c746:	d903      	bls.n	800c750 <_vfiprintf_r+0x1cc>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0c6      	beq.n	800c6da <_vfiprintf_r+0x156>
 800c74c:	9105      	str	r1, [sp, #20]
 800c74e:	e7c4      	b.n	800c6da <_vfiprintf_r+0x156>
 800c750:	fb0c 2101 	mla	r1, ip, r1, r2
 800c754:	4604      	mov	r4, r0
 800c756:	2301      	movs	r3, #1
 800c758:	e7f0      	b.n	800c73c <_vfiprintf_r+0x1b8>
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	462a      	mov	r2, r5
 800c760:	4b12      	ldr	r3, [pc, #72]	@ (800c7ac <_vfiprintf_r+0x228>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	4630      	mov	r0, r6
 800c766:	f7fd fb77 	bl	8009e58 <_printf_float>
 800c76a:	4607      	mov	r7, r0
 800c76c:	1c78      	adds	r0, r7, #1
 800c76e:	d1d6      	bne.n	800c71e <_vfiprintf_r+0x19a>
 800c770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c772:	07d9      	lsls	r1, r3, #31
 800c774:	d405      	bmi.n	800c782 <_vfiprintf_r+0x1fe>
 800c776:	89ab      	ldrh	r3, [r5, #12]
 800c778:	059a      	lsls	r2, r3, #22
 800c77a:	d402      	bmi.n	800c782 <_vfiprintf_r+0x1fe>
 800c77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c77e:	f7fe f925 	bl	800a9cc <__retarget_lock_release_recursive>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	065b      	lsls	r3, r3, #25
 800c786:	f53f af1f 	bmi.w	800c5c8 <_vfiprintf_r+0x44>
 800c78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c78c:	e71e      	b.n	800c5cc <_vfiprintf_r+0x48>
 800c78e:	ab03      	add	r3, sp, #12
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	462a      	mov	r2, r5
 800c794:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <_vfiprintf_r+0x228>)
 800c796:	a904      	add	r1, sp, #16
 800c798:	4630      	mov	r0, r6
 800c79a:	f7fd fdf5 	bl	800a388 <_printf_i>
 800c79e:	e7e4      	b.n	800c76a <_vfiprintf_r+0x1e6>
 800c7a0:	0800d012 	.word	0x0800d012
 800c7a4:	0800d01c 	.word	0x0800d01c
 800c7a8:	08009e59 	.word	0x08009e59
 800c7ac:	0800c561 	.word	0x0800c561
 800c7b0:	0800d018 	.word	0x0800d018

0800c7b4 <__swbuf_r>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	460e      	mov	r6, r1
 800c7b8:	4614      	mov	r4, r2
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	b118      	cbz	r0, 800c7c6 <__swbuf_r+0x12>
 800c7be:	6a03      	ldr	r3, [r0, #32]
 800c7c0:	b90b      	cbnz	r3, 800c7c6 <__swbuf_r+0x12>
 800c7c2:	f7fd ff8b 	bl	800a6dc <__sinit>
 800c7c6:	69a3      	ldr	r3, [r4, #24]
 800c7c8:	60a3      	str	r3, [r4, #8]
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	071a      	lsls	r2, r3, #28
 800c7ce:	d501      	bpl.n	800c7d4 <__swbuf_r+0x20>
 800c7d0:	6923      	ldr	r3, [r4, #16]
 800c7d2:	b943      	cbnz	r3, 800c7e6 <__swbuf_r+0x32>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f000 f82a 	bl	800c830 <__swsetup_r>
 800c7dc:	b118      	cbz	r0, 800c7e6 <__swbuf_r+0x32>
 800c7de:	f04f 37ff 	mov.w	r7, #4294967295
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	6922      	ldr	r2, [r4, #16]
 800c7ea:	1a98      	subs	r0, r3, r2
 800c7ec:	6963      	ldr	r3, [r4, #20]
 800c7ee:	b2f6      	uxtb	r6, r6
 800c7f0:	4283      	cmp	r3, r0
 800c7f2:	4637      	mov	r7, r6
 800c7f4:	dc05      	bgt.n	800c802 <__swbuf_r+0x4e>
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	f7ff fda7 	bl	800c34c <_fflush_r>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1ed      	bne.n	800c7de <__swbuf_r+0x2a>
 800c802:	68a3      	ldr	r3, [r4, #8]
 800c804:	3b01      	subs	r3, #1
 800c806:	60a3      	str	r3, [r4, #8]
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	6022      	str	r2, [r4, #0]
 800c80e:	701e      	strb	r6, [r3, #0]
 800c810:	6962      	ldr	r2, [r4, #20]
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	429a      	cmp	r2, r3
 800c816:	d004      	beq.n	800c822 <__swbuf_r+0x6e>
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	07db      	lsls	r3, r3, #31
 800c81c:	d5e1      	bpl.n	800c7e2 <__swbuf_r+0x2e>
 800c81e:	2e0a      	cmp	r6, #10
 800c820:	d1df      	bne.n	800c7e2 <__swbuf_r+0x2e>
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	f7ff fd91 	bl	800c34c <_fflush_r>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0d9      	beq.n	800c7e2 <__swbuf_r+0x2e>
 800c82e:	e7d6      	b.n	800c7de <__swbuf_r+0x2a>

0800c830 <__swsetup_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4b29      	ldr	r3, [pc, #164]	@ (800c8d8 <__swsetup_r+0xa8>)
 800c834:	4605      	mov	r5, r0
 800c836:	6818      	ldr	r0, [r3, #0]
 800c838:	460c      	mov	r4, r1
 800c83a:	b118      	cbz	r0, 800c844 <__swsetup_r+0x14>
 800c83c:	6a03      	ldr	r3, [r0, #32]
 800c83e:	b90b      	cbnz	r3, 800c844 <__swsetup_r+0x14>
 800c840:	f7fd ff4c 	bl	800a6dc <__sinit>
 800c844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c848:	0719      	lsls	r1, r3, #28
 800c84a:	d422      	bmi.n	800c892 <__swsetup_r+0x62>
 800c84c:	06da      	lsls	r2, r3, #27
 800c84e:	d407      	bmi.n	800c860 <__swsetup_r+0x30>
 800c850:	2209      	movs	r2, #9
 800c852:	602a      	str	r2, [r5, #0]
 800c854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c858:	81a3      	strh	r3, [r4, #12]
 800c85a:	f04f 30ff 	mov.w	r0, #4294967295
 800c85e:	e033      	b.n	800c8c8 <__swsetup_r+0x98>
 800c860:	0758      	lsls	r0, r3, #29
 800c862:	d512      	bpl.n	800c88a <__swsetup_r+0x5a>
 800c864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c866:	b141      	cbz	r1, 800c87a <__swsetup_r+0x4a>
 800c868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c86c:	4299      	cmp	r1, r3
 800c86e:	d002      	beq.n	800c876 <__swsetup_r+0x46>
 800c870:	4628      	mov	r0, r5
 800c872:	f7fe ff15 	bl	800b6a0 <_free_r>
 800c876:	2300      	movs	r3, #0
 800c878:	6363      	str	r3, [r4, #52]	@ 0x34
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c880:	81a3      	strh	r3, [r4, #12]
 800c882:	2300      	movs	r3, #0
 800c884:	6063      	str	r3, [r4, #4]
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	89a3      	ldrh	r3, [r4, #12]
 800c88c:	f043 0308 	orr.w	r3, r3, #8
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	6923      	ldr	r3, [r4, #16]
 800c894:	b94b      	cbnz	r3, 800c8aa <__swsetup_r+0x7a>
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c89c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8a0:	d003      	beq.n	800c8aa <__swsetup_r+0x7a>
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 f883 	bl	800c9b0 <__smakebuf_r>
 800c8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ae:	f013 0201 	ands.w	r2, r3, #1
 800c8b2:	d00a      	beq.n	800c8ca <__swsetup_r+0x9a>
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	60a2      	str	r2, [r4, #8]
 800c8b8:	6962      	ldr	r2, [r4, #20]
 800c8ba:	4252      	negs	r2, r2
 800c8bc:	61a2      	str	r2, [r4, #24]
 800c8be:	6922      	ldr	r2, [r4, #16]
 800c8c0:	b942      	cbnz	r2, 800c8d4 <__swsetup_r+0xa4>
 800c8c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8c6:	d1c5      	bne.n	800c854 <__swsetup_r+0x24>
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	0799      	lsls	r1, r3, #30
 800c8cc:	bf58      	it	pl
 800c8ce:	6962      	ldrpl	r2, [r4, #20]
 800c8d0:	60a2      	str	r2, [r4, #8]
 800c8d2:	e7f4      	b.n	800c8be <__swsetup_r+0x8e>
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	e7f7      	b.n	800c8c8 <__swsetup_r+0x98>
 800c8d8:	20000024 	.word	0x20000024

0800c8dc <_raise_r>:
 800c8dc:	291f      	cmp	r1, #31
 800c8de:	b538      	push	{r3, r4, r5, lr}
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	d904      	bls.n	800c8f0 <_raise_r+0x14>
 800c8e6:	2316      	movs	r3, #22
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8f2:	b112      	cbz	r2, 800c8fa <_raise_r+0x1e>
 800c8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8f8:	b94b      	cbnz	r3, 800c90e <_raise_r+0x32>
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f000 f830 	bl	800c960 <_getpid_r>
 800c900:	4622      	mov	r2, r4
 800c902:	4601      	mov	r1, r0
 800c904:	4628      	mov	r0, r5
 800c906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c90a:	f000 b817 	b.w	800c93c <_kill_r>
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d00a      	beq.n	800c928 <_raise_r+0x4c>
 800c912:	1c59      	adds	r1, r3, #1
 800c914:	d103      	bne.n	800c91e <_raise_r+0x42>
 800c916:	2316      	movs	r3, #22
 800c918:	6003      	str	r3, [r0, #0]
 800c91a:	2001      	movs	r0, #1
 800c91c:	e7e7      	b.n	800c8ee <_raise_r+0x12>
 800c91e:	2100      	movs	r1, #0
 800c920:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c924:	4620      	mov	r0, r4
 800c926:	4798      	blx	r3
 800c928:	2000      	movs	r0, #0
 800c92a:	e7e0      	b.n	800c8ee <_raise_r+0x12>

0800c92c <raise>:
 800c92c:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <raise+0xc>)
 800c92e:	4601      	mov	r1, r0
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f7ff bfd3 	b.w	800c8dc <_raise_r>
 800c936:	bf00      	nop
 800c938:	20000024 	.word	0x20000024

0800c93c <_kill_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4d07      	ldr	r5, [pc, #28]	@ (800c95c <_kill_r+0x20>)
 800c940:	2300      	movs	r3, #0
 800c942:	4604      	mov	r4, r0
 800c944:	4608      	mov	r0, r1
 800c946:	4611      	mov	r1, r2
 800c948:	602b      	str	r3, [r5, #0]
 800c94a:	f7f5 fcdf 	bl	800230c <_kill>
 800c94e:	1c43      	adds	r3, r0, #1
 800c950:	d102      	bne.n	800c958 <_kill_r+0x1c>
 800c952:	682b      	ldr	r3, [r5, #0]
 800c954:	b103      	cbz	r3, 800c958 <_kill_r+0x1c>
 800c956:	6023      	str	r3, [r4, #0]
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	bf00      	nop
 800c95c:	20005340 	.word	0x20005340

0800c960 <_getpid_r>:
 800c960:	f7f5 bccc 	b.w	80022fc <_getpid>

0800c964 <__swhatbuf_r>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	460c      	mov	r4, r1
 800c968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c96c:	2900      	cmp	r1, #0
 800c96e:	b096      	sub	sp, #88	@ 0x58
 800c970:	4615      	mov	r5, r2
 800c972:	461e      	mov	r6, r3
 800c974:	da0d      	bge.n	800c992 <__swhatbuf_r+0x2e>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	bf14      	ite	ne
 800c982:	2340      	movne	r3, #64	@ 0x40
 800c984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c988:	2000      	movs	r0, #0
 800c98a:	6031      	str	r1, [r6, #0]
 800c98c:	602b      	str	r3, [r5, #0]
 800c98e:	b016      	add	sp, #88	@ 0x58
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	466a      	mov	r2, sp
 800c994:	f000 f848 	bl	800ca28 <_fstat_r>
 800c998:	2800      	cmp	r0, #0
 800c99a:	dbec      	blt.n	800c976 <__swhatbuf_r+0x12>
 800c99c:	9901      	ldr	r1, [sp, #4]
 800c99e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9a6:	4259      	negs	r1, r3
 800c9a8:	4159      	adcs	r1, r3
 800c9aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9ae:	e7eb      	b.n	800c988 <__swhatbuf_r+0x24>

0800c9b0 <__smakebuf_r>:
 800c9b0:	898b      	ldrh	r3, [r1, #12]
 800c9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9b4:	079d      	lsls	r5, r3, #30
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	d507      	bpl.n	800c9cc <__smakebuf_r+0x1c>
 800c9bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	6123      	str	r3, [r4, #16]
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	6163      	str	r3, [r4, #20]
 800c9c8:	b003      	add	sp, #12
 800c9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9cc:	ab01      	add	r3, sp, #4
 800c9ce:	466a      	mov	r2, sp
 800c9d0:	f7ff ffc8 	bl	800c964 <__swhatbuf_r>
 800c9d4:	9f00      	ldr	r7, [sp, #0]
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	4639      	mov	r1, r7
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f7fe fed4 	bl	800b788 <_malloc_r>
 800c9e0:	b948      	cbnz	r0, 800c9f6 <__smakebuf_r+0x46>
 800c9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e6:	059a      	lsls	r2, r3, #22
 800c9e8:	d4ee      	bmi.n	800c9c8 <__smakebuf_r+0x18>
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	f043 0302 	orr.w	r3, r3, #2
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	e7e2      	b.n	800c9bc <__smakebuf_r+0xc>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	6020      	str	r0, [r4, #0]
 800c9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca06:	b15b      	cbz	r3, 800ca20 <__smakebuf_r+0x70>
 800ca08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 f81d 	bl	800ca4c <_isatty_r>
 800ca12:	b128      	cbz	r0, 800ca20 <__smakebuf_r+0x70>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	431d      	orrs	r5, r3
 800ca24:	81a5      	strh	r5, [r4, #12]
 800ca26:	e7cf      	b.n	800c9c8 <__smakebuf_r+0x18>

0800ca28 <_fstat_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d07      	ldr	r5, [pc, #28]	@ (800ca48 <_fstat_r+0x20>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	4611      	mov	r1, r2
 800ca34:	602b      	str	r3, [r5, #0]
 800ca36:	f7f5 fcc9 	bl	80023cc <_fstat>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	d102      	bne.n	800ca44 <_fstat_r+0x1c>
 800ca3e:	682b      	ldr	r3, [r5, #0]
 800ca40:	b103      	cbz	r3, 800ca44 <_fstat_r+0x1c>
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	bd38      	pop	{r3, r4, r5, pc}
 800ca46:	bf00      	nop
 800ca48:	20005340 	.word	0x20005340

0800ca4c <_isatty_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	4d06      	ldr	r5, [pc, #24]	@ (800ca68 <_isatty_r+0x1c>)
 800ca50:	2300      	movs	r3, #0
 800ca52:	4604      	mov	r4, r0
 800ca54:	4608      	mov	r0, r1
 800ca56:	602b      	str	r3, [r5, #0]
 800ca58:	f7f5 fcc8 	bl	80023ec <_isatty>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_isatty_r+0x1a>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_isatty_r+0x1a>
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	20005340 	.word	0x20005340

0800ca6c <_init>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	bf00      	nop
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr

0800ca78 <_fini>:
 800ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7a:	bf00      	nop
 800ca7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7e:	bc08      	pop	{r3}
 800ca80:	469e      	mov	lr, r3
 800ca82:	4770      	bx	lr
