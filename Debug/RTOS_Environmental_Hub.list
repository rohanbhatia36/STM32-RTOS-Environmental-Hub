
RTOS_Environmental_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800be68  0800be68  0000ce68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c35c  0800c35c  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c35c  0800c35c  0000d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c364  0800c364  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c364  0800c364  0000d364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c368  0800c368  0000d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c36c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d00  200001d8  0800c544  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ed8  0800c544  0000eed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dff0  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e17  00000000  00000000  0002c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00030010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001411  00000000  00000000  000319b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bf3  00000000  00000000  00032dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da92  00000000  00000000  000589bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed1f1  00000000  00000000  0007644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016363f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea4  00000000  00000000  00163684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0016b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be4c 	.word	0x0800be4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800be4c 	.word	0x0800be4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__reg_write>:

// Write a new value to BMP280 register
// input:
//   reg - register number
//   value - new register value
static void __reg_write(uint8_t reg, uint8_t value) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] = { reg, value };
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	733b      	strb	r3, [r7, #12]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	21ec      	movs	r1, #236	@ 0xec
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <__reg_write+0x34>)
 8000f3c:	f001 fff4 	bl	8002f28 <HAL_I2C_Master_Transmit>

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000258 	.word	0x20000258

08000f4c <__reg_read>:

// Read a value of the BMP280 register
// input:
//   reg - register number
// return: register value (zero in case of error on I2C bus)
static uint8_t __reg_read(uint8_t reg) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	21ec      	movs	r1, #236	@ 0xec
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <__reg_read+0x40>)
 8000f68:	f001 ffde 	bl	8002f28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMP280_I2C_PORT, BMP280_ADDR, &value, 1, HAL_MAX_DELAY);;
 8000f6c:	f107 020f 	add.w	r2, r7, #15
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	21ec      	movs	r1, #236	@ 0xec
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <__reg_read+0x40>)
 8000f7c:	f002 f8d2 	bl	8003124 <HAL_I2C_Master_Receive>

	return value;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000258 	.word	0x20000258

08000f90 <__reg_read_bulk>:
// input:
//   reg - starting register number
//   buf - pointer to the buffer to store data
//   len - number of registers to read
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
static BMP280_RESULT __reg_read_bulk(uint8_t reg, uint8_t *buf, uint32_t count) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(BMP280_I2C_PORT, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000f9e:	f107 020f 	add.w	r2, r7, #15
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	21ec      	movs	r1, #236	@ 0xec
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <__reg_read_bulk+0x50>)
 8000fae:	f001 ffbb 	bl	8002f28 <HAL_I2C_Master_Transmit>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <__reg_read_bulk+0x46>
		if (HAL_I2C_Master_Receive(BMP280_I2C_PORT, BMP280_ADDR, buf, count, HAL_MAX_DELAY) == HAL_OK) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	21ec      	movs	r1, #236	@ 0xec
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <__reg_read_bulk+0x50>)
 8000fc8:	f002 f8ac 	bl	8003124 <HAL_I2C_Master_Receive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <__reg_read_bulk+0x46>
			return BMP280_SUCCESS;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <__reg_read_bulk+0x48>
		}
	}

	return BMP280_ERROR;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000258 	.word	0x20000258

08000fe4 <BMP280_Check>:

// Check if BMP280 present on I2C bus
// return: BMP280_SUCCESS if BMP280 present, BMP280_ERROR otherwise
BMP280_RESULT BMP280_Check(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	switch (BMP280_GetVersion()) {
 8000fe8:	f000 f809 	bl	8000ffe <BMP280_GetVersion>
 8000fec:	4603      	mov	r3, r0
 8000fee:	3b56      	subs	r3, #86	@ 0x56
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d801      	bhi.n	8000ff8 <BMP280_Check+0x14>
		case BMP280_CHIP_ID1:
		case BMP280_CHIP_ID2:
		case BMP280_CHIP_ID3:
			return BMP280_SUCCESS;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <BMP280_Check+0x16>
		default:
			return BMP280_ERROR;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <BMP280_GetVersion>:
	__reg_write(BMP280_REG_RESET, BMP280_SOFT_RESET_KEY);
}

// Get version of the BMP280 chip
// return: version of BMP280 chip or zero in case of chip absence or error on I2C bus
inline uint8_t BMP280_GetVersion(void) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	return __reg_read(BMP280_REG_ID);
 8001002:	20d0      	movs	r0, #208	@ 0xd0
 8001004:	f7ff ffa2 	bl	8000f4c <__reg_read>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}

0800100e <BMP280_SetMode>:

// Set sensor mode of the BMP280 chip
// input:
//   mode - new mode (one of BMP280_MODE_xx values)
// note: always set the power mode after sensor configuration is done
void BMP280_SetMode(uint8_t mode) {
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
	// Configure 'mode' bits in 'ctrl_meas' (0xF4) register
	mode &= BMP280_MODE_MSK;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK);
 8001020:	20f4      	movs	r0, #244	@ 0xf4
 8001022:	f7ff ff93 	bl	8000f4c <__reg_read>
 8001026:	4603      	mov	r3, r0
 8001028:	f023 0303 	bic.w	r3, r3, #3
 800102c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | mode);
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4313      	orrs	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	20f4      	movs	r0, #244	@ 0xf4
 800103a:	f7ff ff6b 	bl	8000f14 <__reg_write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <BMP280_SetOSRST>:
}

// Set oversampling of temperature data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_T_Xx values)
void BMP280_SetOSRST(uint8_t osrs) {
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_t' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_T_MSK;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f023 031f 	bic.w	r3, r3, #31
 8001056:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_T_MSK);
 8001058:	20f4      	movs	r0, #244	@ 0xf4
 800105a:	f7ff ff77 	bl	8000f4c <__reg_read>
 800105e:	4603      	mov	r3, r0
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4313      	orrs	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	20f4      	movs	r0, #244	@ 0xf4
 8001072:	f7ff ff4f 	bl	8000f14 <__reg_write>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <BMP280_SetOSRSP>:

// Set oversampling of pressure data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_P_Xx values)
void BMP280_SetOSRSP(uint8_t osrs) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_p' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_P_MSK;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 031c 	and.w	r3, r3, #28
 800108e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK);
 8001090:	20f4      	movs	r0, #244	@ 0xf4
 8001092:	f7ff ff5b 	bl	8000f4c <__reg_read>
 8001096:	4603      	mov	r3, r0
 8001098:	f023 031c 	bic.w	r3, r3, #28
 800109c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	20f4      	movs	r0, #244	@ 0xf4
 80010aa:	f7ff ff33 	bl	8000f14 <__reg_write>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <BMP280_Read_Calibration>:

// Read calibration data
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
BMP280_RESULT BMP280_Read_Calibration(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// Bulk read from 'calib00' to 'calib25'
	return __reg_read_bulk(BMP280_REG_CALIB00, (uint8_t *)&cal_param, sizeof(cal_param));
 80010bc:	2218      	movs	r2, #24
 80010be:	4903      	ldr	r1, [pc, #12]	@ (80010cc <BMP280_Read_Calibration+0x14>)
 80010c0:	2088      	movs	r0, #136	@ 0x88
 80010c2:	f7ff ff65 	bl	8000f90 <__reg_read_bulk>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f4 	.word	0x200001f4

080010d0 <BMP280_Read_UT>:
// input:
//   UT - pointer to store value (signed 32-bit)
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
// note: the '0x80000' value in UT means no temperature data is present,
//       i.e. that measurement is disabled or not ready yet
BMP280_RESULT BMP280_Read_UT(int32_t *UT) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	// Bulk read from 'temp_msb' to 'temp_xlsb'
	if (__reg_read_bulk(BMP280_REG_TEMP_MSB, buf, sizeof(buf)) == BMP280_SUCCESS) {
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2203      	movs	r2, #3
 80010de:	4619      	mov	r1, r3
 80010e0:	20fa      	movs	r0, #250	@ 0xfa
 80010e2:	f7ff ff55 	bl	8000f90 <__reg_read_bulk>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10c      	bne.n	8001106 <BMP280_Read_UT+0x36>
		*UT = (int32_t)((buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4));
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	031a      	lsls	r2, r3, #12
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4313      	orrs	r3, r2
 80010f6:	7bba      	ldrb	r2, [r7, #14]
 80010f8:	0912      	lsrs	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
		return BMP280_SUCCESS;
 8001102:	2301      	movs	r3, #1
 8001104:	e004      	b.n	8001110 <BMP280_Read_UT+0x40>
	}

	// Default result value
	*UT = BMP280_NO_TEMPERATURE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800110c:	601a      	str	r2, [r3, #0]

	return BMP280_ERROR;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <BMP280_CalcT>:
// Calculate temperature from raw value, resolution is 0.01 degree
// input:
//   UT - raw temperature value
// return: temperature in Celsius degrees (value of '5123' represents '51.23C')
// note: code from the BMP280 datasheet (rev 1.19)
int32_t BMP280_CalcT(int32_t UT) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
#if (BMP280_CALC_TYPE != 2)
	// Integer calculations

	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	10da      	asrs	r2, r3, #3
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <BMP280_CalcT+0x70>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	1ad3      	subs	r3, r2, r3
			* ((int32_t)cal_param.dig_T2)) >> 11;
 800112c:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <BMP280_CalcT+0x70>)
 800112e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	12db      	asrs	r3, r3, #11
	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <BMP280_CalcT+0x74>)
 800113a:	6013      	str	r3, [r2, #0]
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	111b      	asrs	r3, r3, #4
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <BMP280_CalcT+0x70>)
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	1a9b      	subs	r3, r3, r2
			* ((UT >> 4) - ((int32_t)cal_param.dig_T1))) >> 12) \
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1112      	asrs	r2, r2, #4
 800114a:	490f      	ldr	r1, [pc, #60]	@ (8001188 <BMP280_CalcT+0x70>)
 800114c:	8809      	ldrh	r1, [r1, #0]
 800114e:	1a52      	subs	r2, r2, r1
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	131b      	asrs	r3, r3, #12
			* ((int32_t)cal_param.dig_T3)) >> 14;
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <BMP280_CalcT+0x70>)
 8001158:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	139a      	asrs	r2, r3, #14
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <BMP280_CalcT+0x74>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <BMP280_CalcT+0x74>)
 800116a:	6013      	str	r3, [r2, #0]

	return ((t_fine * 5) + 128) >> 8;
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <BMP280_CalcT+0x74>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	3380      	adds	r3, #128	@ 0x80
 8001178:	121b      	asrs	r3, r3, #8
	v_x2 = (v_x2 * v_x2) * ((float)cal_param.dig_T3);
	t_fine_f = v_x1 + v_x2;

	return (int32_t)(((v_x1 + v_x2) / 5120.0F) * 100.0F);
#endif // BMP280_CALC_TYPE
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001f4 	.word	0x200001f4
 800118c:	2000020c 	.word	0x2000020c

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f000 fe70 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f876 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 fa02 	bl	80015a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 f9d6 	bl	8001550 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011a4:	f000 f930 	bl	8001408 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011a8:	f000 f8dc 	bl	8001364 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011ac:	f000 f95a 	bl	8001464 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	if (BMP280_Check() == BMP280_SUCCESS) {
 80011b0:	f7ff ff18 	bl	8000fe4 <BMP280_Check>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10a      	bne.n	80011d0 <main+0x40>
		BMP280_Read_Calibration();
 80011ba:	f7ff ff7d 	bl	80010b8 <BMP280_Read_Calibration>

		BMP280_SetOSRST(BMP280_OSRS_T_x16);
 80011be:	20a0      	movs	r0, #160	@ 0xa0
 80011c0:	f7ff ff41 	bl	8001046 <BMP280_SetOSRST>
		BMP280_SetOSRSP(BMP280_OSRS_P_x16);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f7ff ff5a 	bl	800107e <BMP280_SetOSRSP>

		//set the sensor to Normal Mode to take continuous measurements
		BMP280_SetMode(BMP280_MODE_NORMAL);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff ff1f 	bl	800100e <BMP280_SetMode>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	481c      	ldr	r0, [pc, #112]	@ (8001244 <main+0xb4>)
 80011d4:	f003 fc92 	bl	8004afc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011d8:	f004 fff0 	bl	80061bc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (1, sizeof(float), &temperatureQueue_attributes);
 80011dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <main+0xb8>)
 80011de:	2104      	movs	r1, #4
 80011e0:	2001      	movs	r0, #1
 80011e2:	f005 f8e2 	bl	80063aa <osMessageQueueNew>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a18      	ldr	r2, [pc, #96]	@ (800124c <main+0xbc>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* creation of lightLevelQueue */
  lightLevelQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &lightLevelQueue_attributes);
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <main+0xc0>)
 80011ee:	2104      	movs	r1, #4
 80011f0:	2001      	movs	r0, #1
 80011f2:	f005 f8da 	bl	80063aa <osMessageQueueNew>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <main+0xc4>)
 80011fa:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011fc:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <main+0xc8>)
 80011fe:	2100      	movs	r1, #0
 8001200:	4816      	ldr	r0, [pc, #88]	@ (800125c <main+0xcc>)
 8001202:	f005 f825 	bl	8006250 <osThreadNew>
 8001206:	4603      	mov	r3, r0
 8001208:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <main+0xd0>)
 800120a:	6013      	str	r3, [r2, #0]

  /* creation of readSensorTask */
  readSensorTaskHandle = osThreadNew(StartReadSensorTask, NULL, &readSensorTask_attributes);
 800120c:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <main+0xd4>)
 800120e:	2100      	movs	r1, #0
 8001210:	4815      	ldr	r0, [pc, #84]	@ (8001268 <main+0xd8>)
 8001212:	f005 f81d 	bl	8006250 <osThreadNew>
 8001216:	4603      	mov	r3, r0
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <main+0xdc>)
 800121a:	6013      	str	r3, [r2, #0]

  /* creation of readADCTask */
  readADCTaskHandle = osThreadNew(StartReadADCTask, NULL, &readADCTask_attributes);
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <main+0xe0>)
 800121e:	2100      	movs	r1, #0
 8001220:	4814      	ldr	r0, [pc, #80]	@ (8001274 <main+0xe4>)
 8001222:	f005 f815 	bl	8006250 <osThreadNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a13      	ldr	r2, [pc, #76]	@ (8001278 <main+0xe8>)
 800122a:	6013      	str	r3, [r2, #0]

  /* creation of controlPWMTask */
  controlPWMTaskHandle = osThreadNew(StartControlPWMTask, NULL, &controlPWMTask_attributes);
 800122c:	4a13      	ldr	r2, [pc, #76]	@ (800127c <main+0xec>)
 800122e:	2100      	movs	r1, #0
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <main+0xf0>)
 8001232:	f005 f80d 	bl	8006250 <osThreadNew>
 8001236:	4603      	mov	r3, r0
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <main+0xf4>)
 800123a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800123c:	f004 ffe2 	bl	8006204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <main+0xb0>
 8001244:	200002ac 	.word	0x200002ac
 8001248:	0800bfa0 	.word	0x0800bfa0
 800124c:	2000034c 	.word	0x2000034c
 8001250:	0800bfb8 	.word	0x0800bfb8
 8001254:	20000350 	.word	0x20000350
 8001258:	0800bf10 	.word	0x0800bf10
 800125c:	080016b1 	.word	0x080016b1
 8001260:	2000033c 	.word	0x2000033c
 8001264:	0800bf34 	.word	0x0800bf34
 8001268:	080016fd 	.word	0x080016fd
 800126c:	20000340 	.word	0x20000340
 8001270:	0800bf58 	.word	0x0800bf58
 8001274:	0800176d 	.word	0x0800176d
 8001278:	20000344 	.word	0x20000344
 800127c:	0800bf7c 	.word	0x0800bf7c
 8001280:	080017b9 	.word	0x080017b9
 8001284:	20000348 	.word	0x20000348

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2234      	movs	r2, #52	@ 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f008 fcab 	bl	8009bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <SystemClock_Config+0xd4>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a29      	ldr	r2, [pc, #164]	@ (800135c <SystemClock_Config+0xd4>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <SystemClock_Config+0xd4>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <SystemClock_Config+0xd8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012d4:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <SystemClock_Config+0xd8>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <SystemClock_Config+0xd8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012fc:	2310      	movs	r3, #16
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001300:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001304:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001306:	2304      	movs	r3, #4
 8001308:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800130a:	2302      	movs	r3, #2
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f838 	bl	800438c <HAL_RCC_OscConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001322:	f000 faa9 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001326:	230f      	movs	r3, #15
 8001328:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132a:	2302      	movs	r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2102      	movs	r1, #2
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fca6 	bl	8003c94 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800134e:	f000 fa93 	bl	8001878 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3750      	adds	r7, #80	@ 0x50
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_ADC1_Init+0x98>)
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_ADC1_Init+0x9c>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_ADC1_Init+0x98>)
 800137e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001382:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_ADC1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_ADC1_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013a6:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <MX_ADC1_Init+0xa0>)
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013c6:	f000 fd99 	bl	8001efc <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 fa52 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_ADC1_Init+0x98>)
 80013e6:	f000 ff6b 	bl	80022c0 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013f0:	f000 fa42 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000210 	.word	0x20000210
 8001400:	40012000 	.word	0x40012000
 8001404:	0f000001 	.word	0x0f000001

08001408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_I2C1_Init+0x50>)
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <MX_I2C1_Init+0x54>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001414:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <MX_I2C1_Init+0x58>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <MX_I2C1_Init+0x50>)
 8001446:	f001 fc2b 	bl	8002ca0 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 fa12 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000258 	.word	0x20000258
 800145c:	40005400 	.word	0x40005400
 8001460:	000186a0 	.word	0x000186a0

08001464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	@ 0x38
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001494:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <MX_TIM2_Init+0xe8>)
 8001496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800149c:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <MX_TIM2_Init+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b26      	ldr	r3, [pc, #152]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014bc:	4823      	ldr	r0, [pc, #140]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014be:	f003 fa03 	bl	80048c8 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014c8:	f000 f9d6 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d6:	4619      	mov	r1, r3
 80014d8:	481c      	ldr	r0, [pc, #112]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014da:	f003 fd89 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014e4:	f000 f9c8 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014e8:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM2_Init+0xe8>)
 80014ea:	f003 faad 	bl	8004a48 <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014f4:	f000 f9c0 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_TIM2_Init+0xe8>)
 8001508:	f004 f978 	bl	80057fc <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001512:	f000 f9b1 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	@ 0x60
 8001518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM2_Init+0xe8>)
 800152e:	f003 fc9d 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001538:	f000 f99e 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM2_Init+0xe8>)
 800153e:	f000 fa79 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	@ 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002ac 	.word	0x200002ac

08001550 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <MX_USART2_UART_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_USART2_UART_Init+0x4c>)
 8001588:	f004 f9c8 	bl	800591c <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001592:	f000 f971 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002f4 	.word	0x200002f4
 80015a0:	40004400 	.word	0x40004400

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a29      	ldr	r2, [pc, #164]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <MX_GPIO_Init+0xe0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <MX_GPIO_Init+0xe0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_GPIO_Init+0xe0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <MX_GPIO_Init+0xe0>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_GPIO_Init+0xe0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2120      	movs	r1, #32
 800162e:	4816      	ldr	r0, [pc, #88]	@ (8001688 <MX_GPIO_Init+0xe4>)
 8001630:	f001 faea 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4810      	ldr	r0, [pc, #64]	@ (800168c <MX_GPIO_Init+0xe8>)
 800164c:	f001 f948 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001650:	2320      	movs	r3, #32
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4808      	ldr	r0, [pc, #32]	@ (8001688 <MX_GPIO_Init+0xe4>)
 8001668:	f001 f93a 	bl	80028e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2105      	movs	r1, #5
 8001670:	2028      	movs	r0, #40	@ 0x28
 8001672:	f001 f90b 	bl	800288c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001676:	2028      	movs	r0, #40	@ 0x28
 8001678:	f001 f924 	bl	80028c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	@ 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800169a:	2120      	movs	r1, #32
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800169e:	f001 facc 	bl	8002c3a <HAL_GPIO_TogglePin>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020000 	.word	0x40020000

080016b0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b092      	sub	sp, #72	@ 0x48
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//osMessageQueueGet(temperatureQueueHandle, &temp, NULL, osWaitForever);
		osMessageQueueGet(lightLevelQueueHandle, &light_level, NULL, osWaitForever);
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <StartDefaultTask+0x40>)
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	2200      	movs	r2, #0
 80016c6:	f004 ff43 	bl	8006550 <osMessageQueueGet>

		// Format the temperature into a string
		//uart_buf_len = sprintf(uart_buf, "Temperature: %.2f F\r\n", temp);
		uart_buf_len = sprintf(uart_buf, "Light level: %lu\r\n", light_level);
 80016ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4908      	ldr	r1, [pc, #32]	@ (80016f4 <StartDefaultTask+0x44>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f008 fa28 	bl	8009b28 <siprintf>
 80016d8:	6478      	str	r0, [r7, #68]	@ 0x44

		// Transmit the string over UART
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80016da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 010c 	add.w	r1, r7, #12
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <StartDefaultTask+0x48>)
 80016e6:	f004 f969 	bl	80059bc <HAL_UART_Transmit>
		osMessageQueueGet(lightLevelQueueHandle, &light_level, NULL, osWaitForever);
 80016ea:	bf00      	nop
 80016ec:	e7e4      	b.n	80016b8 <StartDefaultTask+0x8>
 80016ee:	bf00      	nop
 80016f0:	20000350 	.word	0x20000350
 80016f4:	0800bec4 	.word	0x0800bec4
 80016f8:	200002f4 	.word	0x200002f4

080016fc <StartReadSensorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadSensorTask */
void StartReadSensorTask(void *argument)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//read the raw temperature value from the sensor
		BMP280_Read_UT(&raw_temp);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fce1 	bl	80010d0 <BMP280_Read_UT>

		//convert the raw value to a float in degrees Fahrenheit
		temp = (float)BMP280_CalcT(raw_temp) / 100.0f * (float)9/5 + 32;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd01 	bl	8001118 <BMP280_CalcT>
 8001716:	ee07 0a90 	vmov	s15, r0
 800171a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001760 <StartReadSensorTask+0x64>
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800172a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800172e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001736:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001764 <StartReadSensorTask+0x68>
 800173a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173e:	edc7 7a02 	vstr	s15, [r7, #8]

		//put the temperature value into the queue
		//the last parameter is a timeout, 0 means don't wait if the queue is full
		osMessageQueuePut(temperatureQueueHandle, &temp, 0, 0);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <StartReadSensorTask+0x6c>)
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	f107 0108 	add.w	r1, r7, #8
 800174a:	2300      	movs	r3, #0
 800174c:	2200      	movs	r2, #0
 800174e:	f004 fe9f 	bl	8006490 <osMessageQueuePut>

		// Wait for 2 seconds before reading again
		osDelay(2000);
 8001752:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001756:	f004 fe0d 	bl	8006374 <osDelay>
		BMP280_Read_UT(&raw_temp);
 800175a:	bf00      	nop
 800175c:	e7d2      	b.n	8001704 <StartReadSensorTask+0x8>
 800175e:	bf00      	nop
 8001760:	42c80000 	.word	0x42c80000
 8001764:	42000000 	.word	0x42000000
 8001768:	2000034c 	.word	0x2000034c

0800176c <StartReadADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadADCTask */
void StartReadADCTask(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;

	/* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8001774:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <StartReadADCTask+0x44>)
 8001776:	f000 fc05 	bl	8001f84 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 800177a:	2164      	movs	r1, #100	@ 0x64
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <StartReadADCTask+0x44>)
 800177e:	f000 fd06 	bl	800218e <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8001782:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <StartReadADCTask+0x44>)
 8001784:	f000 fd8e 	bl	80022a4 <HAL_ADC_GetValue>
 8001788:	4603      	mov	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 800178c:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <StartReadADCTask+0x44>)
 800178e:	f000 fccb 	bl	8002128 <HAL_ADC_Stop>
		osMessageQueuePut(lightLevelQueueHandle, &adc_value, 0 ,0);
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <StartReadADCTask+0x48>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	f107 010c 	add.w	r1, r7, #12
 800179a:	2300      	movs	r3, #0
 800179c:	2200      	movs	r2, #0
 800179e:	f004 fe77 	bl	8006490 <osMessageQueuePut>

		osDelay(500);
 80017a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017a6:	f004 fde5 	bl	8006374 <osDelay>
		HAL_ADC_Start(&hadc1);
 80017aa:	bf00      	nop
 80017ac:	e7e2      	b.n	8001774 <StartReadADCTask+0x8>
 80017ae:	bf00      	nop
 80017b0:	20000210 	.word	0x20000210
 80017b4:	20000350 	.word	0x20000350

080017b8 <StartControlPWMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlPWMTask */
void StartControlPWMTask(void *argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b092      	sub	sp, #72	@ 0x48
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Wait for a light level value to arrive
    osMessageQueueGet(lightLevelQueueHandle, &adc_value, NULL, osWaitForever);
 80017c0:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <StartControlPWMTask+0x84>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2200      	movs	r2, #0
 80017ce:	f004 febf 	bl	8006550 <osMessageQueueGet>

    // --- ADD THIS FOR DEBUGGING ---
    uart_buf_len = sprintf(uart_buf, "ADC in: %lu\r\n", adc_value);
 80017d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4919      	ldr	r1, [pc, #100]	@ (8001840 <StartControlPWMTask+0x88>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 f9a4 	bl	8009b28 <siprintf>
 80017e0:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80017e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f107 0108 	add.w	r1, r7, #8
 80017ea:	2364      	movs	r3, #100	@ 0x64
 80017ec:	4815      	ldr	r0, [pc, #84]	@ (8001844 <StartControlPWMTask+0x8c>)
 80017ee:	f004 f8e5 	bl	80059bc <HAL_UART_Transmit>
    // -----------------------------

    // Map the ADC value to the PWM range
    pwm_value = 1000 - ((adc_value * 1000) / 4095);
 80017f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f8:	fb03 f202 	mul.w	r2, r3, r2
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <StartControlPWMTask+0x90>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	4413      	add	r3, r2
 8001808:	0adb      	lsrs	r3, r3, #11
 800180a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800180e:	643b      	str	r3, [r7, #64]	@ 0x40

    // --- ADD THIS FOR DEBUGGING ---
    uart_buf_len = sprintf(uart_buf, "PWM out: %lu\r\n", pwm_value);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <StartControlPWMTask+0x94>)
 8001818:	4618      	mov	r0, r3
 800181a:	f008 f985 	bl	8009b28 <siprintf>
 800181e:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 0108 	add.w	r1, r7, #8
 8001828:	2364      	movs	r3, #100	@ 0x64
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <StartControlPWMTask+0x8c>)
 800182c:	f004 f8c6 	bl	80059bc <HAL_UART_Transmit>
    // -----------------------------

    // Set the LED's brightness
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <StartControlPWMTask+0x98>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
    osMessageQueueGet(lightLevelQueueHandle, &adc_value, NULL, osWaitForever);
 8001838:	bf00      	nop
 800183a:	e7c1      	b.n	80017c0 <StartControlPWMTask+0x8>
 800183c:	20000350 	.word	0x20000350
 8001840:	0800bed8 	.word	0x0800bed8
 8001844:	200002f4 	.word	0x200002f4
 8001848:	00100101 	.word	0x00100101
 800184c:	0800bee8 	.word	0x0800bee8
 8001850:	200002ac 	.word	0x200002ac

08001854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001866:	f000 fb29 	bl	8001ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <Error_Handler+0x8>

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_MspInit+0x54>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <HAL_MspInit+0x54>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <HAL_MspInit+0x54>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_MspInit+0x54>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_MspInit+0x54>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_MspInit+0x54>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	210f      	movs	r1, #15
 80018c6:	f06f 0001 	mvn.w	r0, #1
 80018ca:	f000 ffdf 	bl	800288c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <HAL_ADC_MspInit+0x7c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d127      	bne.n	800194e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_ADC_MspInit+0x80>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	4a15      	ldr	r2, [pc, #84]	@ (800195c <HAL_ADC_MspInit+0x80>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	6453      	str	r3, [r2, #68]	@ 0x44
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_ADC_MspInit+0x80>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_ADC_MspInit+0x80>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <HAL_ADC_MspInit+0x80>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_ADC_MspInit+0x80>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001936:	2301      	movs	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <HAL_ADC_MspInit+0x84>)
 800194a:	f000 ffc9 	bl	80028e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012000 	.word	0x40012000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	@ (80019e8 <HAL_I2C_MspInit+0x84>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12c      	bne.n	80019e0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a8:	2312      	movs	r3, #18
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b4:	2304      	movs	r3, #4
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <HAL_I2C_MspInit+0x8c>)
 80019c0:	f000 ff8e 	bl	80028e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 80019ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_I2C_MspInit+0x88>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a54:	d11d      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_TIM_MspPostInit+0x68>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <HAL_TIM_MspPostInit+0x68>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_TIM_MspPostInit+0x68>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a72:	2302      	movs	r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <HAL_TIM_MspPostInit+0x6c>)
 8001a8e:	f000 ff27 	bl	80028e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <HAL_UART_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12b      	bne.n	8001b1e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a10      	ldr	r2, [pc, #64]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001afe:	230c      	movs	r3, #12
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <HAL_UART_MspInit+0x8c>)
 8001b1a:	f000 fee1 	bl	80028e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_InitTick+0xd0>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 f9ac 	bl	8003ec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b70:	f002 f996 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8001b74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b78:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <HAL_InitTick+0xd4>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	3b01      	subs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b86:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b92:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001baa:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001bac:	f002 fe8c 	bl	80048c8 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bbe:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001bc0:	f002 fed2 	bl	8004968 <HAL_TIM_Base_Start_IT>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d111      	bne.n	8001bf6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f000 fe76 	bl	80028c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d808      	bhi.n	8001bf0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001bde:	2200      	movs	r2, #0
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	2019      	movs	r0, #25
 8001be4:	f000 fe52 	bl	800288c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_InitTick+0xe0>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e002      	b.n	8001bf6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3730      	adds	r7, #48	@ 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	20000354 	.word	0x20000354
 8001c10:	40010000 	.word	0x40010000
 8001c14:	20000004 	.word	0x20000004

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <MemManage_Handler+0x4>

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c56:	f003 f819 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000354 	.word	0x20000354

08001c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c6c:	f001 f800 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f008 f861 	bl	8009d54 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
  }

  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e009      	b.n	8001d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbf1      	blt.n	8001d06 <_write+0x12>
  }
  return len;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_close>:

int _close(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d54:	605a      	str	r2, [r3, #4]
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_isatty>:

int _isatty(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f007 ffc6 	bl	8009d54 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	2000039c 	.word	0x2000039c
 8001dfc:	20004ed8 	.word	0x20004ed8

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e28:	f7ff ffea 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	@ (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f007 ff85 	bl	8009d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff f99b 	bl	8001190 <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e68:	0800c36c 	.word	0x0800c36c
  ldr r2, =_sbss
 8001e6c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e70:	20004ed8 	.word	0x20004ed8

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 fce8 	bl	8002876 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f7ff fe44 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fcea 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	200003a0 	.word	0x200003a0

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200003a0 	.word	0x200003a0

08001efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e033      	b.n	8001f7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fcde 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fae8 	bl	8002524 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Start+0x1a>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e0b2      	b.n	8002104 <HAL_ADC_Start+0x180>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d018      	beq.n	8001fe6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc4:	4b52      	ldr	r3, [pc, #328]	@ (8002110 <HAL_ADC_Start+0x18c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_ADC_Start+0x190>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9a      	lsrs	r2, r3, #18
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d17a      	bne.n	80020ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002032:	d106      	bne.n	8002042 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	f023 0206 	bic.w	r2, r3, #6
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002040:	e002      	b.n	8002048 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002050:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <HAL_ADC_Start+0x194>)
 8002052:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800205c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12a      	bne.n	80020c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <HAL_ADC_Start+0x198>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d015      	beq.n	80020a0 <HAL_ADC_Start+0x11c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <HAL_ADC_Start+0x19c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d105      	bne.n	800208a <HAL_ADC_Start+0x106>
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <HAL_ADC_Start+0x194>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a25      	ldr	r2, [pc, #148]	@ (8002124 <HAL_ADC_Start+0x1a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d136      	bne.n	8002102 <HAL_ADC_Start+0x17e>
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_ADC_Start+0x194>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d130      	bne.n	8002102 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d129      	bne.n	8002102 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	e020      	b.n	8002102 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a15      	ldr	r2, [pc, #84]	@ (800211c <HAL_ADC_Start+0x198>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11b      	bne.n	8002102 <HAL_ADC_Start+0x17e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d114      	bne.n	8002102 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	e00b      	b.n	8002102 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000
 8002114:	431bde83 	.word	0x431bde83
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000
 8002120:	40012100 	.word	0x40012100
 8002124:	40012200 	.word	0x40012200

08002128 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_Stop+0x16>
 800213a:	2302      	movs	r3, #2
 800213c:	e021      	b.n	8002182 <HAL_ADC_Stop+0x5a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021aa:	d113      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e063      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7ff fe86 	bl	8001ee4 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021da:	e021      	b.n	8002220 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d01d      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_PollForConversion+0x6c>
 80021ea:	f7ff fe7b 	bl	8001ee4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d212      	bcs.n	8002220 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00b      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03d      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d1d6      	bne.n	80021dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0212 	mvn.w	r2, #18
 8002236:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11f      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d111      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e113      	b.n	8002504 <HAL_ADC_ConfigChannel+0x244>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b09      	cmp	r3, #9
 80022ea:	d925      	bls.n	8002338 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	3b1e      	subs	r3, #30
 8002302:	2207      	movs	r2, #7
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	4603      	mov	r3, r0
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4403      	add	r3, r0
 800232a:	3b1e      	subs	r3, #30
 800232c:	409a      	lsls	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	e022      	b.n	800237e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	2207      	movs	r2, #7
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	4603      	mov	r3, r0
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4403      	add	r3, r0
 8002374:	409a      	lsls	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b06      	cmp	r3, #6
 8002384:	d824      	bhi.n	80023d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b05      	subs	r3, #5
 8002398:	221f      	movs	r2, #31
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b05      	subs	r3, #5
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ce:	e04c      	b.n	800246a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d824      	bhi.n	8002422 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b23      	subs	r3, #35	@ 0x23
 80023ea:	221f      	movs	r2, #31
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43da      	mvns	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	400a      	ands	r2, r1
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b23      	subs	r3, #35	@ 0x23
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002420:	e023      	b.n	800246a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b41      	subs	r3, #65	@ 0x41
 8002434:	221f      	movs	r2, #31
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	3b41      	subs	r3, #65	@ 0x41
 800245e:	fa00 f203 	lsl.w	r2, r0, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246a:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <HAL_ADC_ConfigChannel+0x250>)
 800246c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a28      	ldr	r2, [pc, #160]	@ (8002514 <HAL_ADC_ConfigChannel+0x254>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10f      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x1d8>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b12      	cmp	r3, #18
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_ADC_ConfigChannel+0x254>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12b      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x23a>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_ADC_ConfigChannel+0x258>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x1f4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d122      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_ADC_ConfigChannel+0x258>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d111      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_ADC_ConfigChannel+0x25c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_ADC_ConfigChannel+0x260>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9a      	lsrs	r2, r3, #18
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024ec:	e002      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f9      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40012300 	.word	0x40012300
 8002514:	40012000 	.word	0x40012000
 8002518:	10000012 	.word	0x10000012
 800251c:	20000000 	.word	0x20000000
 8002520:	431bde83 	.word	0x431bde83

08002524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252c:	4b79      	ldr	r3, [pc, #484]	@ (8002714 <ADC_Init+0x1f0>)
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	021a      	lsls	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800257c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <ADC_Init+0x1f4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e00f      	b.n	8002622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002620:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0202 	bic.w	r2, r2, #2
 8002630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
 800263c:	005a      	lsls	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800266e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	3b01      	subs	r3, #1
 800267c:	035a      	lsls	r2, r3, #13
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e007      	b.n	8002698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002696:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	051a      	lsls	r2, r3, #20
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026da:	025a      	lsls	r2, r3, #9
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	029a      	lsls	r2, r3, #10
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40012300 	.word	0x40012300
 8002718:	0f000001 	.word	0x0f000001

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	@ (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff4c 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289e:	f7ff ff61 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	6978      	ldr	r0, [r7, #20]
 80028aa:	f7ff ffb1 	bl	8002810 <NVIC_EncodePriority>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff80 	bl	80027bc <__NVIC_SetPriority>
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff54 	bl	8002780 <__NVIC_EnableIRQ>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e165      	b.n	8002bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8154 	bne.w	8002bc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80ae 	beq.w	8002bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002be0 <HAL_GPIO_Init+0x300>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002be0 <HAL_GPIO_Init+0x300>)
 8002a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a76:	4b5a      	ldr	r3, [pc, #360]	@ (8002be0 <HAL_GPIO_Init+0x300>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a82:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <HAL_GPIO_Init+0x304>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8002be8 <HAL_GPIO_Init+0x308>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x21a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8002bec <HAL_GPIO_Init+0x30c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x216>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf0 <HAL_GPIO_Init+0x310>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x212>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_GPIO_Init+0x314>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x20e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf8 <HAL_GPIO_Init+0x318>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x20a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bfc <HAL_GPIO_Init+0x31c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x206>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a49      	ldr	r2, [pc, #292]	@ (8002c00 <HAL_GPIO_Init+0x320>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x202>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00c      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e00a      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	e008      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x21c>
 8002afa:	2300      	movs	r3, #0
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f002 0203 	and.w	r2, r2, #3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0c:	4935      	ldr	r1, [pc, #212]	@ (8002be4 <HAL_GPIO_Init+0x304>)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a31      	ldr	r2, [pc, #196]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b2f      	ldr	r3, [pc, #188]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a26      	ldr	r2, [pc, #152]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6e:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b92:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bbc:	4a11      	ldr	r2, [pc, #68]	@ (8002c04 <HAL_GPIO_Init+0x324>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	f67f ae96 	bls.w	80028fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40021400 	.word	0x40021400
 8002c00:	40021800 	.word	0x40021800
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c24:	e003      	b.n	8002c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	041a      	lsls	r2, r3, #16
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fcfe 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12b      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fe4c 	bl	8001964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 f8b8 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a81      	ldr	r2, [pc, #516]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a80      	ldr	r2, [pc, #512]	@ (8002f18 <HAL_I2C_Init+0x278>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7d      	ldr	r2, [pc, #500]	@ (8002f1c <HAL_I2C_Init+0x27c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0e7      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	@ (8002f20 <HAL_I2C_Init+0x280>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_I2C_Init+0x284>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	495c      	ldr	r1, [pc, #368]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d819      	bhi.n	8002ddc <HAL_I2C_Init+0x13c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_I2C_Init+0x138>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	e051      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e04f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_I2C_Init+0x168>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e012      	b.n	8002e2e <HAL_I2C_Init+0x18e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x196>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_Init+0x1bc>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e58      	subs	r0, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6911      	ldr	r1, [r2, #16]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	000186a0 	.word	0x000186a0
 8002f18:	001e847f 	.word	0x001e847f
 8002f1c:	003d08ff 	.word	0x003d08ff
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7fe ffd2 	bl	8001ee4 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80e0 	bne.w	8003110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	4970      	ldr	r1, [pc, #448]	@ (800311c <HAL_I2C_Master_Transmit+0x1f4>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc64 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0d3      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x50>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0cc      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d007      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2221      	movs	r2, #33	@ 0x21
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a50      	ldr	r2, [pc, #320]	@ (8003120 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 face 	bl	8003588 <I2C_MasterRequestWrite>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08d      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800300c:	e066      	b.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6a39      	ldr	r1, [r7, #32]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fd22 	bl	8003a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b04      	cmp	r3, #4
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11b      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fd19 	bl	8003aec <I2C_WaitOnBTFFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d107      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e01a      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d194      	bne.n	800300e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000

08003124 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	@ 0x30
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
 8003134:	4613      	mov	r3, r2
 8003136:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7fe fed4 	bl	8001ee4 <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b20      	cmp	r3, #32
 8003148:	f040 8217 	bne.w	800357a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2319      	movs	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	497c      	ldr	r1, [pc, #496]	@ (8003348 <HAL_I2C_Master_Receive+0x224>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fb66 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	e20a      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_I2C_Master_Receive+0x50>
 8003170:	2302      	movs	r3, #2
 8003172:	e203      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d007      	beq.n	800319a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2222      	movs	r2, #34	@ 0x22
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2210      	movs	r2, #16
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	893a      	ldrh	r2, [r7, #8]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	@ (800334c <HAL_I2C_Master_Receive+0x228>)
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa52 	bl	800368c <I2C_MasterRequestRead>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c4      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d113      	bne.n	8003222 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e198      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003226:	2b01      	cmp	r3, #1
 8003228:	d11b      	bne.n	8003262 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003238:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e178      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	2b02      	cmp	r3, #2
 8003268:	d11b      	bne.n	80032a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003278:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	e158      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032c8:	e144      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	f200 80f1 	bhi.w	80034b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d123      	bne.n	8003324 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fc4b 	bl	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e145      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003322:	e117      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b02      	cmp	r3, #2
 800332a:	d14e      	bne.n	80033ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	2200      	movs	r2, #0
 8003334:	4906      	ldr	r1, [pc, #24]	@ (8003350 <HAL_I2C_Master_Receive+0x22c>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fa76 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e11a      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
 8003346:	bf00      	nop
 8003348:	00100002 	.word	0x00100002
 800334c:	ffff0000 	.word	0xffff0000
 8003350:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c8:	e0c4      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	2200      	movs	r2, #0
 80033d2:	496c      	ldr	r1, [pc, #432]	@ (8003584 <HAL_I2C_Master_Receive+0x460>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fa27 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cb      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	2200      	movs	r2, #0
 800342e:	4955      	ldr	r1, [pc, #340]	@ (8003584 <HAL_I2C_Master_Receive+0x460>)
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9f9 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e09d      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034b4:	e04e      	b.n	8003554 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fb5e 	bl	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e058      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d124      	bne.n	8003554 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b03      	cmp	r3, #3
 8003510:	d107      	bne.n	8003522 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003520:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f aeb6 	bne.w	80032ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3728      	adds	r7, #40	@ 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010004 	.word	0x00010004

08003588 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d006      	beq.n	80035b2 <I2C_MasterRequestWrite+0x2a>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d003      	beq.n	80035b2 <I2C_MasterRequestWrite+0x2a>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b0:	d108      	bne.n	80035c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e00b      	b.n	80035dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d107      	bne.n	80035dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f91d 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	d103      	bne.n	800360c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e035      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003618:	d108      	bne.n	800362c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	e01b      	b.n	8003664 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	11db      	asrs	r3, r3, #7
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f063 030f 	orn	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	490e      	ldr	r1, [pc, #56]	@ (8003684 <I2C_MasterRequestWrite+0xfc>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f966 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e010      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4907      	ldr	r1, [pc, #28]	@ (8003688 <I2C_MasterRequestWrite+0x100>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f956 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010008 	.word	0x00010008
 8003688:	00010002 	.word	0x00010002

0800368c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d006      	beq.n	80036c6 <I2C_MasterRequestRead+0x3a>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d003      	beq.n	80036c6 <I2C_MasterRequestRead+0x3a>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036c4:	d108      	bne.n	80036d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e00b      	b.n	80036f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	2b11      	cmp	r3, #17
 80036de:	d107      	bne.n	80036f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f893 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003716:	d103      	bne.n	8003720 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e079      	b.n	8003818 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	e05f      	b.n	8003800 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003740:	897b      	ldrh	r3, [r7, #10]
 8003742:	11db      	asrs	r3, r3, #7
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0306 	and.w	r3, r3, #6
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f063 030f 	orn	r3, r3, #15
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4930      	ldr	r1, [pc, #192]	@ (8003820 <I2C_MasterRequestRead+0x194>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f8dc 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e054      	b.n	8003818 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4929      	ldr	r1, [pc, #164]	@ (8003824 <I2C_MasterRequestRead+0x198>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8cc 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e044      	b.n	8003818 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f831 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037da:	d103      	bne.n	80037e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e017      	b.n	8003818 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030e 	orn	r3, r3, #14
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4907      	ldr	r1, [pc, #28]	@ (8003824 <I2C_MasterRequestRead+0x198>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f888 	bl	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00010008 	.word	0x00010008
 8003824:	00010002 	.word	0x00010002

08003828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003838:	e048      	b.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d044      	beq.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fb4f 	bl	8001ee4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d139      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10d      	bne.n	800387e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	e00c      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	429a      	cmp	r2, r3
 800389c:	d116      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e023      	b.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10d      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	e00c      	b.n	800390c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	43da      	mvns	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	429a      	cmp	r2, r3
 8003910:	d093      	beq.n	800383a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392a:	e071      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d123      	bne.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e067      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d041      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe faaa 	bl	8001ee4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d136      	bne.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10c      	bne.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e00b      	b.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e021      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10c      	bne.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e00b      	b.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f af6d 	bne.w	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a68:	e034      	b.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f8e3 	bl	8003c36 <I2C_IsAcknowledgeFailed>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e034      	b.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d028      	beq.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a82:	f7fe fa2f 	bl	8001ee4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11d      	bne.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b80      	cmp	r3, #128	@ 0x80
 8003aa4:	d016      	beq.n	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e007      	b.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d1c3      	bne.n	8003a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af8:	e034      	b.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f89b 	bl	8003c36 <I2C_IsAcknowledgeFailed>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e034      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d028      	beq.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe f9e7 	bl	8001ee4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d016      	beq.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e007      	b.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d1c3      	bne.n	8003afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b88:	e049      	b.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d119      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0210 	mvn.w	r2, #16
 8003ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e030      	b.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bcc:	f7fe f98a 	bl	8001ee4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d016      	beq.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d1ae      	bne.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d11b      	bne.n	8003c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0cc      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b68      	ldr	r3, [pc, #416]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d90c      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b63      	ldr	r3, [pc, #396]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0b8      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce8:	4b59      	ldr	r3, [pc, #356]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d00:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a52      	ldr	r2, [pc, #328]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	494d      	ldr	r1, [pc, #308]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d044      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d52:	4b3f      	ldr	r3, [pc, #252]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e067      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4934      	ldr	r1, [pc, #208]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fe f8ae 	bl	8001ee4 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fe f8aa 	bl	8001ee4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d20c      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de8:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4916      	ldr	r1, [pc, #88]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	490e      	ldr	r1, [pc, #56]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e1a:	f000 f887 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490a      	ldr	r1, [pc, #40]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e32:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e36:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fe7a 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	0800bfd0 	.word	0x0800bfd0
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	20000004 	.word	0x20000004

08003e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000000 	.word	0x20000000

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	0800bfe0 	.word	0x0800bfe0

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f7ff ffdc 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0b5b      	lsrs	r3, r3, #13
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4903      	ldr	r1, [pc, #12]	@ (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	0800bfe0 	.word	0x0800bfe0

08003ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ed8:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_RCC_GetClockConfig+0x5c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <HAL_RCC_GetClockConfig+0x5c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <HAL_RCC_GetClockConfig+0x5c>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f0a:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <HAL_RCC_GetClockConfig+0x60>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b0ae      	sub	sp, #184	@ 0xb8
 8003f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f52:	4bcb      	ldr	r3, [pc, #812]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	f200 8206 	bhi.w	800436c <HAL_RCC_GetSysClockFreq+0x440>
 8003f60:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	0800436d 	.word	0x0800436d
 8003f70:	0800436d 	.word	0x0800436d
 8003f74:	0800436d 	.word	0x0800436d
 8003f78:	08003fa5 	.word	0x08003fa5
 8003f7c:	0800436d 	.word	0x0800436d
 8003f80:	0800436d 	.word	0x0800436d
 8003f84:	0800436d 	.word	0x0800436d
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	0800436d 	.word	0x0800436d
 8003f90:	0800436d 	.word	0x0800436d
 8003f94:	0800436d 	.word	0x0800436d
 8003f98:	0800419d 	.word	0x0800419d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4bb9      	ldr	r3, [pc, #740]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fa2:	e1e7      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa4:	4bb8      	ldr	r3, [pc, #736]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003faa:	e1e3      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fac:	4bb4      	ldr	r3, [pc, #720]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb8:	4bb1      	ldr	r3, [pc, #708]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d071      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc4:	4bae      	ldr	r3, [pc, #696]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fd0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	0159      	lsls	r1, r3, #5
 8003ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffc:	0150      	lsls	r0, r2, #5
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4621      	mov	r1, r4
 8004004:	1a51      	subs	r1, r2, r1
 8004006:	6439      	str	r1, [r7, #64]	@ 0x40
 8004008:	4629      	mov	r1, r5
 800400a:	eb63 0301 	sbc.w	r3, r3, r1
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800401c:	4649      	mov	r1, r9
 800401e:	018b      	lsls	r3, r1, #6
 8004020:	4641      	mov	r1, r8
 8004022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004026:	4641      	mov	r1, r8
 8004028:	018a      	lsls	r2, r1, #6
 800402a:	4641      	mov	r1, r8
 800402c:	1a51      	subs	r1, r2, r1
 800402e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004030:	4649      	mov	r1, r9
 8004032:	eb63 0301 	sbc.w	r3, r3, r1
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004044:	4649      	mov	r1, r9
 8004046:	00cb      	lsls	r3, r1, #3
 8004048:	4641      	mov	r1, r8
 800404a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404e:	4641      	mov	r1, r8
 8004050:	00ca      	lsls	r2, r1, #3
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	4603      	mov	r3, r0
 8004058:	4622      	mov	r2, r4
 800405a:	189b      	adds	r3, r3, r2
 800405c:	633b      	str	r3, [r7, #48]	@ 0x30
 800405e:	462b      	mov	r3, r5
 8004060:	460a      	mov	r2, r1
 8004062:	eb42 0303 	adc.w	r3, r2, r3
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004074:	4629      	mov	r1, r5
 8004076:	024b      	lsls	r3, r1, #9
 8004078:	4621      	mov	r1, r4
 800407a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800407e:	4621      	mov	r1, r4
 8004080:	024a      	lsls	r2, r1, #9
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004090:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004094:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004098:	f7fc fda6 	bl	8000be8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a6:	e067      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a8:	4b75      	ldr	r3, [pc, #468]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040c2:	2300      	movs	r3, #0
 80040c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4621      	mov	r1, r4
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040e8:	4629      	mov	r1, r5
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040fc:	4649      	mov	r1, r9
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4641      	mov	r1, r8
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4641      	mov	r1, r8
 800410c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004110:	4649      	mov	r1, r9
 8004112:	eb63 0b01 	sbc.w	fp, r3, r1
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004122:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412a:	4692      	mov	sl, r2
 800412c:	469b      	mov	fp, r3
 800412e:	4623      	mov	r3, r4
 8004130:	eb1a 0303 	adds.w	r3, sl, r3
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	462b      	mov	r3, r5
 8004138:	eb4b 0303 	adc.w	r3, fp, r3
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004160:	2200      	movs	r2, #0
 8004162:	673b      	str	r3, [r7, #112]	@ 0x70
 8004164:	677a      	str	r2, [r7, #116]	@ 0x74
 8004166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800416a:	f7fc fd3d 	bl	8000be8 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4613      	mov	r3, r2
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004178:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800418a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800418e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800419a:	e0eb      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800419c:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a8:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d06b      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b4:	4b32      	ldr	r3, [pc, #200]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x354>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	2200      	movs	r2, #0
 80041bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c8:	2300      	movs	r3, #0
 80041ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80041cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041d0:	4622      	mov	r2, r4
 80041d2:	462b      	mov	r3, r5
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	0159      	lsls	r1, r3, #5
 80041de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e2:	0150      	lsls	r0, r2, #5
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4621      	mov	r1, r4
 80041ea:	1a51      	subs	r1, r2, r1
 80041ec:	61b9      	str	r1, [r7, #24]
 80041ee:	4629      	mov	r1, r5
 80041f0:	eb63 0301 	sbc.w	r3, r3, r1
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004202:	4659      	mov	r1, fp
 8004204:	018b      	lsls	r3, r1, #6
 8004206:	4651      	mov	r1, sl
 8004208:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800420c:	4651      	mov	r1, sl
 800420e:	018a      	lsls	r2, r1, #6
 8004210:	4651      	mov	r1, sl
 8004212:	ebb2 0801 	subs.w	r8, r2, r1
 8004216:	4659      	mov	r1, fp
 8004218:	eb63 0901 	sbc.w	r9, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004228:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004230:	4690      	mov	r8, r2
 8004232:	4699      	mov	r9, r3
 8004234:	4623      	mov	r3, r4
 8004236:	eb18 0303 	adds.w	r3, r8, r3
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	462b      	mov	r3, r5
 800423e:	eb49 0303 	adc.w	r3, r9, r3
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004250:	4629      	mov	r1, r5
 8004252:	024b      	lsls	r3, r1, #9
 8004254:	4621      	mov	r1, r4
 8004256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800425a:	4621      	mov	r1, r4
 800425c:	024a      	lsls	r2, r1, #9
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004266:	2200      	movs	r2, #0
 8004268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800426a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800426c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004270:	f7fc fcba 	bl	8000be8 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800427e:	e065      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x420>
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428c:	4b3d      	ldr	r3, [pc, #244]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x458>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	2200      	movs	r2, #0
 8004294:	4618      	mov	r0, r3
 8004296:	4611      	mov	r1, r2
 8004298:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429c:	653b      	str	r3, [r7, #80]	@ 0x50
 800429e:	2300      	movs	r3, #0
 80042a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80042a6:	4642      	mov	r2, r8
 80042a8:	464b      	mov	r3, r9
 80042aa:	f04f 0000 	mov.w	r0, #0
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	0159      	lsls	r1, r3, #5
 80042b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b8:	0150      	lsls	r0, r2, #5
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4641      	mov	r1, r8
 80042c0:	1a51      	subs	r1, r2, r1
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	4649      	mov	r1, r9
 80042c6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042d8:	4659      	mov	r1, fp
 80042da:	018b      	lsls	r3, r1, #6
 80042dc:	4651      	mov	r1, sl
 80042de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e2:	4651      	mov	r1, sl
 80042e4:	018a      	lsls	r2, r1, #6
 80042e6:	4651      	mov	r1, sl
 80042e8:	1a54      	subs	r4, r2, r1
 80042ea:	4659      	mov	r1, fp
 80042ec:	eb63 0501 	sbc.w	r5, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	464b      	mov	r3, r9
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800431e:	4629      	mov	r1, r5
 8004320:	028b      	lsls	r3, r1, #10
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004328:	4621      	mov	r1, r4
 800432a:	028a      	lsls	r2, r1, #10
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004334:	2200      	movs	r2, #0
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004338:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800433a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800433e:	f7fc fc53 	bl	8000be8 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4613      	mov	r3, r2
 8004348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x458>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	0f1b      	lsrs	r3, r3, #28
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800435a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800435e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800436a:	e003      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x45c>)
 800436e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004378:	4618      	mov	r0, r3
 800437a:	37b8      	adds	r7, #184	@ 0xb8
 800437c:	46bd      	mov	sp, r7
 800437e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400

0800438c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e28d      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8083 	beq.w	80044b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043ac:	4b94      	ldr	r3, [pc, #592]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d019      	beq.n	80043ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043b8:	4b91      	ldr	r3, [pc, #580]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b88      	ldr	r3, [pc, #544]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b84      	ldr	r3, [pc, #528]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x124>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e25a      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x90>
 800440e:	4b7c      	ldr	r3, [pc, #496]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7b      	ldr	r2, [pc, #492]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xcc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0xb4>
 8004426:	4b76      	ldr	r3, [pc, #472]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b73      	ldr	r3, [pc, #460]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a72      	ldr	r2, [pc, #456]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xcc>
 8004440:	4b6f      	ldr	r3, [pc, #444]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6e      	ldr	r2, [pc, #440]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6b      	ldr	r2, [pc, #428]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fd40 	bl	8001ee4 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd fd3c 	bl	8001ee4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e21f      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b61      	ldr	r3, [pc, #388]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xdc>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fd2c 	bl	8001ee4 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd fd28 	bl	8001ee4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	@ 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e20b      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b57      	ldr	r3, [pc, #348]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x104>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06f      	beq.n	800459e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044be:	4b50      	ldr	r3, [pc, #320]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e2:	4b47      	ldr	r3, [pc, #284]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d11c      	bne.n	8004528 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b44      	ldr	r3, [pc, #272]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x186>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1d3      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4937      	ldr	r1, [pc, #220]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	e03a      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <HAL_RCC_OscConfig+0x278>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fcd5 	bl	8001ee4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453e:	f7fd fcd1 	bl	8001ee4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1b4      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b28      	ldr	r3, [pc, #160]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4925      	ldr	r1, [pc, #148]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b24      	ldr	r3, [pc, #144]	@ (8004604 <HAL_RCC_OscConfig+0x278>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fcb4 	bl	8001ee4 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7fd fcb0 	bl	8001ee4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e193      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d036      	beq.n	8004618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fd fc94 	bl	8001ee4 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c0:	f7fd fc90 	bl	8001ee4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e173      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x234>
 80045de:	e01b      	b.n	8004618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e0:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fd fc7d 	bl	8001ee4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ec:	e00e      	b.n	800460c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ee:	f7fd fc79 	bl	8001ee4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d907      	bls.n	800460c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e15c      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
 8004600:	40023800 	.word	0x40023800
 8004604:	42470000 	.word	0x42470000
 8004608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b8a      	ldr	r3, [pc, #552]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ea      	bne.n	80045ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8097 	beq.w	8004754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b83      	ldr	r3, [pc, #524]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b7f      	ldr	r3, [pc, #508]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	4a7e      	ldr	r2, [pc, #504]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	@ 0x40
 8004646:	4b7c      	ldr	r3, [pc, #496]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b79      	ldr	r3, [pc, #484]	@ (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b76      	ldr	r3, [pc, #472]	@ (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	@ (800483c <HAL_RCC_OscConfig+0x4b0>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fd fc39 	bl	8001ee4 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fd fc35 	bl	8001ee4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e118      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b6c      	ldr	r3, [pc, #432]	@ (800483c <HAL_RCC_OscConfig+0x4b0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x31e>
 800469c:	4b66      	ldr	r3, [pc, #408]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a65      	ldr	r2, [pc, #404]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	e01c      	b.n	80046e4 <HAL_RCC_OscConfig+0x358>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x340>
 80046b2:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	4a60      	ldr	r2, [pc, #384]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046be:	4b5e      	ldr	r3, [pc, #376]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0x358>
 80046cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d0:	4a59      	ldr	r2, [pc, #356]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d8:	4b57      	ldr	r3, [pc, #348]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046dc:	4a56      	ldr	r2, [pc, #344]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd fbfa 	bl	8001ee4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd fbf6 	bl	8001ee4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0d7      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	4b4b      	ldr	r3, [pc, #300]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCC_OscConfig+0x368>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd fbe4 	bl	8001ee4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	e00a      	b.n	8004736 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004720:	f7fd fbe0 	bl	8001ee4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0c1      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004736:	4b40      	ldr	r3, [pc, #256]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	4a3a      	ldr	r2, [pc, #232]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80ad 	beq.w	80048b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800475e:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	d060      	beq.n	800482c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d145      	bne.n	80047fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b33      	ldr	r3, [pc, #204]	@ (8004840 <HAL_RCC_OscConfig+0x4b4>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fbb4 	bl	8001ee4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fbb0 	bl	8001ee4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e093      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b29      	ldr	r3, [pc, #164]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	491b      	ldr	r1, [pc, #108]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_RCC_OscConfig+0x4b4>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd fb85 	bl	8001ee4 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047de:	f7fd fb81 	bl	8001ee4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e064      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x452>
 80047fc:	e05c      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <HAL_RCC_OscConfig+0x4b4>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fb6e 	bl	8001ee4 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd fb6a 	bl	8001ee4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04d      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x480>
 800482a:	e045      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e040      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004844:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_RCC_OscConfig+0x538>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d030      	beq.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d129      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d122      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800487a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	4293      	cmp	r3, r2
 800487e:	d119      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	3b01      	subs	r3, #1
 800488e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d10f      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e041      	b.n	800495e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f880 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 fc62 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d001      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e04e      	b.n	8004a1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a23      	ldr	r2, [pc, #140]	@ (8004a2c <HAL_TIM_Base_Start_IT+0xc4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049aa:	d01d      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1b      	ldr	r2, [pc, #108]	@ (8004a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a19      	ldr	r2, [pc, #100]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x80>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d111      	bne.n	8004a0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d010      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	e007      	b.n	8004a1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40001800 	.word	0x40001800

08004a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e041      	b.n	8004ade <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f839 	bl	8004ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 fba2 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start+0x24>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e022      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d109      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x3e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e015      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x58>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e008      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07c      	b.n	8004c68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x82>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b7c:	e013      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x92>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b8c:	e00b      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0xa2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	e003      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fdfe 	bl	80057b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c70 <HAL_TIM_PWM_Start+0x174>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_TIM_PWM_Start+0xcc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <HAL_TIM_PWM_Start+0x178>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIM_PWM_Start+0xd0>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_TIM_PWM_Start+0xd2>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <HAL_TIM_PWM_Start+0x174>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d01d      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <HAL_TIM_PWM_Start+0x17c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_TIM_PWM_Start+0x180>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <HAL_TIM_PWM_Start+0x184>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a16      	ldr	r2, [pc, #88]	@ (8004c74 <HAL_TIM_PWM_Start+0x178>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	@ (8004c84 <HAL_TIM_PWM_Start+0x188>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x136>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	@ (8004c88 <HAL_TIM_PWM_Start+0x18c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d111      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b06      	cmp	r3, #6
 8004c42:	d010      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	e007      	b.n	8004c66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40001800 	.word	0x40001800

08004c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d020      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01b      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0202 	mvn.w	r2, #2
 8004cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa5b 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004cdc:	e005      	b.n	8004cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fa4d 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fa5e 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d020      	beq.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01b      	beq.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0204 	mvn.w	r2, #4
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa35 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa27 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa38 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d020      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01b      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0208 	mvn.w	r2, #8
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa0f 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa01 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa12 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d020      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0210 	mvn.w	r2, #16
 8004da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2208      	movs	r2, #8
 8004daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9e9 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f9db 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9ec 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0201 	mvn.w	r2, #1
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc fd2e 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fd76 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9bd 	bl	80051ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00c      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0220 	mvn.w	r2, #32
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fd48 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ae      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f200 809f 	bhi.w	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004fd9 	.word	0x08004fd9
 8004ea8:	08004fd9 	.word	0x08004fd9
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004fd9 	.word	0x08004fd9
 8004eb8:	08004fd9 	.word	0x08004fd9
 8004ebc:	08004fd9 	.word	0x08004fd9
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004fd9 	.word	0x08004fd9
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	08004fd9 	.word	0x08004fd9
 8004ed0:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa1e 	bl	800531c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
      break;
 8004f12:	e064      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa6e 	bl	80053fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
      break;
 8004f54:	e043      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fac3 	bl	80054e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
      break;
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb17 	bl	80055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b4      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x186>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005044:	d03e      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504a:	f200 8087 	bhi.w	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	f000 8086 	beq.w	8005162 <HAL_TIM_ConfigClockSource+0x172>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	d87f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b70      	cmp	r3, #112	@ 0x70
 800505e:	d01a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xa6>
 8005060:	2b70      	cmp	r3, #112	@ 0x70
 8005062:	d87b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b60      	cmp	r3, #96	@ 0x60
 8005066:	d050      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x11a>
 8005068:	2b60      	cmp	r3, #96	@ 0x60
 800506a:	d877      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b50      	cmp	r3, #80	@ 0x50
 800506e:	d03c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xfa>
 8005070:	2b50      	cmp	r3, #80	@ 0x50
 8005072:	d873      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d058      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x13a>
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d86f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b30      	cmp	r3, #48	@ 0x30
 800507e:	d064      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d86b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d060      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d867      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d05a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	e062      	b.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	f000 fb63 	bl	8005770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e04f      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	f000 fb4c 	bl	8005770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e03c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 fac0 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2150      	movs	r1, #80	@ 0x50
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fb19 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005108:	e02c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fadf 	bl	80056da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2160      	movs	r1, #96	@ 0x60
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fb09 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005128:	e01c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 faa0 	bl	800567c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2140      	movs	r1, #64	@ 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 faf9 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 8005148:	e00c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 faf0 	bl	800573a <TIM_ITRx_SetConfig>
      break;
 800515a:	e003      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e000      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a43      	ldr	r2, [pc, #268]	@ (80052f0 <TIM_Base_SetConfig+0x120>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a40      	ldr	r2, [pc, #256]	@ (80052f4 <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3f      	ldr	r2, [pc, #252]	@ (80052f8 <TIM_Base_SetConfig+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3e      	ldr	r2, [pc, #248]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3d      	ldr	r2, [pc, #244]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a32      	ldr	r2, [pc, #200]	@ (80052f0 <TIM_Base_SetConfig+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d027      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	@ (80052f4 <TIM_Base_SetConfig+0x124>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d023      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2e      	ldr	r2, [pc, #184]	@ (80052f8 <TIM_Base_SetConfig+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2d      	ldr	r2, [pc, #180]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2c      	ldr	r2, [pc, #176]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2b      	ldr	r2, [pc, #172]	@ (8005304 <TIM_Base_SetConfig+0x134>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2a      	ldr	r2, [pc, #168]	@ (8005308 <TIM_Base_SetConfig+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a29      	ldr	r2, [pc, #164]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a28      	ldr	r2, [pc, #160]	@ (8005310 <TIM_Base_SetConfig+0x140>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a27      	ldr	r2, [pc, #156]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <TIM_Base_SetConfig+0x148>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a0e      	ldr	r2, [pc, #56]	@ (80052f0 <TIM_Base_SetConfig+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0xf2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d103      	bne.n	80052ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40010400 	.word	0x40010400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	40001800 	.word	0x40001800
 8005314:	40001c00 	.word	0x40001c00
 8005318:	40002000 	.word	0x40002000

0800531c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 0201 	bic.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 0302 	bic.w	r3, r3, #2
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <TIM_OC1_SetConfig+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC1_SetConfig+0x64>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1f      	ldr	r2, [pc, #124]	@ (80053f8 <TIM_OC1_SetConfig+0xdc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10c      	bne.n	800539a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0308 	bic.w	r3, r3, #8
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <TIM_OC1_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_OC1_SetConfig+0x8e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <TIM_OC1_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40010400 	.word	0x40010400

080053fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0210 	bic.w	r2, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0320 	bic.w	r3, r3, #32
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a22      	ldr	r2, [pc, #136]	@ (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x68>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <TIM_OC2_SetConfig+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC2_SetConfig+0x94>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <TIM_OC2_SetConfig+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d113      	bne.n	80054b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <TIM_OC3_SetConfig+0xe0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC3_SetConfig+0x66>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a20      	ldr	r2, [pc, #128]	@ (80055cc <TIM_OC3_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10d      	bne.n	800556a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <TIM_OC3_SetConfig+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x92>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <TIM_OC3_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d113      	bne.n	80055a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <TIM_OC4_SetConfig+0xa4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC4_SetConfig+0x68>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <TIM_OC4_SetConfig+0xa8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d109      	bne.n	800564c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 030a 	bic.w	r3, r3, #10
 80056b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	031b      	lsls	r3, r3, #12
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	f043 0307 	orr.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	431a      	orrs	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2201      	movs	r2, #1
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	401a      	ands	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e05a      	b.n	80058ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d01d      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1d      	ldr	r2, [pc, #116]	@ (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1a      	ldr	r2, [pc, #104]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	@ (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d10c      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40001800 	.word	0x40001800

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e042      	b.n	80059b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc f8ae 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	@ 0x24
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800595e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f973 	bl	8005c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	@ 0x28
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	4613      	mov	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d175      	bne.n	8005ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Transmit+0x2c>
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e06e      	b.n	8005aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2221      	movs	r2, #33	@ 0x21
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fa:	f7fc fa73 	bl	8001ee4 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	d108      	bne.n	8005a28 <HAL_UART_Transmit+0x6c>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e003      	b.n	8005a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a30:	e02e      	b.n	8005a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2180      	movs	r1, #128	@ 0x80
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f848 	bl	8005ad2 <UART_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e03a      	b.n	8005aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e007      	b.n	8005a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1cb      	bne.n	8005a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2140      	movs	r1, #64	@ 0x40
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f814 	bl	8005ad2 <UART_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e006      	b.n	8005aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae2:	e03b      	b.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d037      	beq.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aec:	f7fc f9fa 	bl	8001ee4 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d302      	bcc.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e03a      	b.n	8005b7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d023      	beq.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d020      	beq.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b40      	cmp	r3, #64	@ 0x40
 8005b1e:	d01d      	beq.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d116      	bne.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f81d 	bl	8005b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e00f      	b.n	8005b7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d0b4      	beq.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b095      	sub	sp, #84	@ 0x54
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bac:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d119      	bne.n	8005c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f023 0310 	bic.w	r3, r3, #16
 8005c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c1c:	61ba      	str	r2, [r7, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c3e:	bf00      	nop
 8005c40:	3754      	adds	r7, #84	@ 0x54
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c50:	b0c0      	sub	sp, #256	@ 0x100
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	68d9      	ldr	r1, [r3, #12]
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	ea40 0301 	orr.w	r3, r0, r1
 8005c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ca4:	f021 010c 	bic.w	r1, r1, #12
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc6:	6999      	ldr	r1, [r3, #24]
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	ea40 0301 	orr.w	r3, r0, r1
 8005cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b8f      	ldr	r3, [pc, #572]	@ (8005f18 <UART_SetConfig+0x2cc>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d005      	beq.n	8005cec <UART_SetConfig+0xa0>
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8005f1c <UART_SetConfig+0x2d0>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d104      	bne.n	8005cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7fe f8d8 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cf4:	e003      	b.n	8005cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf6:	f7fe f8bf 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8005cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d08:	f040 810c 	bne.w	8005f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d26:	415b      	adcs	r3, r3
 8005d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d2e:	4621      	mov	r1, r4
 8005d30:	eb12 0801 	adds.w	r8, r2, r1
 8005d34:	4629      	mov	r1, r5
 8005d36:	eb43 0901 	adc.w	r9, r3, r1
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d4e:	4690      	mov	r8, r2
 8005d50:	4699      	mov	r9, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	eb18 0303 	adds.w	r3, r8, r3
 8005d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	eb49 0303 	adc.w	r3, r9, r3
 8005d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	18db      	adds	r3, r3, r3
 8005d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d80:	4613      	mov	r3, r2
 8005d82:	eb42 0303 	adc.w	r3, r2, r3
 8005d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d90:	f7fa ff2a 	bl	8000be8 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4b61      	ldr	r3, [pc, #388]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	011c      	lsls	r4, r3, #4
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	1891      	adds	r1, r2, r2
 8005dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dbc:	415b      	adcs	r3, r3
 8005dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005dca:	4649      	mov	r1, r9
 8005dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de4:	4692      	mov	sl, r2
 8005de6:	469b      	mov	fp, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	eb1a 0303 	adds.w	r3, sl, r3
 8005dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005df2:	464b      	mov	r3, r9
 8005df4:	eb4b 0303 	adc.w	r3, fp, r3
 8005df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e10:	460b      	mov	r3, r1
 8005e12:	18db      	adds	r3, r3, r3
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e16:	4613      	mov	r3, r2
 8005e18:	eb42 0303 	adc.w	r3, r2, r3
 8005e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e26:	f7fa fedf 	bl	8000be8 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4b3b      	ldr	r3, [pc, #236]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005e32:	fba3 2301 	umull	r2, r3, r3, r1
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2264      	movs	r2, #100	@ 0x64
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	1acb      	subs	r3, r1, r3
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e46:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005e48:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e54:	441c      	add	r4, r3
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	1891      	adds	r1, r2, r2
 8005e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e70:	415b      	adcs	r3, r3
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e78:	4641      	mov	r1, r8
 8005e7a:	1851      	adds	r1, r2, r1
 8005e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e7e:	4649      	mov	r1, r9
 8005e80:	414b      	adcs	r3, r1
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e90:	4659      	mov	r1, fp
 8005e92:	00cb      	lsls	r3, r1, #3
 8005e94:	4651      	mov	r1, sl
 8005e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	00ca      	lsls	r2, r1, #3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eac:	464b      	mov	r3, r9
 8005eae:	460a      	mov	r2, r1
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ecc:	460b      	mov	r3, r1
 8005ece:	18db      	adds	r3, r3, r3
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	eb42 0303 	adc.w	r3, r2, r3
 8005ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ee2:	f7fa fe81 	bl	8000be8 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005eec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2164      	movs	r1, #100	@ 0x64
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	3332      	adds	r3, #50	@ 0x32
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 0207 	and.w	r2, r3, #7
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4422      	add	r2, r4
 8005f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f14:	e106      	b.n	8006124 <UART_SetConfig+0x4d8>
 8005f16:	bf00      	nop
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	40011400 	.word	0x40011400
 8005f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f36:	4642      	mov	r2, r8
 8005f38:	464b      	mov	r3, r9
 8005f3a:	1891      	adds	r1, r2, r2
 8005f3c:	6239      	str	r1, [r7, #32]
 8005f3e:	415b      	adcs	r3, r3
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f46:	4641      	mov	r1, r8
 8005f48:	1854      	adds	r4, r2, r1
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	eb43 0501 	adc.w	r5, r3, r1
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	00eb      	lsls	r3, r5, #3
 8005f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5e:	00e2      	lsls	r2, r4, #3
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	4643      	mov	r3, r8
 8005f66:	18e3      	adds	r3, r4, r3
 8005f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	eb45 0303 	adc.w	r3, r5, r3
 8005f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f92:	4629      	mov	r1, r5
 8005f94:	008b      	lsls	r3, r1, #2
 8005f96:	4621      	mov	r1, r4
 8005f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	008a      	lsls	r2, r1, #2
 8005fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fa4:	f7fa fe20 	bl	8000be8 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4b60      	ldr	r3, [pc, #384]	@ (8006130 <UART_SetConfig+0x4e4>)
 8005fae:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	011c      	lsls	r4, r3, #4
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	61b9      	str	r1, [r7, #24]
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd8:	4641      	mov	r1, r8
 8005fda:	1851      	adds	r1, r2, r1
 8005fdc:	6139      	str	r1, [r7, #16]
 8005fde:	4649      	mov	r1, r9
 8005fe0:	414b      	adcs	r3, r1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	00cb      	lsls	r3, r1, #3
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	00ca      	lsls	r2, r1, #3
 8005ffe:	4610      	mov	r0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	4603      	mov	r3, r0
 8006004:	4642      	mov	r2, r8
 8006006:	189b      	adds	r3, r3, r2
 8006008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800600c:	464b      	mov	r3, r9
 800600e:	460a      	mov	r2, r1
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006030:	4649      	mov	r1, r9
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	4641      	mov	r1, r8
 8006036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800603a:	4641      	mov	r1, r8
 800603c:	008a      	lsls	r2, r1, #2
 800603e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006042:	f7fa fdd1 	bl	8000be8 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4611      	mov	r1, r2
 800604c:	4b38      	ldr	r3, [pc, #224]	@ (8006130 <UART_SetConfig+0x4e4>)
 800604e:	fba3 2301 	umull	r2, r3, r3, r1
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2264      	movs	r2, #100	@ 0x64
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	3332      	adds	r3, #50	@ 0x32
 8006060:	4a33      	ldr	r2, [pc, #204]	@ (8006130 <UART_SetConfig+0x4e4>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800606c:	441c      	add	r4, r3
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	673b      	str	r3, [r7, #112]	@ 0x70
 8006076:	677a      	str	r2, [r7, #116]	@ 0x74
 8006078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	1891      	adds	r1, r2, r2
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	415b      	adcs	r3, r3
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800608c:	4641      	mov	r1, r8
 800608e:	1851      	adds	r1, r2, r1
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	4649      	mov	r1, r9
 8006094:	414b      	adcs	r3, r1
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060a4:	4659      	mov	r1, fp
 80060a6:	00cb      	lsls	r3, r1, #3
 80060a8:	4651      	mov	r1, sl
 80060aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ae:	4651      	mov	r1, sl
 80060b0:	00ca      	lsls	r2, r1, #3
 80060b2:	4610      	mov	r0, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	4642      	mov	r2, r8
 80060ba:	189b      	adds	r3, r3, r2
 80060bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060be:	464b      	mov	r3, r9
 80060c0:	460a      	mov	r2, r1
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060e0:	4649      	mov	r1, r9
 80060e2:	008b      	lsls	r3, r1, #2
 80060e4:	4641      	mov	r1, r8
 80060e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ea:	4641      	mov	r1, r8
 80060ec:	008a      	lsls	r2, r1, #2
 80060ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060f2:	f7fa fd79 	bl	8000be8 <__aeabi_uldivmod>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <UART_SetConfig+0x4e4>)
 80060fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	2164      	movs	r1, #100	@ 0x64
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	3332      	adds	r3, #50	@ 0x32
 800610e:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <UART_SetConfig+0x4e4>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4422      	add	r2, r4
 8006122:	609a      	str	r2, [r3, #8]
}
 8006124:	bf00      	nop
 8006126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006130:	51eb851f 	.word	0x51eb851f

08006134 <__NVIC_SetPriority>:
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db0a      	blt.n	800615e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	490c      	ldr	r1, [pc, #48]	@ (8006180 <__NVIC_SetPriority+0x4c>)
 800614e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006152:	0112      	lsls	r2, r2, #4
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	440b      	add	r3, r1
 8006158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800615c:	e00a      	b.n	8006174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4908      	ldr	r1, [pc, #32]	@ (8006184 <__NVIC_SetPriority+0x50>)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	3b04      	subs	r3, #4
 800616c:	0112      	lsls	r2, r2, #4
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	440b      	add	r3, r1
 8006172:	761a      	strb	r2, [r3, #24]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	e000e100 	.word	0xe000e100
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800618c:	4b05      	ldr	r3, [pc, #20]	@ (80061a4 <SysTick_Handler+0x1c>)
 800618e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006190:	f001 ff34 	bl	8007ffc <xTaskGetSchedulerState>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d001      	beq.n	800619e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800619a:	f002 fd2d 	bl	8008bf8 <xPortSysTickHandler>
  }
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	e000e010 	.word	0xe000e010

080061a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80061ac:	2100      	movs	r1, #0
 80061ae:	f06f 0004 	mvn.w	r0, #4
 80061b2:	f7ff ffbf 	bl	8006134 <__NVIC_SetPriority>
#endif
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c2:	f3ef 8305 	mrs	r3, IPSR
 80061c6:	603b      	str	r3, [r7, #0]
  return(result);
 80061c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80061ce:	f06f 0305 	mvn.w	r3, #5
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	e00c      	b.n	80061f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <osKernelInitialize+0x44>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80061de:	4b08      	ldr	r3, [pc, #32]	@ (8006200 <osKernelInitialize+0x44>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	e002      	b.n	80061f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
 80061ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061f0:	687b      	ldr	r3, [r7, #4]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	200003a4 	.word	0x200003a4

08006204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800620a:	f3ef 8305 	mrs	r3, IPSR
 800620e:	603b      	str	r3, [r7, #0]
  return(result);
 8006210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006216:	f06f 0305 	mvn.w	r3, #5
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	e010      	b.n	8006240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <osKernelStart+0x48>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d109      	bne.n	800623a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006226:	f7ff ffbf 	bl	80061a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800622a:	4b08      	ldr	r3, [pc, #32]	@ (800624c <osKernelStart+0x48>)
 800622c:	2202      	movs	r2, #2
 800622e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006230:	f001 fa80 	bl	8007734 <vTaskStartScheduler>
      stat = osOK;
 8006234:	2300      	movs	r3, #0
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	e002      	b.n	8006240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006240:	687b      	ldr	r3, [r7, #4]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200003a4 	.word	0x200003a4

08006250 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	@ 0x38
 8006254:	af04      	add	r7, sp, #16
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006260:	f3ef 8305 	mrs	r3, IPSR
 8006264:	617b      	str	r3, [r7, #20]
  return(result);
 8006266:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006268:	2b00      	cmp	r3, #0
 800626a:	d17e      	bne.n	800636a <osThreadNew+0x11a>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d07b      	beq.n	800636a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006272:	2380      	movs	r3, #128	@ 0x80
 8006274:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006276:	2318      	movs	r3, #24
 8006278:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d045      	beq.n	8006316 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <osThreadNew+0x48>
        name = attr->name;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <osThreadNew+0x6e>
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b38      	cmp	r3, #56	@ 0x38
 80062b0:	d805      	bhi.n	80062be <osThreadNew+0x6e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <osThreadNew+0x72>
        return (NULL);
 80062be:	2300      	movs	r3, #0
 80062c0:	e054      	b.n	800636c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00e      	beq.n	80062f8 <osThreadNew+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2ba7      	cmp	r3, #167	@ 0xa7
 80062e0:	d90a      	bls.n	80062f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <osThreadNew+0xa8>
        mem = 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	e010      	b.n	800631a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <osThreadNew+0xca>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <osThreadNew+0xca>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <osThreadNew+0xca>
          mem = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e001      	b.n	800631a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d110      	bne.n	8006342 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006328:	9202      	str	r2, [sp, #8]
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f001 f808 	bl	800734c <xTaskCreateStatic>
 800633c:	4603      	mov	r3, r0
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e013      	b.n	800636a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d110      	bne.n	800636a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	b29a      	uxth	r2, r3
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f001 f856 	bl	800740c <xTaskCreate>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d001      	beq.n	800636a <osThreadNew+0x11a>
            hTask = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800636a:	693b      	ldr	r3, [r7, #16]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3728      	adds	r7, #40	@ 0x28
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637c:	f3ef 8305 	mrs	r3, IPSR
 8006380:	60bb      	str	r3, [r7, #8]
  return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <osDelay+0x1c>
    stat = osErrorISR;
 8006388:	f06f 0305 	mvn.w	r3, #5
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e007      	b.n	80063a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 f994 	bl	80076c8 <vTaskDelay>
    }
  }

  return (stat);
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08a      	sub	sp, #40	@ 0x28
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ba:	f3ef 8305 	mrs	r3, IPSR
 80063be:	613b      	str	r3, [r7, #16]
  return(result);
 80063c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d15f      	bne.n	8006486 <osMessageQueueNew+0xdc>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d05c      	beq.n	8006486 <osMessageQueueNew+0xdc>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d059      	beq.n	8006486 <osMessageQueueNew+0xdc>
    mem = -1;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295
 80063d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d029      	beq.n	8006432 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <osMessageQueueNew+0x62>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80063ec:	d90e      	bls.n	800640c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <osMessageQueueNew+0x62>
        mem = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e014      	b.n	8006436 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d110      	bne.n	8006436 <osMessageQueueNew+0x8c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006420:	2b00      	cmp	r3, #0
 8006422:	d108      	bne.n	8006436 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <osMessageQueueNew+0x8c>
          mem = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e001      	b.n	8006436 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10b      	bne.n	8006454 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2100      	movs	r1, #0
 8006446:	9100      	str	r1, [sp, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fa30 	bl	80068b0 <xQueueGenericCreateStatic>
 8006450:	61f8      	str	r0, [r7, #28]
 8006452:	e008      	b.n	8006466 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d105      	bne.n	8006466 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800645a:	2200      	movs	r2, #0
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 faa3 	bl	80069aa <xQueueGenericCreate>
 8006464:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e001      	b.n	800647e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800647e:	6979      	ldr	r1, [r7, #20]
 8006480:	69f8      	ldr	r0, [r7, #28]
 8006482:	f000 ff05 	bl	8007290 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006486:	69fb      	ldr	r3, [r7, #28]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a8:	f3ef 8305 	mrs	r3, IPSR
 80064ac:	617b      	str	r3, [r7, #20]
  return(result);
 80064ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d028      	beq.n	8006506 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <osMessageQueuePut+0x36>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <osMessageQueuePut+0x36>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80064c6:	f06f 0303 	mvn.w	r3, #3
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	e038      	b.n	8006540 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80064d2:	f107 0210 	add.w	r2, r7, #16
 80064d6:	2300      	movs	r3, #0
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	69b8      	ldr	r0, [r7, #24]
 80064dc:	f000 fbc6 	bl	8006c6c <xQueueGenericSendFromISR>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d003      	beq.n	80064ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80064e6:	f06f 0302 	mvn.w	r3, #2
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	e028      	b.n	8006540 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d025      	beq.n	8006540 <osMessageQueuePut+0xb0>
 80064f4:	4b15      	ldr	r3, [pc, #84]	@ (800654c <osMessageQueuePut+0xbc>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	e01c      	b.n	8006540 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <osMessageQueuePut+0x82>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006512:	f06f 0303 	mvn.w	r3, #3
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e012      	b.n	8006540 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800651a:	2300      	movs	r3, #0
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	69b8      	ldr	r0, [r7, #24]
 8006522:	f000 faa1 	bl	8006a68 <xQueueGenericSend>
 8006526:	4603      	mov	r3, r0
 8006528:	2b01      	cmp	r3, #1
 800652a:	d009      	beq.n	8006540 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006532:	f06f 0301 	mvn.w	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	e002      	b.n	8006540 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800653a:	f06f 0302 	mvn.w	r3, #2
 800653e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006540:	69fb      	ldr	r3, [r7, #28]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006566:	f3ef 8305 	mrs	r3, IPSR
 800656a:	617b      	str	r3, [r7, #20]
  return(result);
 800656c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800656e:	2b00      	cmp	r3, #0
 8006570:	d028      	beq.n	80065c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <osMessageQueueGet+0x34>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <osMessageQueueGet+0x34>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006584:	f06f 0303 	mvn.w	r3, #3
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e037      	b.n	80065fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006590:	f107 0310 	add.w	r3, r7, #16
 8006594:	461a      	mov	r2, r3
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	69b8      	ldr	r0, [r7, #24]
 800659a:	f000 fce7 	bl	8006f6c <xQueueReceiveFromISR>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d003      	beq.n	80065ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80065a4:	f06f 0302 	mvn.w	r3, #2
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	e027      	b.n	80065fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d024      	beq.n	80065fc <osMessageQueueGet+0xac>
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <osMessageQueueGet+0xb8>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	e01b      	b.n	80065fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <osMessageQueueGet+0x80>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80065d0:	f06f 0303 	mvn.w	r3, #3
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	e011      	b.n	80065fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	69b8      	ldr	r0, [r7, #24]
 80065de:	f000 fbe3 	bl	8006da8 <xQueueReceive>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d009      	beq.n	80065fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80065ee:	f06f 0301 	mvn.w	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e002      	b.n	80065fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80065f6:	f06f 0302 	mvn.w	r3, #2
 80065fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065fc:	69fb      	ldr	r3, [r7, #28]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a07      	ldr	r2, [pc, #28]	@ (8006638 <vApplicationGetIdleTaskMemory+0x2c>)
 800661c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4a06      	ldr	r2, [pc, #24]	@ (800663c <vApplicationGetIdleTaskMemory+0x30>)
 8006622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2280      	movs	r2, #128	@ 0x80
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200003a8 	.word	0x200003a8
 800663c:	20000450 	.word	0x20000450

08006640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a07      	ldr	r2, [pc, #28]	@ (800666c <vApplicationGetTimerTaskMemory+0x2c>)
 8006650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4a06      	ldr	r2, [pc, #24]	@ (8006670 <vApplicationGetTimerTaskMemory+0x30>)
 8006656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800665e:	601a      	str	r2, [r3, #0]
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	20000650 	.word	0x20000650
 8006670:	200006f8 	.word	0x200006f8

08006674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f103 0208 	add.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f103 0208 	add.w	r2, r3, #8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f103 0208 	add.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d103      	bne.n	8006736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e00c      	b.n	8006750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3308      	adds	r3, #8
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e002      	b.n	8006744 <vListInsert+0x2e>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d2f6      	bcs.n	800673e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6892      	ldr	r2, [r2, #8]
 800679e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6852      	ldr	r2, [r2, #4]
 80067a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d103      	bne.n	80067bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	e7fd      	b.n	8006804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006808:	f002 f966 	bl	8008ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	3b01      	subs	r3, #1
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	441a      	add	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	22ff      	movs	r2, #255	@ 0xff
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	22ff      	movs	r2, #255	@ 0xff
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d114      	bne.n	8006888 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01a      	beq.n	800689c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3310      	adds	r3, #16
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fa00 	bl	8007c70 <xTaskRemoveFromEventList>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d012      	beq.n	800689c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <xQueueGenericReset+0xd0>)
 8006878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	e009      	b.n	800689c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3310      	adds	r3, #16
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fef1 	bl	8006674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3324      	adds	r3, #36	@ 0x24
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff feec 	bl	8006674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800689c:	f002 f94e 	bl	8008b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068a0:	2301      	movs	r3, #1
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08e      	sub	sp, #56	@ 0x38
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <xQueueGenericCreateStatic+0x56>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <xQueueGenericCreateStatic+0x5a>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueGenericCreateStatic+0x5c>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	623b      	str	r3, [r7, #32]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <xQueueGenericCreateStatic+0x84>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <xQueueGenericCreateStatic+0x88>
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <xQueueGenericCreateStatic+0x8a>
 8006938:	2300      	movs	r3, #0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	61fb      	str	r3, [r7, #28]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006956:	2350      	movs	r3, #80	@ 0x50
 8006958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b50      	cmp	r3, #80	@ 0x50
 800695e:	d00b      	beq.n	8006978 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61bb      	str	r3, [r7, #24]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006978:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00d      	beq.n	80069a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800698c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f840 	bl	8006a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3730      	adds	r7, #48	@ 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b08a      	sub	sp, #40	@ 0x28
 80069ae:	af02      	add	r7, sp, #8
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	4613      	mov	r3, r2
 80069b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	613b      	str	r3, [r7, #16]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3350      	adds	r3, #80	@ 0x50
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 f999 	bl	8008d1c <pvPortMalloc>
 80069ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d011      	beq.n	8006a16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	3350      	adds	r3, #80	@ 0x50
 80069fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a04:	79fa      	ldrb	r2, [r7, #7]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f805 	bl	8006a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a16:	69bb      	ldr	r3, [r7, #24]
	}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a4e:	2101      	movs	r1, #1
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f7ff fec3 	bl	80067dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	@ 0x38
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <xQueueGenericSend+0x34>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	e7fd      	b.n	8006a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <xQueueGenericSend+0x42>
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <xQueueGenericSend+0x46>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <xQueueGenericSend+0x48>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <xQueueGenericSend+0x64>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d103      	bne.n	8006ada <xQueueGenericSend+0x72>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <xQueueGenericSend+0x76>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <xQueueGenericSend+0x78>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <xQueueGenericSend+0x94>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	623b      	str	r3, [r7, #32]
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	e7fd      	b.n	8006af8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006afc:	f001 fa7e 	bl	8007ffc <xTaskGetSchedulerState>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <xQueueGenericSend+0xa4>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <xQueueGenericSend+0xa8>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <xQueueGenericSend+0xaa>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <xQueueGenericSend+0xc6>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	61fb      	str	r3, [r7, #28]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b2e:	f001 ffd3 	bl	8008ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <xQueueGenericSend+0xdc>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d129      	bne.n	8006b98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b4a:	f000 fa91 	bl	8007070 <prvCopyDataToQueue>
 8006b4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	3324      	adds	r3, #36	@ 0x24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f887 	bl	8007c70 <xTaskRemoveFromEventList>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d013      	beq.n	8006b90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b68:	4b3f      	ldr	r3, [pc, #252]	@ (8006c68 <xQueueGenericSend+0x200>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	e00a      	b.n	8006b90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b39      	ldr	r3, [pc, #228]	@ (8006c68 <xQueueGenericSend+0x200>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b90:	f001 ffd4 	bl	8008b3c <vPortExitCritical>
				return pdPASS;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e063      	b.n	8006c60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b9e:	f001 ffcd 	bl	8008b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e05c      	b.n	8006c60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f8c1 	bl	8007d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bba:	f001 ffbf 	bl	8008b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bbe:	f000 fe29 	bl	8007814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc2:	f001 ff89 	bl	8008ad8 <vPortEnterCritical>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d103      	bne.n	8006bdc <xQueueGenericSend+0x174>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x18a>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf2:	f001 ffa3 	bl	8008b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf6:	1d3a      	adds	r2, r7, #4
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 f8b0 	bl	8007d64 <xTaskCheckForTimeOut>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d124      	bne.n	8006c54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c0c:	f000 fb28 	bl	8007260 <prvIsQueueFull>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	3310      	adds	r3, #16
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 ffd4 	bl	8007bcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c26:	f000 fab3 	bl	8007190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f000 fe01 	bl	8007830 <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f af7c 	bne.w	8006b2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <xQueueGenericSend+0x200>)
 8006c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	e772      	b.n	8006b2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c4a:	f000 faa1 	bl	8007190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c4e:	f000 fdef 	bl	8007830 <xTaskResumeAll>
 8006c52:	e76c      	b.n	8006b2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c56:	f000 fa9b 	bl	8007190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c5a:	f000 fde9 	bl	8007830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3738      	adds	r7, #56	@ 0x38
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b090      	sub	sp, #64	@ 0x40
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <xQueueGenericSendFromISR+0x3e>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <xQueueGenericSendFromISR+0x42>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueGenericSendFromISR+0x44>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d103      	bne.n	8006cda <xQueueGenericSendFromISR+0x6e>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <xQueueGenericSendFromISR+0x72>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <xQueueGenericSendFromISR+0x74>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10b      	bne.n	8006cfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	623b      	str	r3, [r7, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	e7fd      	b.n	8006cf8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cfc:	f001 ffcc 	bl	8008c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d00:	f3ef 8211 	mrs	r2, BASEPRI
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	61fa      	str	r2, [r7, #28]
 8006d16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <xQueueGenericSendFromISR+0xc2>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d12f      	bne.n	8006d8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d44:	f000 f994 	bl	8007070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d112      	bne.n	8006d78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	3324      	adds	r3, #36	@ 0x24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 ff86 	bl	8007c70 <xTaskRemoveFromEventList>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e007      	b.n	8006d88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	b25a      	sxtb	r2, r3
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006d8c:	e001      	b.n	8006d92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3740      	adds	r7, #64	@ 0x40
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08c      	sub	sp, #48	@ 0x30
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <xQueueReceive+0x32>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	623b      	str	r3, [r7, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d103      	bne.n	8006de8 <xQueueReceive+0x40>
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <xQueueReceive+0x44>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <xQueueReceive+0x46>
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <xQueueReceive+0x62>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	61fb      	str	r3, [r7, #28]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e0a:	f001 f8f7 	bl	8007ffc <xTaskGetSchedulerState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <xQueueReceive+0x72>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <xQueueReceive+0x76>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueReceive+0x78>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xQueueReceive+0x94>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e3c:	f001 fe4c 	bl	8008ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01f      	beq.n	8006e8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e50:	f000 f978 	bl	8007144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	1e5a      	subs	r2, r3, #1
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00f      	beq.n	8006e84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	3310      	adds	r3, #16
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ff01 	bl	8007c70 <xTaskRemoveFromEventList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e74:	4b3c      	ldr	r3, [pc, #240]	@ (8006f68 <xQueueReceive+0x1c0>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e84:	f001 fe5a 	bl	8008b3c <vPortExitCritical>
				return pdPASS;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e069      	b.n	8006f60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e92:	f001 fe53 	bl	8008b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e062      	b.n	8006f60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 ff47 	bl	8007d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eae:	f001 fe45 	bl	8008b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eb2:	f000 fcaf 	bl	8007814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb6:	f001 fe0f 	bl	8008ad8 <vPortEnterCritical>
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d103      	bne.n	8006ed0 <xQueueReceive+0x128>
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d103      	bne.n	8006ee6 <xQueueReceive+0x13e>
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ee6:	f001 fe29 	bl	8008b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eea:	1d3a      	adds	r2, r7, #4
 8006eec:	f107 0310 	add.w	r3, r7, #16
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 ff36 	bl	8007d64 <xTaskCheckForTimeOut>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d123      	bne.n	8006f46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f00:	f000 f998 	bl	8007234 <prvIsQueueEmpty>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d017      	beq.n	8006f3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	3324      	adds	r3, #36	@ 0x24
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fe5a 	bl	8007bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f1a:	f000 f939 	bl	8007190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f1e:	f000 fc87 	bl	8007830 <xTaskResumeAll>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d189      	bne.n	8006e3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f28:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <xQueueReceive+0x1c0>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	e780      	b.n	8006e3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f3c:	f000 f928 	bl	8007190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f40:	f000 fc76 	bl	8007830 <xTaskResumeAll>
 8006f44:	e77a      	b.n	8006e3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f48:	f000 f922 	bl	8007190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f4c:	f000 fc70 	bl	8007830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f52:	f000 f96f 	bl	8007234 <prvIsQueueEmpty>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f43f af6f 	beq.w	8006e3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3730      	adds	r7, #48	@ 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	@ 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	623b      	str	r3, [r7, #32]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <xQueueReceiveFromISR+0x3c>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <xQueueReceiveFromISR+0x40>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <xQueueReceiveFromISR+0x42>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	61fb      	str	r3, [r7, #28]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fca:	f001 fe65 	bl	8008c98 <vPortValidateInterruptPriority>
	__asm volatile
 8006fce:	f3ef 8211 	mrs	r2, BASEPRI
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61ba      	str	r2, [r7, #24]
 8006fe4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fe6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02f      	beq.n	8007056 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007004:	f000 f89e 	bl	8007144 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	1e5a      	subs	r2, r3, #1
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007010:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d112      	bne.n	8007040 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d016      	beq.n	8007050 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	3310      	adds	r3, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fe22 	bl	8007c70 <xTaskRemoveFromEventList>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e007      	b.n	8007050 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007044:	3301      	adds	r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	b25a      	sxtb	r2, r3
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007050:	2301      	movs	r3, #1
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
 8007054:	e001      	b.n	800705a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f383 8811 	msr	BASEPRI, r3
}
 8007064:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007068:	4618      	mov	r0, r3
 800706a:	3738      	adds	r7, #56	@ 0x38
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10d      	bne.n	80070aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d14d      	bne.n	8007132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ffcc 	bl	8008038 <xTaskPriorityDisinherit>
 80070a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	609a      	str	r2, [r3, #8]
 80070a8:	e043      	b.n	8007132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d119      	bne.n	80070e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6858      	ldr	r0, [r3, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b8:	461a      	mov	r2, r3
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	f002 fe77 	bl	8009dae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	441a      	add	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d32b      	bcc.n	8007132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	e026      	b.n	8007132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68d8      	ldr	r0, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	461a      	mov	r2, r3
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	f002 fe5d 	bl	8009dae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fc:	425b      	negs	r3, r3
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d207      	bcs.n	8007120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	425b      	negs	r3, r3
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d105      	bne.n	8007132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800713a:	697b      	ldr	r3, [r7, #20]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d303      	bcc.n	8007178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68d9      	ldr	r1, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	461a      	mov	r2, r3
 8007182:	6838      	ldr	r0, [r7, #0]
 8007184:	f002 fe13 	bl	8009dae <memcpy>
	}
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007198:	f001 fc9e 	bl	8008ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a4:	e011      	b.n	80071ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d012      	beq.n	80071d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3324      	adds	r3, #36	@ 0x24
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fd5c 	bl	8007c70 <xTaskRemoveFromEventList>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071be:	f000 fe35 	bl	8007e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dce9      	bgt.n	80071a6 <prvUnlockQueue+0x16>
 80071d2:	e000      	b.n	80071d6 <prvUnlockQueue+0x46>
					break;
 80071d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	22ff      	movs	r2, #255	@ 0xff
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071de:	f001 fcad 	bl	8008b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071e2:	f001 fc79 	bl	8008ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ee:	e011      	b.n	8007214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3310      	adds	r3, #16
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fd37 	bl	8007c70 <xTaskRemoveFromEventList>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007208:	f000 fe10 	bl	8007e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	3b01      	subs	r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	dce9      	bgt.n	80071f0 <prvUnlockQueue+0x60>
 800721c:	e000      	b.n	8007220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800721e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	22ff      	movs	r2, #255	@ 0xff
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007228:	f001 fc88 	bl	8008b3c <vPortExitCritical>
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800723c:	f001 fc4c 	bl	8008ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e001      	b.n	8007252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007252:	f001 fc73 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007268:	f001 fc36 	bl	8008ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007274:	429a      	cmp	r2, r3
 8007276:	d102      	bne.n	800727e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e001      	b.n	8007282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007282:	f001 fc5b 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e014      	b.n	80072ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072a0:	4a0f      	ldr	r2, [pc, #60]	@ (80072e0 <vQueueAddToRegistry+0x50>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072ac:	490c      	ldr	r1, [pc, #48]	@ (80072e0 <vQueueAddToRegistry+0x50>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072b6:	4a0a      	ldr	r2, [pc, #40]	@ (80072e0 <vQueueAddToRegistry+0x50>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072c2:	e006      	b.n	80072d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b07      	cmp	r3, #7
 80072ce:	d9e7      	bls.n	80072a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000af8 	.word	0x20000af8

080072e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072f4:	f001 fbf0 	bl	8008ad8 <vPortEnterCritical>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d103      	bne.n	800730e <vQueueWaitForMessageRestricted+0x2a>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007314:	b25b      	sxtb	r3, r3
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d103      	bne.n	8007324 <vQueueWaitForMessageRestricted+0x40>
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007324:	f001 fc0a 	bl	8008b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	3324      	adds	r3, #36	@ 0x24
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fc6d 	bl	8007c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800733e:	6978      	ldr	r0, [r7, #20]
 8007340:	f7ff ff26 	bl	8007190 <prvUnlockQueue>
	}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	@ 0x38
 8007350:	af04      	add	r7, sp, #16
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	623b      	str	r3, [r7, #32]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <xTaskCreateStatic+0x4a>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61fb      	str	r3, [r7, #28]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007396:	23a8      	movs	r3, #168	@ 0xa8
 8007398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2ba8      	cmp	r3, #168	@ 0xa8
 800739e:	d00b      	beq.n	80073b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61bb      	str	r3, [r7, #24]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01e      	beq.n	80073fe <xTaskCreateStatic+0xb2>
 80073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01b      	beq.n	80073fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073d8:	2300      	movs	r3, #0
 80073da:	9303      	str	r3, [sp, #12]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	9302      	str	r3, [sp, #8]
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f851 	bl	8007498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073f8:	f000 f8f6 	bl	80075e8 <prvAddNewTaskToReadyList>
 80073fc:	e001      	b.n	8007402 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007402:	697b      	ldr	r3, [r7, #20]
	}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	@ 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	@ 0x30
 8007410:	af04      	add	r7, sp, #16
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	4613      	mov	r3, r2
 800741a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 fc7b 	bl	8008d1c <pvPortMalloc>
 8007426:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00e      	beq.n	800744c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800742e:	20a8      	movs	r0, #168	@ 0xa8
 8007430:	f001 fc74 	bl	8008d1c <pvPortMalloc>
 8007434:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	631a      	str	r2, [r3, #48]	@ 0x30
 8007442:	e005      	b.n	8007450 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007444:	6978      	ldr	r0, [r7, #20]
 8007446:	f001 fd37 	bl	8008eb8 <vPortFree>
 800744a:	e001      	b.n	8007450 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800744c:	2300      	movs	r3, #0
 800744e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d017      	beq.n	8007486 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	2300      	movs	r3, #0
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	9302      	str	r3, [sp, #8]
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f80f 	bl	8007498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800747a:	69f8      	ldr	r0, [r7, #28]
 800747c:	f000 f8b4 	bl	80075e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007480:	2301      	movs	r3, #1
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e002      	b.n	800748c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007486:	f04f 33ff 	mov.w	r3, #4294967295
 800748a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800748c:	69bb      	ldr	r3, [r7, #24]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	461a      	mov	r2, r3
 80074b0:	21a5      	movs	r1, #165	@ 0xa5
 80074b2:	f002 fb9e 	bl	8009bf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074c0:	3b01      	subs	r3, #1
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	617b      	str	r3, [r7, #20]
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	e7fd      	b.n	80074ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01f      	beq.n	8007538 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	e012      	b.n	8007524 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	7819      	ldrb	r1, [r3, #0]
 8007506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	3334      	adds	r3, #52	@ 0x34
 800750e:	460a      	mov	r2, r1
 8007510:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3301      	adds	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d9e9      	bls.n	80074fe <prvInitialiseNewTask+0x66>
 800752a:	e000      	b.n	800752e <prvInitialiseNewTask+0x96>
			{
				break;
 800752c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007536:	e003      	b.n	8007540 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	2b37      	cmp	r3, #55	@ 0x37
 8007544:	d901      	bls.n	800754a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007546:	2337      	movs	r3, #55	@ 0x37
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800754e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007554:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff f8a7 	bl	80066b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	3318      	adds	r3, #24
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff f8a2 	bl	80066b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007574:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007584:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	2200      	movs	r2, #0
 8007592:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	3354      	adds	r3, #84	@ 0x54
 800759a:	224c      	movs	r2, #76	@ 0x4c
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 fb27 	bl	8009bf2 <memset>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	4a0d      	ldr	r2, [pc, #52]	@ (80075dc <prvInitialiseNewTask+0x144>)
 80075a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	4a0c      	ldr	r2, [pc, #48]	@ (80075e0 <prvInitialiseNewTask+0x148>)
 80075ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	4a0c      	ldr	r2, [pc, #48]	@ (80075e4 <prvInitialiseNewTask+0x14c>)
 80075b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	69b8      	ldr	r0, [r7, #24]
 80075bc:	f001 f95a 	bl	8008874 <pxPortInitialiseStack>
 80075c0:	4602      	mov	r2, r0
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075d2:	bf00      	nop
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20004d8c 	.word	0x20004d8c
 80075e0:	20004df4 	.word	0x20004df4
 80075e4:	20004e5c 	.word	0x20004e5c

080075e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075f0:	f001 fa72 	bl	8008ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075f4:	4b2d      	ldr	r3, [pc, #180]	@ (80076ac <prvAddNewTaskToReadyList+0xc4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	4a2c      	ldr	r2, [pc, #176]	@ (80076ac <prvAddNewTaskToReadyList+0xc4>)
 80075fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075fe:	4b2c      	ldr	r3, [pc, #176]	@ (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007606:	4a2a      	ldr	r2, [pc, #168]	@ (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800760c:	4b27      	ldr	r3, [pc, #156]	@ (80076ac <prvAddNewTaskToReadyList+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d110      	bne.n	8007636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007614:	f000 fc2e 	bl	8007e74 <prvInitialiseTaskLists>
 8007618:	e00d      	b.n	8007636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800761a:	4b26      	ldr	r3, [pc, #152]	@ (80076b4 <prvAddNewTaskToReadyList+0xcc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007622:	4b23      	ldr	r3, [pc, #140]	@ (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d802      	bhi.n	8007636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007630:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007636:	4b20      	ldr	r3, [pc, #128]	@ (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	4a1e      	ldr	r2, [pc, #120]	@ (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 800763e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007640:	4b1d      	ldr	r3, [pc, #116]	@ (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764c:	4b1b      	ldr	r3, [pc, #108]	@ (80076bc <prvAddNewTaskToReadyList+0xd4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d903      	bls.n	800765c <prvAddNewTaskToReadyList+0x74>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007658:	4a18      	ldr	r2, [pc, #96]	@ (80076bc <prvAddNewTaskToReadyList+0xd4>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a15      	ldr	r2, [pc, #84]	@ (80076c0 <prvAddNewTaskToReadyList+0xd8>)
 800766a:	441a      	add	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7ff f82b 	bl	80066ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007678:	f001 fa60 	bl	8008b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800767c:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <prvAddNewTaskToReadyList+0xcc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00e      	beq.n	80076a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007684:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d207      	bcs.n	80076a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <prvAddNewTaskToReadyList+0xdc>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2000100c 	.word	0x2000100c
 80076b0:	20000b38 	.word	0x20000b38
 80076b4:	20001018 	.word	0x20001018
 80076b8:	20001028 	.word	0x20001028
 80076bc:	20001014 	.word	0x20001014
 80076c0:	20000b3c 	.word	0x20000b3c
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d018      	beq.n	800770c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076da:	4b14      	ldr	r3, [pc, #80]	@ (800772c <vTaskDelay+0x64>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <vTaskDelay+0x32>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076fa:	f000 f88b 	bl	8007814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fd09 	bl	8008118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007706:	f000 f893 	bl	8007830 <xTaskResumeAll>
 800770a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d107      	bne.n	8007722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007712:	4b07      	ldr	r3, [pc, #28]	@ (8007730 <vTaskDelay+0x68>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007722:	bf00      	nop
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20001034 	.word	0x20001034
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	@ 0x28
 8007738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007742:	463a      	mov	r2, r7
 8007744:	1d39      	adds	r1, r7, #4
 8007746:	f107 0308 	add.w	r3, r7, #8
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe ff5e 	bl	800660c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	9202      	str	r2, [sp, #8]
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	2300      	movs	r3, #0
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	460a      	mov	r2, r1
 8007762:	4924      	ldr	r1, [pc, #144]	@ (80077f4 <vTaskStartScheduler+0xc0>)
 8007764:	4824      	ldr	r0, [pc, #144]	@ (80077f8 <vTaskStartScheduler+0xc4>)
 8007766:	f7ff fdf1 	bl	800734c <xTaskCreateStatic>
 800776a:	4603      	mov	r3, r0
 800776c:	4a23      	ldr	r2, [pc, #140]	@ (80077fc <vTaskStartScheduler+0xc8>)
 800776e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007770:	4b22      	ldr	r3, [pc, #136]	@ (80077fc <vTaskStartScheduler+0xc8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e001      	b.n	8007782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d102      	bne.n	800778e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007788:	f000 fd1a 	bl	80081c0 <xTimerCreateTimerTask>
 800778c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d11b      	bne.n	80077cc <vTaskStartScheduler+0x98>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	613b      	str	r3, [r7, #16]
}
 80077a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <vTaskStartScheduler+0xcc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3354      	adds	r3, #84	@ 0x54
 80077ae:	4a15      	ldr	r2, [pc, #84]	@ (8007804 <vTaskStartScheduler+0xd0>)
 80077b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077b2:	4b15      	ldr	r3, [pc, #84]	@ (8007808 <vTaskStartScheduler+0xd4>)
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295
 80077b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <vTaskStartScheduler+0xd8>)
 80077bc:	2201      	movs	r2, #1
 80077be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077c0:	4b13      	ldr	r3, [pc, #76]	@ (8007810 <vTaskStartScheduler+0xdc>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077c6:	f001 f8e3 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ca:	e00f      	b.n	80077ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d10b      	bne.n	80077ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60fb      	str	r3, [r7, #12]
}
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	e7fd      	b.n	80077e8 <vTaskStartScheduler+0xb4>
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	0800bef8 	.word	0x0800bef8
 80077f8:	08007e45 	.word	0x08007e45
 80077fc:	20001030 	.word	0x20001030
 8007800:	20000b38 	.word	0x20000b38
 8007804:	2000001c 	.word	0x2000001c
 8007808:	2000102c 	.word	0x2000102c
 800780c:	20001018 	.word	0x20001018
 8007810:	20001010 	.word	0x20001010

08007814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007818:	4b04      	ldr	r3, [pc, #16]	@ (800782c <vTaskSuspendAll+0x18>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	4a03      	ldr	r2, [pc, #12]	@ (800782c <vTaskSuspendAll+0x18>)
 8007820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007822:	bf00      	nop
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20001034 	.word	0x20001034

08007830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800783e:	4b42      	ldr	r3, [pc, #264]	@ (8007948 <xTaskResumeAll+0x118>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <xTaskResumeAll+0x2e>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	603b      	str	r3, [r7, #0]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800785e:	f001 f93b 	bl	8008ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007862:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <xTaskResumeAll+0x118>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a37      	ldr	r2, [pc, #220]	@ (8007948 <xTaskResumeAll+0x118>)
 800786a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800786c:	4b36      	ldr	r3, [pc, #216]	@ (8007948 <xTaskResumeAll+0x118>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d162      	bne.n	800793a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007874:	4b35      	ldr	r3, [pc, #212]	@ (800794c <xTaskResumeAll+0x11c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d05e      	beq.n	800793a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800787c:	e02f      	b.n	80078de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787e:	4b34      	ldr	r3, [pc, #208]	@ (8007950 <xTaskResumeAll+0x120>)
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3318      	adds	r3, #24
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe ff7c 	bl	8006788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe ff77 	bl	8006788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789e:	4b2d      	ldr	r3, [pc, #180]	@ (8007954 <xTaskResumeAll+0x124>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d903      	bls.n	80078ae <xTaskResumeAll+0x7e>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007954 <xTaskResumeAll+0x124>)
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a27      	ldr	r2, [pc, #156]	@ (8007958 <xTaskResumeAll+0x128>)
 80078bc:	441a      	add	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7fe ff02 	bl	80066ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ce:	4b23      	ldr	r3, [pc, #140]	@ (800795c <xTaskResumeAll+0x12c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d302      	bcc.n	80078de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078d8:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <xTaskResumeAll+0x130>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078de:	4b1c      	ldr	r3, [pc, #112]	@ (8007950 <xTaskResumeAll+0x120>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1cb      	bne.n	800787e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078ec:	f000 fb66 	bl	8007fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007964 <xTaskResumeAll+0x134>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d010      	beq.n	800791e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078fc:	f000 f846 	bl	800798c <xTaskIncrementTick>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007906:	4b16      	ldr	r3, [pc, #88]	@ (8007960 <xTaskResumeAll+0x130>)
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3b01      	subs	r3, #1
 8007910:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f1      	bne.n	80078fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007918:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <xTaskResumeAll+0x134>)
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800791e:	4b10      	ldr	r3, [pc, #64]	@ (8007960 <xTaskResumeAll+0x130>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007926:	2301      	movs	r3, #1
 8007928:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800792a:	4b0f      	ldr	r3, [pc, #60]	@ (8007968 <xTaskResumeAll+0x138>)
 800792c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800793a:	f001 f8ff 	bl	8008b3c <vPortExitCritical>

	return xAlreadyYielded;
 800793e:	68bb      	ldr	r3, [r7, #8]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20001034 	.word	0x20001034
 800794c:	2000100c 	.word	0x2000100c
 8007950:	20000fcc 	.word	0x20000fcc
 8007954:	20001014 	.word	0x20001014
 8007958:	20000b3c 	.word	0x20000b3c
 800795c:	20000b38 	.word	0x20000b38
 8007960:	20001020 	.word	0x20001020
 8007964:	2000101c 	.word	0x2000101c
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007972:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <xTaskGetTickCount+0x1c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007978:	687b      	ldr	r3, [r7, #4]
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20001010 	.word	0x20001010

0800798c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007996:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad4 <xTaskIncrementTick+0x148>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 8090 	bne.w	8007ac0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079a0:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad8 <xTaskIncrementTick+0x14c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3301      	adds	r3, #1
 80079a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079a8:	4a4b      	ldr	r2, [pc, #300]	@ (8007ad8 <xTaskIncrementTick+0x14c>)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d121      	bne.n	80079f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079b4:	4b49      	ldr	r3, [pc, #292]	@ (8007adc <xTaskIncrementTick+0x150>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	603b      	str	r3, [r7, #0]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <xTaskIncrementTick+0x46>
 80079d6:	4b41      	ldr	r3, [pc, #260]	@ (8007adc <xTaskIncrementTick+0x150>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	4b40      	ldr	r3, [pc, #256]	@ (8007ae0 <xTaskIncrementTick+0x154>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a3e      	ldr	r2, [pc, #248]	@ (8007adc <xTaskIncrementTick+0x150>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae0 <xTaskIncrementTick+0x154>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae4 <xTaskIncrementTick+0x158>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ae4 <xTaskIncrementTick+0x158>)
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	f000 fae2 	bl	8007fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079f8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae8 <xTaskIncrementTick+0x15c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d349      	bcc.n	8007a96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a02:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <xTaskIncrementTick+0x150>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a0c:	4b36      	ldr	r3, [pc, #216]	@ (8007ae8 <xTaskIncrementTick+0x15c>)
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	601a      	str	r2, [r3, #0]
					break;
 8007a14:	e03f      	b.n	8007a96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a16:	4b31      	ldr	r3, [pc, #196]	@ (8007adc <xTaskIncrementTick+0x150>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d203      	bcs.n	8007a36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae8 <xTaskIncrementTick+0x15c>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a34:	e02f      	b.n	8007a96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fea4 	bl	8006788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	3318      	adds	r3, #24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fe9b 	bl	8006788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a56:	4b25      	ldr	r3, [pc, #148]	@ (8007aec <xTaskIncrementTick+0x160>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d903      	bls.n	8007a66 <xTaskIncrementTick+0xda>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a62:	4a22      	ldr	r2, [pc, #136]	@ (8007aec <xTaskIncrementTick+0x160>)
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4a1f      	ldr	r2, [pc, #124]	@ (8007af0 <xTaskIncrementTick+0x164>)
 8007a74:	441a      	add	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7fe fe26 	bl	80066ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a86:	4b1b      	ldr	r3, [pc, #108]	@ (8007af4 <xTaskIncrementTick+0x168>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d3b8      	bcc.n	8007a02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a90:	2301      	movs	r3, #1
 8007a92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a94:	e7b5      	b.n	8007a02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a96:	4b17      	ldr	r3, [pc, #92]	@ (8007af4 <xTaskIncrementTick+0x168>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9c:	4914      	ldr	r1, [pc, #80]	@ (8007af0 <xTaskIncrementTick+0x164>)
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d901      	bls.n	8007ab2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ab2:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <xTaskIncrementTick+0x16c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007aba:	2301      	movs	r3, #1
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e004      	b.n	8007aca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <xTaskIncrementTick+0x170>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8007afc <xTaskIncrementTick+0x170>)
 8007ac8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007aca:	697b      	ldr	r3, [r7, #20]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20001034 	.word	0x20001034
 8007ad8:	20001010 	.word	0x20001010
 8007adc:	20000fc4 	.word	0x20000fc4
 8007ae0:	20000fc8 	.word	0x20000fc8
 8007ae4:	20001024 	.word	0x20001024
 8007ae8:	2000102c 	.word	0x2000102c
 8007aec:	20001014 	.word	0x20001014
 8007af0:	20000b3c 	.word	0x20000b3c
 8007af4:	20000b38 	.word	0x20000b38
 8007af8:	20001020 	.word	0x20001020
 8007afc:	2000101c 	.word	0x2000101c

08007b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b06:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb4 <vTaskSwitchContext+0xb4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007bb8 <vTaskSwitchContext+0xb8>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b14:	e047      	b.n	8007ba6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007b16:	4b28      	ldr	r3, [pc, #160]	@ (8007bb8 <vTaskSwitchContext+0xb8>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1c:	4b27      	ldr	r3, [pc, #156]	@ (8007bbc <vTaskSwitchContext+0xbc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e011      	b.n	8007b48 <vTaskSwitchContext+0x48>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <vTaskSwitchContext+0x42>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	e7fd      	b.n	8007b3e <vTaskSwitchContext+0x3e>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	491d      	ldr	r1, [pc, #116]	@ (8007bc0 <vTaskSwitchContext+0xc0>)
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0e3      	beq.n	8007b24 <vTaskSwitchContext+0x24>
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4a16      	ldr	r2, [pc, #88]	@ (8007bc0 <vTaskSwitchContext+0xc0>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	605a      	str	r2, [r3, #4]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d104      	bne.n	8007b8c <vTaskSwitchContext+0x8c>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	605a      	str	r2, [r3, #4]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	4a0c      	ldr	r2, [pc, #48]	@ (8007bc4 <vTaskSwitchContext+0xc4>)
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	4a09      	ldr	r2, [pc, #36]	@ (8007bbc <vTaskSwitchContext+0xbc>)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b9c:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <vTaskSwitchContext+0xc4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3354      	adds	r3, #84	@ 0x54
 8007ba2:	4a09      	ldr	r2, [pc, #36]	@ (8007bc8 <vTaskSwitchContext+0xc8>)
 8007ba4:	6013      	str	r3, [r2, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20001034 	.word	0x20001034
 8007bb8:	20001020 	.word	0x20001020
 8007bbc:	20001014 	.word	0x20001014
 8007bc0:	20000b3c 	.word	0x20000b3c
 8007bc4:	20000b38 	.word	0x20000b38
 8007bc8:	2000001c 	.word	0x2000001c

08007bcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bf4:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <vTaskPlaceOnEventList+0x48>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe fd8a 	bl	8006716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c02:	2101      	movs	r1, #1
 8007c04:	6838      	ldr	r0, [r7, #0]
 8007c06:	f000 fa87 	bl	8008118 <prvAddCurrentTaskToDelayedList>
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000b38 	.word	0x20000b38

08007c18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	617b      	str	r3, [r7, #20]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c42:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <vTaskPlaceOnEventListRestricted+0x54>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3318      	adds	r3, #24
 8007c48:	4619      	mov	r1, r3
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7fe fd3f 	bl	80066ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	68b8      	ldr	r0, [r7, #8]
 8007c60:	f000 fa5a 	bl	8008118 <prvAddCurrentTaskToDelayedList>
	}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000b38 	.word	0x20000b38

08007c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	3318      	adds	r3, #24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fd70 	bl	8006788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d20 <xTaskRemoveFromEventList+0xb0>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d11d      	bne.n	8007cec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fd67 	bl	8006788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	4b19      	ldr	r3, [pc, #100]	@ (8007d24 <xTaskRemoveFromEventList+0xb4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d903      	bls.n	8007cce <xTaskRemoveFromEventList+0x5e>
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	4a16      	ldr	r2, [pc, #88]	@ (8007d24 <xTaskRemoveFromEventList+0xb4>)
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4a13      	ldr	r2, [pc, #76]	@ (8007d28 <xTaskRemoveFromEventList+0xb8>)
 8007cdc:	441a      	add	r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fe fcf2 	bl	80066ce <vListInsertEnd>
 8007cea:	e005      	b.n	8007cf8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3318      	adds	r3, #24
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	480e      	ldr	r0, [pc, #56]	@ (8007d2c <xTaskRemoveFromEventList+0xbc>)
 8007cf4:	f7fe fceb 	bl	80066ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d30 <xTaskRemoveFromEventList+0xc0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d905      	bls.n	8007d12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <xTaskRemoveFromEventList+0xc4>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e001      	b.n	8007d16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d16:	697b      	ldr	r3, [r7, #20]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20001034 	.word	0x20001034
 8007d24:	20001014 	.word	0x20001014
 8007d28:	20000b3c 	.word	0x20000b3c
 8007d2c:	20000fcc 	.word	0x20000fcc
 8007d30:	20000b38 	.word	0x20000b38
 8007d34:	20001020 	.word	0x20001020

08007d38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d40:	4b06      	ldr	r3, [pc, #24]	@ (8007d5c <vTaskInternalSetTimeOutState+0x24>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <vTaskInternalSetTimeOutState+0x28>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20001024 	.word	0x20001024
 8007d60:	20001010 	.word	0x20001010

08007d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	613b      	str	r3, [r7, #16]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60fb      	str	r3, [r7, #12]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007daa:	f000 fe95 	bl	8008ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dae:	4b1d      	ldr	r3, [pc, #116]	@ (8007e24 <xTaskCheckForTimeOut+0xc0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d102      	bne.n	8007dce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61fb      	str	r3, [r7, #28]
 8007dcc:	e023      	b.n	8007e16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b15      	ldr	r3, [pc, #84]	@ (8007e28 <xTaskCheckForTimeOut+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d007      	beq.n	8007dea <xTaskCheckForTimeOut+0x86>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d302      	bcc.n	8007dea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e015      	b.n	8007e16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d20b      	bcs.n	8007e0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ff99 	bl	8007d38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	e004      	b.n	8007e16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e16:	f000 fe91 	bl	8008b3c <vPortExitCritical>

	return xReturn;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3720      	adds	r7, #32
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20001010 	.word	0x20001010
 8007e28:	20001024 	.word	0x20001024

08007e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e30:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <vTaskMissedYield+0x14>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
}
 8007e36:	bf00      	nop
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20001020 	.word	0x20001020

08007e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e4c:	f000 f852 	bl	8007ef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <prvIdleTask+0x28>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d9f9      	bls.n	8007e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <prvIdleTask+0x2c>)
 8007e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e68:	e7f0      	b.n	8007e4c <prvIdleTask+0x8>
 8007e6a:	bf00      	nop
 8007e6c:	20000b3c 	.word	0x20000b3c
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	e00c      	b.n	8007e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4a12      	ldr	r2, [pc, #72]	@ (8007ed4 <prvInitialiseTaskLists+0x60>)
 8007e8c:	4413      	add	r3, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fbf0 	bl	8006674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3301      	adds	r3, #1
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b37      	cmp	r3, #55	@ 0x37
 8007e9e:	d9ef      	bls.n	8007e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ea0:	480d      	ldr	r0, [pc, #52]	@ (8007ed8 <prvInitialiseTaskLists+0x64>)
 8007ea2:	f7fe fbe7 	bl	8006674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ea6:	480d      	ldr	r0, [pc, #52]	@ (8007edc <prvInitialiseTaskLists+0x68>)
 8007ea8:	f7fe fbe4 	bl	8006674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007eac:	480c      	ldr	r0, [pc, #48]	@ (8007ee0 <prvInitialiseTaskLists+0x6c>)
 8007eae:	f7fe fbe1 	bl	8006674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eb2:	480c      	ldr	r0, [pc, #48]	@ (8007ee4 <prvInitialiseTaskLists+0x70>)
 8007eb4:	f7fe fbde 	bl	8006674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007eb8:	480b      	ldr	r0, [pc, #44]	@ (8007ee8 <prvInitialiseTaskLists+0x74>)
 8007eba:	f7fe fbdb 	bl	8006674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <prvInitialiseTaskLists+0x78>)
 8007ec0:	4a05      	ldr	r2, [pc, #20]	@ (8007ed8 <prvInitialiseTaskLists+0x64>)
 8007ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <prvInitialiseTaskLists+0x7c>)
 8007ec6:	4a05      	ldr	r2, [pc, #20]	@ (8007edc <prvInitialiseTaskLists+0x68>)
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000b3c 	.word	0x20000b3c
 8007ed8:	20000f9c 	.word	0x20000f9c
 8007edc:	20000fb0 	.word	0x20000fb0
 8007ee0:	20000fcc 	.word	0x20000fcc
 8007ee4:	20000fe0 	.word	0x20000fe0
 8007ee8:	20000ff8 	.word	0x20000ff8
 8007eec:	20000fc4 	.word	0x20000fc4
 8007ef0:	20000fc8 	.word	0x20000fc8

08007ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007efa:	e019      	b.n	8007f30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007efc:	f000 fdec 	bl	8008ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f00:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <prvCheckTasksWaitingTermination+0x50>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fc3b 	bl	8006788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <prvCheckTasksWaitingTermination+0x54>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	4a0b      	ldr	r2, [pc, #44]	@ (8007f48 <prvCheckTasksWaitingTermination+0x54>)
 8007f1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f26:	f000 fe09 	bl	8008b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f810 	bl	8007f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e1      	bne.n	8007efc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000fe0 	.word	0x20000fe0
 8007f48:	2000100c 	.word	0x2000100c
 8007f4c:	20000ff4 	.word	0x20000ff4

08007f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3354      	adds	r3, #84	@ 0x54
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fe65 	bl	8009c2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 ffa1 	bl	8008eb8 <vPortFree>
				vPortFree( pxTCB );
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ff9e 	bl	8008eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f7c:	e019      	b.n	8007fb2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d103      	bne.n	8007f90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 ff95 	bl	8008eb8 <vPortFree>
	}
 8007f8e:	e010      	b.n	8007fb2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d00b      	beq.n	8007fb2 <prvDeleteTCB+0x62>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	60fb      	str	r3, [r7, #12]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <prvDeleteTCB+0x5e>
	}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <prvResetNextTaskUnblockTime+0x38>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8007fce:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fd4:	e008      	b.n	8007fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd6:	4b07      	ldr	r3, [pc, #28]	@ (8007ff4 <prvResetNextTaskUnblockTime+0x38>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a04      	ldr	r2, [pc, #16]	@ (8007ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8007fe6:	6013      	str	r3, [r2, #0]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000fc4 	.word	0x20000fc4
 8007ff8:	2000102c 	.word	0x2000102c

08007ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008002:	4b0b      	ldr	r3, [pc, #44]	@ (8008030 <xTaskGetSchedulerState+0x34>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800800a:	2301      	movs	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	e008      	b.n	8008022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008010:	4b08      	ldr	r3, [pc, #32]	@ (8008034 <xTaskGetSchedulerState+0x38>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008018:	2302      	movs	r3, #2
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	e001      	b.n	8008022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008022:	687b      	ldr	r3, [r7, #4]
	}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	20001018 	.word	0x20001018
 8008034:	20001034 	.word	0x20001034

08008038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d058      	beq.n	8008100 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800804e:	4b2f      	ldr	r3, [pc, #188]	@ (800810c <xTaskPriorityDisinherit+0xd4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d00b      	beq.n	8008070 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60fb      	str	r3, [r7, #12]
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10b      	bne.n	8008090 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60bb      	str	r3, [r7, #8]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	1e5a      	subs	r2, r3, #1
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d02c      	beq.n	8008100 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d128      	bne.n	8008100 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fb68 	bl	8006788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008110 <xTaskPriorityDisinherit+0xd8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d903      	bls.n	80080e0 <xTaskPriorityDisinherit+0xa8>
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008110 <xTaskPriorityDisinherit+0xd8>)
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4a09      	ldr	r2, [pc, #36]	@ (8008114 <xTaskPriorityDisinherit+0xdc>)
 80080ee:	441a      	add	r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f7fe fae9 	bl	80066ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008100:	697b      	ldr	r3, [r7, #20]
	}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000b38 	.word	0x20000b38
 8008110:	20001014 	.word	0x20001014
 8008114:	20000b3c 	.word	0x20000b3c

08008118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008122:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008128:	4b20      	ldr	r3, [pc, #128]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x94>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fb2a 	bl	8006788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d10a      	bne.n	8008152 <prvAddCurrentTaskToDelayedList+0x3a>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008142:	4b1a      	ldr	r3, [pc, #104]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3304      	adds	r3, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4819      	ldr	r0, [pc, #100]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800814c:	f7fe fabf 	bl	80066ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008150:	e026      	b.n	80081a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4413      	add	r3, r2
 8008158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800815a:	4b14      	ldr	r3, [pc, #80]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x94>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	429a      	cmp	r2, r3
 8008168:	d209      	bcs.n	800817e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800816a:	4b12      	ldr	r3, [pc, #72]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b0f      	ldr	r3, [pc, #60]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe facd 	bl	8006716 <vListInsert>
}
 800817c:	e010      	b.n	80081a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817e:	4b0e      	ldr	r3, [pc, #56]	@ (80081b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b0a      	ldr	r3, [pc, #40]	@ (80081ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe fac3 	bl	8006716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008190:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d202      	bcs.n	80081a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800819a:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6013      	str	r3, [r2, #0]
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20001010 	.word	0x20001010
 80081ac:	20000b38 	.word	0x20000b38
 80081b0:	20000ff8 	.word	0x20000ff8
 80081b4:	20000fc8 	.word	0x20000fc8
 80081b8:	20000fc4 	.word	0x20000fc4
 80081bc:	2000102c 	.word	0x2000102c

080081c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	@ 0x28
 80081c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081ca:	f000 fb13 	bl	80087f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <xTimerCreateTimerTask+0x84>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d021      	beq.n	800821a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081de:	1d3a      	adds	r2, r7, #4
 80081e0:	f107 0108 	add.w	r1, r7, #8
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fa29 	bl	8006640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	9202      	str	r2, [sp, #8]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	2302      	movs	r3, #2
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	2300      	movs	r3, #0
 80081fe:	460a      	mov	r2, r1
 8008200:	4911      	ldr	r1, [pc, #68]	@ (8008248 <xTimerCreateTimerTask+0x88>)
 8008202:	4812      	ldr	r0, [pc, #72]	@ (800824c <xTimerCreateTimerTask+0x8c>)
 8008204:	f7ff f8a2 	bl	800734c <xTaskCreateStatic>
 8008208:	4603      	mov	r3, r0
 800820a:	4a11      	ldr	r2, [pc, #68]	@ (8008250 <xTimerCreateTimerTask+0x90>)
 800820c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800820e:	4b10      	ldr	r3, [pc, #64]	@ (8008250 <xTimerCreateTimerTask+0x90>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008216:	2301      	movs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10b      	bne.n	8008238 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	613b      	str	r3, [r7, #16]
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20001068 	.word	0x20001068
 8008248:	0800bf00 	.word	0x0800bf00
 800824c:	0800838d 	.word	0x0800838d
 8008250:	2000106c 	.word	0x2000106c

08008254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	@ 0x28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008262:	2300      	movs	r3, #0
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10b      	bne.n	8008284 <xTimerGenericCommand+0x30>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	623b      	str	r3, [r7, #32]
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	e7fd      	b.n	8008280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008284:	4b19      	ldr	r3, [pc, #100]	@ (80082ec <xTimerGenericCommand+0x98>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d02a      	beq.n	80082e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b05      	cmp	r3, #5
 800829c:	dc18      	bgt.n	80082d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800829e:	f7ff fead 	bl	8007ffc <xTaskGetSchedulerState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d109      	bne.n	80082bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082a8:	4b10      	ldr	r3, [pc, #64]	@ (80082ec <xTimerGenericCommand+0x98>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	f107 0110 	add.w	r1, r7, #16
 80082b0:	2300      	movs	r3, #0
 80082b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b4:	f7fe fbd8 	bl	8006a68 <xQueueGenericSend>
 80082b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80082ba:	e012      	b.n	80082e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <xTimerGenericCommand+0x98>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	f107 0110 	add.w	r1, r7, #16
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	f7fe fbce 	bl	8006a68 <xQueueGenericSend>
 80082cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80082ce:	e008      	b.n	80082e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082d0:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <xTimerGenericCommand+0x98>)
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	f107 0110 	add.w	r1, r7, #16
 80082d8:	2300      	movs	r3, #0
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	f7fe fcc6 	bl	8006c6c <xQueueGenericSendFromISR>
 80082e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20001068 	.word	0x20001068

080082f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fa:	4b23      	ldr	r3, [pc, #140]	@ (8008388 <prvProcessExpiredTimer+0x98>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	3304      	adds	r3, #4
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fa3d 	bl	8006788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d023      	beq.n	8008364 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	18d1      	adds	r1, r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f000 f8d5 	bl	80084d8 <prvInsertTimerInActiveList>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d020      	beq.n	8008376 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008334:	2300      	movs	r3, #0
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	2100      	movs	r1, #0
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f7ff ff88 	bl	8008254 <xTimerGenericCommand>
 8008344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d114      	bne.n	8008376 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60fb      	str	r3, [r7, #12]
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	4798      	blx	r3
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001060 	.word	0x20001060

0800838c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f859 	bl	8008450 <prvGetNextExpireTime>
 800839e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4619      	mov	r1, r3
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f805 	bl	80083b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083aa:	f000 f8d7 	bl	800855c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083ae:	bf00      	nop
 80083b0:	e7f0      	b.n	8008394 <prvTimerTask+0x8>
	...

080083b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083be:	f7ff fa29 	bl	8007814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083c2:	f107 0308 	add.w	r3, r7, #8
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f866 	bl	8008498 <prvSampleTimeNow>
 80083cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d130      	bne.n	8008436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <prvProcessTimerOrBlockTask+0x3c>
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d806      	bhi.n	80083f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083e2:	f7ff fa25 	bl	8007830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff81 	bl	80082f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083ee:	e024      	b.n	800843a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083f6:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <prvProcessTimerOrBlockTask+0x90>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <prvProcessTimerOrBlockTask+0x50>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <prvProcessTimerOrBlockTask+0x52>
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008408:	4b0f      	ldr	r3, [pc, #60]	@ (8008448 <prvProcessTimerOrBlockTask+0x94>)
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	f7fe ff65 	bl	80072e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800841a:	f7ff fa09 	bl	8007830 <xTaskResumeAll>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008424:	4b09      	ldr	r3, [pc, #36]	@ (800844c <prvProcessTimerOrBlockTask+0x98>)
 8008426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	f3bf 8f6f 	isb	sy
}
 8008434:	e001      	b.n	800843a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008436:	f7ff f9fb 	bl	8007830 <xTaskResumeAll>
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20001064 	.word	0x20001064
 8008448:	20001068 	.word	0x20001068
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <prvGetNextExpireTime+0x44>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <prvGetNextExpireTime+0x16>
 8008462:	2201      	movs	r2, #1
 8008464:	e000      	b.n	8008468 <prvGetNextExpireTime+0x18>
 8008466:	2200      	movs	r2, #0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008474:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <prvGetNextExpireTime+0x44>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e001      	b.n	8008484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008484:	68fb      	ldr	r3, [r7, #12]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20001060 	.word	0x20001060

08008498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084a0:	f7ff fa64 	bl	800796c <xTaskGetTickCount>
 80084a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084a6:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <prvSampleTimeNow+0x3c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d205      	bcs.n	80084bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084b0:	f000 f93a 	bl	8008728 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084c2:	4a04      	ldr	r2, [pc, #16]	@ (80084d4 <prvSampleTimeNow+0x3c>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084c8:	68fb      	ldr	r3, [r7, #12]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20001070 	.word	0x20001070

080084d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d812      	bhi.n	8008524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	429a      	cmp	r2, r3
 800850a:	d302      	bcc.n	8008512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e01b      	b.n	800854a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008512:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <prvInsertTimerInActiveList+0x7c>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3304      	adds	r3, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4610      	mov	r0, r2
 800851e:	f7fe f8fa 	bl	8006716 <vListInsert>
 8008522:	e012      	b.n	800854a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d206      	bcs.n	800853a <prvInsertTimerInActiveList+0x62>
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d302      	bcc.n	800853a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e007      	b.n	800854a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800853a:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <prvInsertTimerInActiveList+0x80>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3304      	adds	r3, #4
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f7fe f8e6 	bl	8006716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20001064 	.word	0x20001064
 8008558:	20001060 	.word	0x20001060

0800855c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08e      	sub	sp, #56	@ 0x38
 8008560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008562:	e0ce      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da19      	bge.n	800859e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	3304      	adds	r3, #4
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10b      	bne.n	800858e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	61fb      	str	r3, [r7, #28]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800858e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008594:	6850      	ldr	r0, [r2, #4]
 8008596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	4611      	mov	r1, r2
 800859c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f2c0 80ae 	blt.w	8008702 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe f8e6 	bl	8006788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085bc:	463b      	mov	r3, r7
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff ff6a 	bl	8008498 <prvSampleTimeNow>
 80085c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b09      	cmp	r3, #9
 80085ca:	f200 8097 	bhi.w	80086fc <prvProcessReceivedCommands+0x1a0>
 80085ce:	a201      	add	r2, pc, #4	@ (adr r2, 80085d4 <prvProcessReceivedCommands+0x78>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	080085fd 	.word	0x080085fd
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	080085fd 	.word	0x080085fd
 80085e0:	08008673 	.word	0x08008673
 80085e4:	08008687 	.word	0x08008687
 80085e8:	080086d3 	.word	0x080086d3
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	080085fd 	.word	0x080085fd
 80085f4:	08008673 	.word	0x08008673
 80085f8:	08008687 	.word	0x08008687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	b2da      	uxtb	r2, r3
 8008608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	18d1      	adds	r1, r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800861c:	f7ff ff5c 	bl	80084d8 <prvInsertTimerInActiveList>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d06c      	beq.n	8008700 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800862c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d061      	beq.n	8008700 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	441a      	add	r2, r3
 8008644:	2300      	movs	r3, #0
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2300      	movs	r3, #0
 800864a:	2100      	movs	r1, #0
 800864c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800864e:	f7ff fe01 	bl	8008254 <xTimerGenericCommand>
 8008652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d152      	bne.n	8008700 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	61bb      	str	r3, [r7, #24]
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	b2da      	uxtb	r2, r3
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008684:	e03d      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800868c:	f043 0301 	orr.w	r3, r3, #1
 8008690:	b2da      	uxtb	r2, r3
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10b      	bne.n	80086be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	617b      	str	r3, [r7, #20]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	18d1      	adds	r1, r2, r3
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086cc:	f7ff ff04 	bl	80084d8 <prvInsertTimerInActiveList>
					break;
 80086d0:	e017      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d103      	bne.n	80086e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80086e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e2:	f000 fbe9 	bl	8008eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086e6:	e00c      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ee:	f023 0301 	bic.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086fa:	e002      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <prvProcessReceivedCommands+0x1a6>
					break;
 8008700:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008702:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <prvProcessReceivedCommands+0x1c8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	1d39      	adds	r1, r7, #4
 8008708:	2200      	movs	r2, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fb4c 	bl	8006da8 <xQueueReceive>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	f47f af26 	bne.w	8008564 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	3730      	adds	r7, #48	@ 0x30
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20001068 	.word	0x20001068

08008728 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800872e:	e049      	b.n	80087c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008730:	4b2e      	ldr	r3, [pc, #184]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873a:	4b2c      	ldr	r3, [pc, #176]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3304      	adds	r3, #4
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe f81d 	bl	8006788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d02f      	beq.n	80087c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	d90e      	bls.n	8008794 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008782:	4b1a      	ldr	r3, [pc, #104]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3304      	adds	r3, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fd ffc2 	bl	8006716 <vListInsert>
 8008792:	e017      	b.n	80087c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008794:	2300      	movs	r3, #0
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	2300      	movs	r3, #0
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff fd58 	bl	8008254 <xTimerGenericCommand>
 80087a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	603b      	str	r3, [r7, #0]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c4:	4b09      	ldr	r3, [pc, #36]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1b0      	bne.n	8008730 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087ce:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087d4:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <prvSwitchTimerLists+0xc8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a04      	ldr	r2, [pc, #16]	@ (80087ec <prvSwitchTimerLists+0xc4>)
 80087da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087dc:	4a04      	ldr	r2, [pc, #16]	@ (80087f0 <prvSwitchTimerLists+0xc8>)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	6013      	str	r3, [r2, #0]
}
 80087e2:	bf00      	nop
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20001060 	.word	0x20001060
 80087f0:	20001064 	.word	0x20001064

080087f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087fa:	f000 f96d 	bl	8008ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d120      	bne.n	8008848 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008806:	4814      	ldr	r0, [pc, #80]	@ (8008858 <prvCheckForValidListAndQueue+0x64>)
 8008808:	f7fd ff34 	bl	8006674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800880c:	4813      	ldr	r0, [pc, #76]	@ (800885c <prvCheckForValidListAndQueue+0x68>)
 800880e:	f7fd ff31 	bl	8006674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008812:	4b13      	ldr	r3, [pc, #76]	@ (8008860 <prvCheckForValidListAndQueue+0x6c>)
 8008814:	4a10      	ldr	r2, [pc, #64]	@ (8008858 <prvCheckForValidListAndQueue+0x64>)
 8008816:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008818:	4b12      	ldr	r3, [pc, #72]	@ (8008864 <prvCheckForValidListAndQueue+0x70>)
 800881a:	4a10      	ldr	r2, [pc, #64]	@ (800885c <prvCheckForValidListAndQueue+0x68>)
 800881c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800881e:	2300      	movs	r3, #0
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4b11      	ldr	r3, [pc, #68]	@ (8008868 <prvCheckForValidListAndQueue+0x74>)
 8008824:	4a11      	ldr	r2, [pc, #68]	@ (800886c <prvCheckForValidListAndQueue+0x78>)
 8008826:	2110      	movs	r1, #16
 8008828:	200a      	movs	r0, #10
 800882a:	f7fe f841 	bl	80068b0 <xQueueGenericCreateStatic>
 800882e:	4603      	mov	r3, r0
 8008830:	4a08      	ldr	r2, [pc, #32]	@ (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008832:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008834:	4b07      	ldr	r3, [pc, #28]	@ (8008854 <prvCheckForValidListAndQueue+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800883c:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <prvCheckForValidListAndQueue+0x60>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	490b      	ldr	r1, [pc, #44]	@ (8008870 <prvCheckForValidListAndQueue+0x7c>)
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fd24 	bl	8007290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008848:	f000 f978 	bl	8008b3c <vPortExitCritical>
}
 800884c:	bf00      	nop
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20001068 	.word	0x20001068
 8008858:	20001038 	.word	0x20001038
 800885c:	2000104c 	.word	0x2000104c
 8008860:	20001060 	.word	0x20001060
 8008864:	20001064 	.word	0x20001064
 8008868:	20001114 	.word	0x20001114
 800886c:	20001074 	.word	0x20001074
 8008870:	0800bf08 	.word	0x0800bf08

08008874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3b04      	subs	r3, #4
 8008884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800888c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3b04      	subs	r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a4:	4a0c      	ldr	r2, [pc, #48]	@ (80088d8 <pxPortInitialiseStack+0x64>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3b14      	subs	r3, #20
 80088ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3b04      	subs	r3, #4
 80088ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f06f 0202 	mvn.w	r2, #2
 80088c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3b20      	subs	r3, #32
 80088c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	080088dd 	.word	0x080088dd

080088dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e6:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <prvTaskExitError+0x58>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d00b      	beq.n	8008908 <prvTaskExitError+0x2c>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <prvTaskExitError+0x28>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	60bb      	str	r3, [r7, #8]
}
 800891a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800891c:	bf00      	nop
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0fc      	beq.n	800891e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	2000000c 	.word	0x2000000c
	...

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	@ (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008996:	4b47      	ldr	r3, [pc, #284]	@ (8008ab4 <xPortStartScheduler+0x124>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a47      	ldr	r2, [pc, #284]	@ (8008ab8 <xPortStartScheduler+0x128>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10b      	bne.n	80089b8 <xPortStartScheduler+0x28>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60fb      	str	r3, [r7, #12]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089b8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ab4 <xPortStartScheduler+0x124>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a3f      	ldr	r2, [pc, #252]	@ (8008abc <xPortStartScheduler+0x12c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d10b      	bne.n	80089da <xPortStartScheduler+0x4a>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	613b      	str	r3, [r7, #16]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089da:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <xPortStartScheduler+0x130>)
 80089dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	22ff      	movs	r2, #255	@ 0xff
 80089ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <xPortStartScheduler+0x134>)
 8008a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a02:	4b31      	ldr	r3, [pc, #196]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a04:	2207      	movs	r2, #7
 8008a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a08:	e009      	b.n	8008a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a26:	2b80      	cmp	r3, #128	@ 0x80
 8008a28:	d0ef      	beq.n	8008a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a2a:	4b27      	ldr	r3, [pc, #156]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1c3 0307 	rsb	r3, r3, #7
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d00b      	beq.n	8008a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a60:	4a19      	ldr	r2, [pc, #100]	@ (8008ac8 <xPortStartScheduler+0x138>)
 8008a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a6c:	4b17      	ldr	r3, [pc, #92]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a78:	4b14      	ldr	r3, [pc, #80]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <xPortStartScheduler+0x13c>)
 8008a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a84:	f000 f8da 	bl	8008c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a88:	4b11      	ldr	r3, [pc, #68]	@ (8008ad0 <xPortStartScheduler+0x140>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a8e:	f000 f8f9 	bl	8008c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a0f      	ldr	r2, [pc, #60]	@ (8008ad4 <xPortStartScheduler+0x144>)
 8008a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a9e:	f7ff ff63 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008aa2:	f7ff f82d 	bl	8007b00 <vTaskSwitchContext>
	prvTaskExitError();
 8008aa6:	f7ff ff19 	bl	80088dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	e000ed00 	.word	0xe000ed00
 8008ab8:	410fc271 	.word	0x410fc271
 8008abc:	410fc270 	.word	0x410fc270
 8008ac0:	e000e400 	.word	0xe000e400
 8008ac4:	20001164 	.word	0x20001164
 8008ac8:	20001168 	.word	0x20001168
 8008acc:	e000ed20 	.word	0xe000ed20
 8008ad0:	2000000c 	.word	0x2000000c
 8008ad4:	e000ef34 	.word	0xe000ef34

08008ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008af2:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <vPortEnterCritical+0x5c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d110      	bne.n	8008b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <vPortEnterCritical+0x60>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	603b      	str	r3, [r7, #0]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <vPortEnterCritical+0x4a>
	}
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	2000000c 	.word	0x2000000c
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b42:	4b12      	ldr	r3, [pc, #72]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <vPortExitCritical+0x26>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	607b      	str	r3, [r7, #4]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4a08      	ldr	r2, [pc, #32]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <vPortExitCritical+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <vPortExitCritical+0x44>
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	2000000c 	.word	0x2000000c

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b15      	ldr	r3, [pc, #84]	@ (8008bf0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f01e 0f10 	tst.w	lr, #16
 8008ba0:	bf08      	it	eq
 8008ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	6010      	str	r0, [r2, #0]
 8008bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bb4:	f380 8811 	msr	BASEPRI, r0
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f7fe ff9e 	bl	8007b00 <vTaskSwitchContext>
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f380 8811 	msr	BASEPRI, r0
 8008bcc:	bc09      	pop	{r0, r3}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	f01e 0f10 	tst.w	lr, #16
 8008bda:	bf08      	it	eq
 8008bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008be0:	f380 8809 	msr	PSP, r0
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f7fe febb 	bl	800798c <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <xPortSysTickHandler+0x40>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c46:	4b0b      	ldr	r3, [pc, #44]	@ (8008c74 <vPortSetupTimerInterrupt+0x38>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0a      	ldr	r2, [pc, #40]	@ (8008c7c <vPortSetupTimerInterrupt+0x40>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	4a09      	ldr	r2, [pc, #36]	@ (8008c80 <vPortSetupTimerInterrupt+0x44>)
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5e:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e010 	.word	0xe000e010
 8008c74:	e000e018 	.word	0xe000e018
 8008c78:	20000000 	.word	0x20000000
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	e000e014 	.word	0xe000e014

08008c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c94 <vPortEnableVFP+0x10>
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c8e:	6001      	str	r1, [r0, #0]
 8008c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed88 	.word	0xe000ed88

08008c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c9e:	f3ef 8305 	mrs	r3, IPSR
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d915      	bls.n	8008cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008caa:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <vPortValidateInterruptPriority+0x74>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cb4:	4b16      	ldr	r3, [pc, #88]	@ (8008d10 <vPortValidateInterruptPriority+0x78>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	7afa      	ldrb	r2, [r7, #11]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d20b      	bcs.n	8008cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d14 <vPortValidateInterruptPriority+0x7c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <vPortValidateInterruptPriority+0x80>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d90b      	bls.n	8008cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	603b      	str	r3, [r7, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	e7fd      	b.n	8008cfa <vPortValidateInterruptPriority+0x62>
	}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	e000e3f0 	.word	0xe000e3f0
 8008d10:	20001164 	.word	0x20001164
 8008d14:	e000ed0c 	.word	0xe000ed0c
 8008d18:	20001168 	.word	0x20001168

08008d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	@ 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d28:	f7fe fd74 	bl	8007814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea0 <pvPortMalloc+0x184>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d34:	f000 f924 	bl	8008f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d38:	4b5a      	ldr	r3, [pc, #360]	@ (8008ea4 <pvPortMalloc+0x188>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 8095 	bne.w	8008e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01e      	beq.n	8008d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d015      	beq.n	8008d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	3308      	adds	r3, #8
 8008d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <pvPortMalloc+0x6e>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	e7fd      	b.n	8008d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d06f      	beq.n	8008e70 <pvPortMalloc+0x154>
 8008d90:	4b45      	ldr	r3, [pc, #276]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d86a      	bhi.n	8008e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d9a:	4b44      	ldr	r3, [pc, #272]	@ (8008eac <pvPortMalloc+0x190>)
 8008d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d9e:	4b43      	ldr	r3, [pc, #268]	@ (8008eac <pvPortMalloc+0x190>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008da4:	e004      	b.n	8008db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d903      	bls.n	8008dc2 <pvPortMalloc+0xa6>
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f1      	bne.n	8008da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dc2:	4b37      	ldr	r3, [pc, #220]	@ (8008ea0 <pvPortMalloc+0x184>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d051      	beq.n	8008e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	4413      	add	r3, r2
 8008dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	2308      	movs	r3, #8
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d920      	bls.n	8008e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <pvPortMalloc+0xfc>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	613b      	str	r3, [r7, #16]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e2a:	69b8      	ldr	r0, [r7, #24]
 8008e2c:	f000 f90a 	bl	8009044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e30:	4b1d      	ldr	r3, [pc, #116]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb0 <pvPortMalloc+0x194>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d203      	bcs.n	8008e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e4a:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <pvPortMalloc+0x18c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a18      	ldr	r2, [pc, #96]	@ (8008eb0 <pvPortMalloc+0x194>)
 8008e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4b13      	ldr	r3, [pc, #76]	@ (8008ea4 <pvPortMalloc+0x188>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e66:	4b13      	ldr	r3, [pc, #76]	@ (8008eb4 <pvPortMalloc+0x198>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	4a11      	ldr	r2, [pc, #68]	@ (8008eb4 <pvPortMalloc+0x198>)
 8008e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e70:	f7fe fcde 	bl	8007830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <pvPortMalloc+0x17a>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60fb      	str	r3, [r7, #12]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <pvPortMalloc+0x176>
	return pvReturn;
 8008e96:	69fb      	ldr	r3, [r7, #28]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3728      	adds	r7, #40	@ 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20004d74 	.word	0x20004d74
 8008ea4:	20004d88 	.word	0x20004d88
 8008ea8:	20004d78 	.word	0x20004d78
 8008eac:	20004d6c 	.word	0x20004d6c
 8008eb0:	20004d7c 	.word	0x20004d7c
 8008eb4:	20004d80 	.word	0x20004d80

08008eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d04f      	beq.n	8008f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	425b      	negs	r3, r3
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4b25      	ldr	r3, [pc, #148]	@ (8008f74 <vPortFree+0xbc>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <vPortFree+0x46>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	60fb      	str	r3, [r7, #12]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <vPortFree+0x66>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	4b14      	ldr	r3, [pc, #80]	@ (8008f74 <vPortFree+0xbc>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4013      	ands	r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11a      	bne.n	8008f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	4b0e      	ldr	r3, [pc, #56]	@ (8008f74 <vPortFree+0xbc>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	401a      	ands	r2, r3
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f44:	f7fe fc66 	bl	8007814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f78 <vPortFree+0xc0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4413      	add	r3, r2
 8008f52:	4a09      	ldr	r2, [pc, #36]	@ (8008f78 <vPortFree+0xc0>)
 8008f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f56:	6938      	ldr	r0, [r7, #16]
 8008f58:	f000 f874 	bl	8009044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <vPortFree+0xc4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	4a06      	ldr	r2, [pc, #24]	@ (8008f7c <vPortFree+0xc4>)
 8008f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f66:	f7fe fc63 	bl	8007830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f6a:	bf00      	nop
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20004d88 	.word	0x20004d88
 8008f78:	20004d78 	.word	0x20004d78
 8008f7c:	20004d84 	.word	0x20004d84

08008f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f8c:	4b27      	ldr	r3, [pc, #156]	@ (800902c <prvHeapInit+0xac>)
 8008f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	4a1f      	ldr	r2, [pc, #124]	@ (800902c <prvHeapInit+0xac>)
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009030 <prvHeapInit+0xb0>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8009030 <prvHeapInit+0xb0>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fcc:	2208      	movs	r2, #8
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a15      	ldr	r2, [pc, #84]	@ (8009034 <prvHeapInit+0xb4>)
 8008fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <prvHeapInit+0xb4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fea:	4b12      	ldr	r3, [pc, #72]	@ (8009034 <prvHeapInit+0xb4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009000:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <prvHeapInit+0xb4>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4a0a      	ldr	r2, [pc, #40]	@ (8009038 <prvHeapInit+0xb8>)
 800900e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4a09      	ldr	r2, [pc, #36]	@ (800903c <prvHeapInit+0xbc>)
 8009016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009018:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <prvHeapInit+0xc0>)
 800901a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	2000116c 	.word	0x2000116c
 8009030:	20004d6c 	.word	0x20004d6c
 8009034:	20004d74 	.word	0x20004d74
 8009038:	20004d7c 	.word	0x20004d7c
 800903c:	20004d78 	.word	0x20004d78
 8009040:	20004d88 	.word	0x20004d88

08009044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800904c:	4b28      	ldr	r3, [pc, #160]	@ (80090f0 <prvInsertBlockIntoFreeList+0xac>)
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e002      	b.n	8009058 <prvInsertBlockIntoFreeList+0x14>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d8f7      	bhi.n	8009052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d108      	bne.n	8009086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d118      	bne.n	80090cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b15      	ldr	r3, [pc, #84]	@ (80090f4 <prvInsertBlockIntoFreeList+0xb0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d00d      	beq.n	80090c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	441a      	add	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e008      	b.n	80090d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvInsertBlockIntoFreeList+0xb0>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e003      	b.n	80090d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d002      	beq.n	80090e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20004d6c 	.word	0x20004d6c
 80090f4:	20004d74 	.word	0x20004d74

080090f8 <__cvt>:
 80090f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	ec57 6b10 	vmov	r6, r7, d0
 8009100:	2f00      	cmp	r7, #0
 8009102:	460c      	mov	r4, r1
 8009104:	4619      	mov	r1, r3
 8009106:	463b      	mov	r3, r7
 8009108:	bfbb      	ittet	lt
 800910a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800910e:	461f      	movlt	r7, r3
 8009110:	2300      	movge	r3, #0
 8009112:	232d      	movlt	r3, #45	@ 0x2d
 8009114:	700b      	strb	r3, [r1, #0]
 8009116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009118:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800911c:	4691      	mov	r9, r2
 800911e:	f023 0820 	bic.w	r8, r3, #32
 8009122:	bfbc      	itt	lt
 8009124:	4632      	movlt	r2, r6
 8009126:	4616      	movlt	r6, r2
 8009128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800912c:	d005      	beq.n	800913a <__cvt+0x42>
 800912e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009132:	d100      	bne.n	8009136 <__cvt+0x3e>
 8009134:	3401      	adds	r4, #1
 8009136:	2102      	movs	r1, #2
 8009138:	e000      	b.n	800913c <__cvt+0x44>
 800913a:	2103      	movs	r1, #3
 800913c:	ab03      	add	r3, sp, #12
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	ab02      	add	r3, sp, #8
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	ec47 6b10 	vmov	d0, r6, r7
 8009148:	4653      	mov	r3, sl
 800914a:	4622      	mov	r2, r4
 800914c:	f000 fec8 	bl	8009ee0 <_dtoa_r>
 8009150:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009154:	4605      	mov	r5, r0
 8009156:	d119      	bne.n	800918c <__cvt+0x94>
 8009158:	f019 0f01 	tst.w	r9, #1
 800915c:	d00e      	beq.n	800917c <__cvt+0x84>
 800915e:	eb00 0904 	add.w	r9, r0, r4
 8009162:	2200      	movs	r2, #0
 8009164:	2300      	movs	r3, #0
 8009166:	4630      	mov	r0, r6
 8009168:	4639      	mov	r1, r7
 800916a:	f7f7 fccd 	bl	8000b08 <__aeabi_dcmpeq>
 800916e:	b108      	cbz	r0, 8009174 <__cvt+0x7c>
 8009170:	f8cd 900c 	str.w	r9, [sp, #12]
 8009174:	2230      	movs	r2, #48	@ 0x30
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	454b      	cmp	r3, r9
 800917a:	d31e      	bcc.n	80091ba <__cvt+0xc2>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009180:	1b5b      	subs	r3, r3, r5
 8009182:	4628      	mov	r0, r5
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	b004      	add	sp, #16
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009190:	eb00 0904 	add.w	r9, r0, r4
 8009194:	d1e5      	bne.n	8009162 <__cvt+0x6a>
 8009196:	7803      	ldrb	r3, [r0, #0]
 8009198:	2b30      	cmp	r3, #48	@ 0x30
 800919a:	d10a      	bne.n	80091b2 <__cvt+0xba>
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 fcb0 	bl	8000b08 <__aeabi_dcmpeq>
 80091a8:	b918      	cbnz	r0, 80091b2 <__cvt+0xba>
 80091aa:	f1c4 0401 	rsb	r4, r4, #1
 80091ae:	f8ca 4000 	str.w	r4, [sl]
 80091b2:	f8da 3000 	ldr.w	r3, [sl]
 80091b6:	4499      	add	r9, r3
 80091b8:	e7d3      	b.n	8009162 <__cvt+0x6a>
 80091ba:	1c59      	adds	r1, r3, #1
 80091bc:	9103      	str	r1, [sp, #12]
 80091be:	701a      	strb	r2, [r3, #0]
 80091c0:	e7d9      	b.n	8009176 <__cvt+0x7e>

080091c2 <__exponent>:
 80091c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c4:	2900      	cmp	r1, #0
 80091c6:	bfba      	itte	lt
 80091c8:	4249      	neglt	r1, r1
 80091ca:	232d      	movlt	r3, #45	@ 0x2d
 80091cc:	232b      	movge	r3, #43	@ 0x2b
 80091ce:	2909      	cmp	r1, #9
 80091d0:	7002      	strb	r2, [r0, #0]
 80091d2:	7043      	strb	r3, [r0, #1]
 80091d4:	dd29      	ble.n	800922a <__exponent+0x68>
 80091d6:	f10d 0307 	add.w	r3, sp, #7
 80091da:	461d      	mov	r5, r3
 80091dc:	270a      	movs	r7, #10
 80091de:	461a      	mov	r2, r3
 80091e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80091e4:	fb07 1416 	mls	r4, r7, r6, r1
 80091e8:	3430      	adds	r4, #48	@ 0x30
 80091ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091ee:	460c      	mov	r4, r1
 80091f0:	2c63      	cmp	r4, #99	@ 0x63
 80091f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80091f6:	4631      	mov	r1, r6
 80091f8:	dcf1      	bgt.n	80091de <__exponent+0x1c>
 80091fa:	3130      	adds	r1, #48	@ 0x30
 80091fc:	1e94      	subs	r4, r2, #2
 80091fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009202:	1c41      	adds	r1, r0, #1
 8009204:	4623      	mov	r3, r4
 8009206:	42ab      	cmp	r3, r5
 8009208:	d30a      	bcc.n	8009220 <__exponent+0x5e>
 800920a:	f10d 0309 	add.w	r3, sp, #9
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	42ac      	cmp	r4, r5
 8009212:	bf88      	it	hi
 8009214:	2300      	movhi	r3, #0
 8009216:	3302      	adds	r3, #2
 8009218:	4403      	add	r3, r0
 800921a:	1a18      	subs	r0, r3, r0
 800921c:	b003      	add	sp, #12
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009224:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009228:	e7ed      	b.n	8009206 <__exponent+0x44>
 800922a:	2330      	movs	r3, #48	@ 0x30
 800922c:	3130      	adds	r1, #48	@ 0x30
 800922e:	7083      	strb	r3, [r0, #2]
 8009230:	70c1      	strb	r1, [r0, #3]
 8009232:	1d03      	adds	r3, r0, #4
 8009234:	e7f1      	b.n	800921a <__exponent+0x58>
	...

08009238 <_printf_float>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b08d      	sub	sp, #52	@ 0x34
 800923e:	460c      	mov	r4, r1
 8009240:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009244:	4616      	mov	r6, r2
 8009246:	461f      	mov	r7, r3
 8009248:	4605      	mov	r5, r0
 800924a:	f000 fcdb 	bl	8009c04 <_localeconv_r>
 800924e:	6803      	ldr	r3, [r0, #0]
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	4618      	mov	r0, r3
 8009254:	f7f7 f82c 	bl	80002b0 <strlen>
 8009258:	2300      	movs	r3, #0
 800925a:	930a      	str	r3, [sp, #40]	@ 0x28
 800925c:	f8d8 3000 	ldr.w	r3, [r8]
 8009260:	9005      	str	r0, [sp, #20]
 8009262:	3307      	adds	r3, #7
 8009264:	f023 0307 	bic.w	r3, r3, #7
 8009268:	f103 0208 	add.w	r2, r3, #8
 800926c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009270:	f8d4 b000 	ldr.w	fp, [r4]
 8009274:	f8c8 2000 	str.w	r2, [r8]
 8009278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800927c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	f8cd 8018 	str.w	r8, [sp, #24]
 8009286:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800928a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800928e:	4b9c      	ldr	r3, [pc, #624]	@ (8009500 <_printf_float+0x2c8>)
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	f7f7 fc6a 	bl	8000b6c <__aeabi_dcmpun>
 8009298:	bb70      	cbnz	r0, 80092f8 <_printf_float+0xc0>
 800929a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800929e:	4b98      	ldr	r3, [pc, #608]	@ (8009500 <_printf_float+0x2c8>)
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	f7f7 fc44 	bl	8000b30 <__aeabi_dcmple>
 80092a8:	bb30      	cbnz	r0, 80092f8 <_printf_float+0xc0>
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	4640      	mov	r0, r8
 80092b0:	4649      	mov	r1, r9
 80092b2:	f7f7 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80092b6:	b110      	cbz	r0, 80092be <_printf_float+0x86>
 80092b8:	232d      	movs	r3, #45	@ 0x2d
 80092ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092be:	4a91      	ldr	r2, [pc, #580]	@ (8009504 <_printf_float+0x2cc>)
 80092c0:	4b91      	ldr	r3, [pc, #580]	@ (8009508 <_printf_float+0x2d0>)
 80092c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092c6:	bf8c      	ite	hi
 80092c8:	4690      	movhi	r8, r2
 80092ca:	4698      	movls	r8, r3
 80092cc:	2303      	movs	r3, #3
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	f02b 0304 	bic.w	r3, fp, #4
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	f04f 0900 	mov.w	r9, #0
 80092da:	9700      	str	r7, [sp, #0]
 80092dc:	4633      	mov	r3, r6
 80092de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 f9d2 	bl	800968c <_printf_common>
 80092e8:	3001      	adds	r0, #1
 80092ea:	f040 808d 	bne.w	8009408 <_printf_float+0x1d0>
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
 80092f2:	b00d      	add	sp, #52	@ 0x34
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	4642      	mov	r2, r8
 80092fa:	464b      	mov	r3, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 fc34 	bl	8000b6c <__aeabi_dcmpun>
 8009304:	b140      	cbz	r0, 8009318 <_printf_float+0xe0>
 8009306:	464b      	mov	r3, r9
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbc      	itt	lt
 800930c:	232d      	movlt	r3, #45	@ 0x2d
 800930e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009312:	4a7e      	ldr	r2, [pc, #504]	@ (800950c <_printf_float+0x2d4>)
 8009314:	4b7e      	ldr	r3, [pc, #504]	@ (8009510 <_printf_float+0x2d8>)
 8009316:	e7d4      	b.n	80092c2 <_printf_float+0x8a>
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800931e:	9206      	str	r2, [sp, #24]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	d13b      	bne.n	800939c <_printf_float+0x164>
 8009324:	2306      	movs	r3, #6
 8009326:	6063      	str	r3, [r4, #4]
 8009328:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800932c:	2300      	movs	r3, #0
 800932e:	6022      	str	r2, [r4, #0]
 8009330:	9303      	str	r3, [sp, #12]
 8009332:	ab0a      	add	r3, sp, #40	@ 0x28
 8009334:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009338:	ab09      	add	r3, sp, #36	@ 0x24
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	ec49 8b10 	vmov	d0, r8, r9
 8009342:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff fed6 	bl	80090f8 <__cvt>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009350:	2b47      	cmp	r3, #71	@ 0x47
 8009352:	4680      	mov	r8, r0
 8009354:	d129      	bne.n	80093aa <_printf_float+0x172>
 8009356:	1cc8      	adds	r0, r1, #3
 8009358:	db02      	blt.n	8009360 <_printf_float+0x128>
 800935a:	6863      	ldr	r3, [r4, #4]
 800935c:	4299      	cmp	r1, r3
 800935e:	dd41      	ble.n	80093e4 <_printf_float+0x1ac>
 8009360:	f1aa 0a02 	sub.w	sl, sl, #2
 8009364:	fa5f fa8a 	uxtb.w	sl, sl
 8009368:	3901      	subs	r1, #1
 800936a:	4652      	mov	r2, sl
 800936c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009370:	9109      	str	r1, [sp, #36]	@ 0x24
 8009372:	f7ff ff26 	bl	80091c2 <__exponent>
 8009376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009378:	1813      	adds	r3, r2, r0
 800937a:	2a01      	cmp	r2, #1
 800937c:	4681      	mov	r9, r0
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	dc02      	bgt.n	8009388 <_printf_float+0x150>
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	07d2      	lsls	r2, r2, #31
 8009386:	d501      	bpl.n	800938c <_printf_float+0x154>
 8009388:	3301      	adds	r3, #1
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0a2      	beq.n	80092da <_printf_float+0xa2>
 8009394:	232d      	movs	r3, #45	@ 0x2d
 8009396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800939a:	e79e      	b.n	80092da <_printf_float+0xa2>
 800939c:	9a06      	ldr	r2, [sp, #24]
 800939e:	2a47      	cmp	r2, #71	@ 0x47
 80093a0:	d1c2      	bne.n	8009328 <_printf_float+0xf0>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1c0      	bne.n	8009328 <_printf_float+0xf0>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7bd      	b.n	8009326 <_printf_float+0xee>
 80093aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093ae:	d9db      	bls.n	8009368 <_printf_float+0x130>
 80093b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093b4:	d118      	bne.n	80093e8 <_printf_float+0x1b0>
 80093b6:	2900      	cmp	r1, #0
 80093b8:	6863      	ldr	r3, [r4, #4]
 80093ba:	dd0b      	ble.n	80093d4 <_printf_float+0x19c>
 80093bc:	6121      	str	r1, [r4, #16]
 80093be:	b913      	cbnz	r3, 80093c6 <_printf_float+0x18e>
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	07d0      	lsls	r0, r2, #31
 80093c4:	d502      	bpl.n	80093cc <_printf_float+0x194>
 80093c6:	3301      	adds	r3, #1
 80093c8:	440b      	add	r3, r1
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	e7db      	b.n	800938c <_printf_float+0x154>
 80093d4:	b913      	cbnz	r3, 80093dc <_printf_float+0x1a4>
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	07d2      	lsls	r2, r2, #31
 80093da:	d501      	bpl.n	80093e0 <_printf_float+0x1a8>
 80093dc:	3302      	adds	r3, #2
 80093de:	e7f4      	b.n	80093ca <_printf_float+0x192>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e7f2      	b.n	80093ca <_printf_float+0x192>
 80093e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ea:	4299      	cmp	r1, r3
 80093ec:	db05      	blt.n	80093fa <_printf_float+0x1c2>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6121      	str	r1, [r4, #16]
 80093f2:	07d8      	lsls	r0, r3, #31
 80093f4:	d5ea      	bpl.n	80093cc <_printf_float+0x194>
 80093f6:	1c4b      	adds	r3, r1, #1
 80093f8:	e7e7      	b.n	80093ca <_printf_float+0x192>
 80093fa:	2900      	cmp	r1, #0
 80093fc:	bfd4      	ite	le
 80093fe:	f1c1 0202 	rsble	r2, r1, #2
 8009402:	2201      	movgt	r2, #1
 8009404:	4413      	add	r3, r2
 8009406:	e7e0      	b.n	80093ca <_printf_float+0x192>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	055a      	lsls	r2, r3, #21
 800940c:	d407      	bmi.n	800941e <_printf_float+0x1e6>
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	4642      	mov	r2, r8
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	d12b      	bne.n	8009474 <_printf_float+0x23c>
 800941c:	e767      	b.n	80092ee <_printf_float+0xb6>
 800941e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009422:	f240 80dd 	bls.w	80095e0 <_printf_float+0x3a8>
 8009426:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	f7f7 fb6b 	bl	8000b08 <__aeabi_dcmpeq>
 8009432:	2800      	cmp	r0, #0
 8009434:	d033      	beq.n	800949e <_printf_float+0x266>
 8009436:	4a37      	ldr	r2, [pc, #220]	@ (8009514 <_printf_float+0x2dc>)
 8009438:	2301      	movs	r3, #1
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f af54 	beq.w	80092ee <_printf_float+0xb6>
 8009446:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800944a:	4543      	cmp	r3, r8
 800944c:	db02      	blt.n	8009454 <_printf_float+0x21c>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	07d8      	lsls	r0, r3, #31
 8009452:	d50f      	bpl.n	8009474 <_printf_float+0x23c>
 8009454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	f43f af45 	beq.w	80092ee <_printf_float+0xb6>
 8009464:	f04f 0900 	mov.w	r9, #0
 8009468:	f108 38ff 	add.w	r8, r8, #4294967295
 800946c:	f104 0a1a 	add.w	sl, r4, #26
 8009470:	45c8      	cmp	r8, r9
 8009472:	dc09      	bgt.n	8009488 <_printf_float+0x250>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	079b      	lsls	r3, r3, #30
 8009478:	f100 8103 	bmi.w	8009682 <_printf_float+0x44a>
 800947c:	68e0      	ldr	r0, [r4, #12]
 800947e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009480:	4298      	cmp	r0, r3
 8009482:	bfb8      	it	lt
 8009484:	4618      	movlt	r0, r3
 8009486:	e734      	b.n	80092f2 <_printf_float+0xba>
 8009488:	2301      	movs	r3, #1
 800948a:	4652      	mov	r2, sl
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f af2b 	beq.w	80092ee <_printf_float+0xb6>
 8009498:	f109 0901 	add.w	r9, r9, #1
 800949c:	e7e8      	b.n	8009470 <_printf_float+0x238>
 800949e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dc39      	bgt.n	8009518 <_printf_float+0x2e0>
 80094a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009514 <_printf_float+0x2dc>)
 80094a6:	2301      	movs	r3, #1
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	f43f af1d 	beq.w	80092ee <_printf_float+0xb6>
 80094b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094b8:	ea59 0303 	orrs.w	r3, r9, r3
 80094bc:	d102      	bne.n	80094c4 <_printf_float+0x28c>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	07d9      	lsls	r1, r3, #31
 80094c2:	d5d7      	bpl.n	8009474 <_printf_float+0x23c>
 80094c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	f43f af0d 	beq.w	80092ee <_printf_float+0xb6>
 80094d4:	f04f 0a00 	mov.w	sl, #0
 80094d8:	f104 0b1a 	add.w	fp, r4, #26
 80094dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094de:	425b      	negs	r3, r3
 80094e0:	4553      	cmp	r3, sl
 80094e2:	dc01      	bgt.n	80094e8 <_printf_float+0x2b0>
 80094e4:	464b      	mov	r3, r9
 80094e6:	e793      	b.n	8009410 <_printf_float+0x1d8>
 80094e8:	2301      	movs	r3, #1
 80094ea:	465a      	mov	r2, fp
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f aefb 	beq.w	80092ee <_printf_float+0xb6>
 80094f8:	f10a 0a01 	add.w	sl, sl, #1
 80094fc:	e7ee      	b.n	80094dc <_printf_float+0x2a4>
 80094fe:	bf00      	nop
 8009500:	7fefffff 	.word	0x7fefffff
 8009504:	0800bfec 	.word	0x0800bfec
 8009508:	0800bfe8 	.word	0x0800bfe8
 800950c:	0800bff4 	.word	0x0800bff4
 8009510:	0800bff0 	.word	0x0800bff0
 8009514:	0800bff8 	.word	0x0800bff8
 8009518:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800951a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800951e:	4553      	cmp	r3, sl
 8009520:	bfa8      	it	ge
 8009522:	4653      	movge	r3, sl
 8009524:	2b00      	cmp	r3, #0
 8009526:	4699      	mov	r9, r3
 8009528:	dc36      	bgt.n	8009598 <_printf_float+0x360>
 800952a:	f04f 0b00 	mov.w	fp, #0
 800952e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009532:	f104 021a 	add.w	r2, r4, #26
 8009536:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009538:	9306      	str	r3, [sp, #24]
 800953a:	eba3 0309 	sub.w	r3, r3, r9
 800953e:	455b      	cmp	r3, fp
 8009540:	dc31      	bgt.n	80095a6 <_printf_float+0x36e>
 8009542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009544:	459a      	cmp	sl, r3
 8009546:	dc3a      	bgt.n	80095be <_printf_float+0x386>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d437      	bmi.n	80095be <_printf_float+0x386>
 800954e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009550:	ebaa 0903 	sub.w	r9, sl, r3
 8009554:	9b06      	ldr	r3, [sp, #24]
 8009556:	ebaa 0303 	sub.w	r3, sl, r3
 800955a:	4599      	cmp	r9, r3
 800955c:	bfa8      	it	ge
 800955e:	4699      	movge	r9, r3
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	dc33      	bgt.n	80095ce <_printf_float+0x396>
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800956e:	f104 0b1a 	add.w	fp, r4, #26
 8009572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009574:	ebaa 0303 	sub.w	r3, sl, r3
 8009578:	eba3 0309 	sub.w	r3, r3, r9
 800957c:	4543      	cmp	r3, r8
 800957e:	f77f af79 	ble.w	8009474 <_printf_float+0x23c>
 8009582:	2301      	movs	r3, #1
 8009584:	465a      	mov	r2, fp
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	f43f aeae 	beq.w	80092ee <_printf_float+0xb6>
 8009592:	f108 0801 	add.w	r8, r8, #1
 8009596:	e7ec      	b.n	8009572 <_printf_float+0x33a>
 8009598:	4642      	mov	r2, r8
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	d1c2      	bne.n	800952a <_printf_float+0x2f2>
 80095a4:	e6a3      	b.n	80092ee <_printf_float+0xb6>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	9206      	str	r2, [sp, #24]
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f ae9c 	beq.w	80092ee <_printf_float+0xb6>
 80095b6:	9a06      	ldr	r2, [sp, #24]
 80095b8:	f10b 0b01 	add.w	fp, fp, #1
 80095bc:	e7bb      	b.n	8009536 <_printf_float+0x2fe>
 80095be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095c2:	4631      	mov	r1, r6
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b8      	blx	r7
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1c0      	bne.n	800954e <_printf_float+0x316>
 80095cc:	e68f      	b.n	80092ee <_printf_float+0xb6>
 80095ce:	9a06      	ldr	r2, [sp, #24]
 80095d0:	464b      	mov	r3, r9
 80095d2:	4442      	add	r2, r8
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	d1c3      	bne.n	8009566 <_printf_float+0x32e>
 80095de:	e686      	b.n	80092ee <_printf_float+0xb6>
 80095e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095e4:	f1ba 0f01 	cmp.w	sl, #1
 80095e8:	dc01      	bgt.n	80095ee <_printf_float+0x3b6>
 80095ea:	07db      	lsls	r3, r3, #31
 80095ec:	d536      	bpl.n	800965c <_printf_float+0x424>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4642      	mov	r2, r8
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f ae78 	beq.w	80092ee <_printf_float+0xb6>
 80095fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f ae70 	beq.w	80092ee <_printf_float+0xb6>
 800960e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009612:	2200      	movs	r2, #0
 8009614:	2300      	movs	r3, #0
 8009616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800961a:	f7f7 fa75 	bl	8000b08 <__aeabi_dcmpeq>
 800961e:	b9c0      	cbnz	r0, 8009652 <_printf_float+0x41a>
 8009620:	4653      	mov	r3, sl
 8009622:	f108 0201 	add.w	r2, r8, #1
 8009626:	4631      	mov	r1, r6
 8009628:	4628      	mov	r0, r5
 800962a:	47b8      	blx	r7
 800962c:	3001      	adds	r0, #1
 800962e:	d10c      	bne.n	800964a <_printf_float+0x412>
 8009630:	e65d      	b.n	80092ee <_printf_float+0xb6>
 8009632:	2301      	movs	r3, #1
 8009634:	465a      	mov	r2, fp
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	f43f ae56 	beq.w	80092ee <_printf_float+0xb6>
 8009642:	f108 0801 	add.w	r8, r8, #1
 8009646:	45d0      	cmp	r8, sl
 8009648:	dbf3      	blt.n	8009632 <_printf_float+0x3fa>
 800964a:	464b      	mov	r3, r9
 800964c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009650:	e6df      	b.n	8009412 <_printf_float+0x1da>
 8009652:	f04f 0800 	mov.w	r8, #0
 8009656:	f104 0b1a 	add.w	fp, r4, #26
 800965a:	e7f4      	b.n	8009646 <_printf_float+0x40e>
 800965c:	2301      	movs	r3, #1
 800965e:	4642      	mov	r2, r8
 8009660:	e7e1      	b.n	8009626 <_printf_float+0x3ee>
 8009662:	2301      	movs	r3, #1
 8009664:	464a      	mov	r2, r9
 8009666:	4631      	mov	r1, r6
 8009668:	4628      	mov	r0, r5
 800966a:	47b8      	blx	r7
 800966c:	3001      	adds	r0, #1
 800966e:	f43f ae3e 	beq.w	80092ee <_printf_float+0xb6>
 8009672:	f108 0801 	add.w	r8, r8, #1
 8009676:	68e3      	ldr	r3, [r4, #12]
 8009678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800967a:	1a5b      	subs	r3, r3, r1
 800967c:	4543      	cmp	r3, r8
 800967e:	dcf0      	bgt.n	8009662 <_printf_float+0x42a>
 8009680:	e6fc      	b.n	800947c <_printf_float+0x244>
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	f104 0919 	add.w	r9, r4, #25
 800968a:	e7f4      	b.n	8009676 <_printf_float+0x43e>

0800968c <_printf_common>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	4616      	mov	r6, r2
 8009692:	4698      	mov	r8, r3
 8009694:	688a      	ldr	r2, [r1, #8]
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800969c:	4293      	cmp	r3, r2
 800969e:	bfb8      	it	lt
 80096a0:	4613      	movlt	r3, r2
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096a8:	4607      	mov	r7, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b10a      	cbz	r2, 80096b2 <_printf_common+0x26>
 80096ae:	3301      	adds	r3, #1
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	0699      	lsls	r1, r3, #26
 80096b6:	bf42      	ittt	mi
 80096b8:	6833      	ldrmi	r3, [r6, #0]
 80096ba:	3302      	addmi	r3, #2
 80096bc:	6033      	strmi	r3, [r6, #0]
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	f015 0506 	ands.w	r5, r5, #6
 80096c4:	d106      	bne.n	80096d4 <_printf_common+0x48>
 80096c6:	f104 0a19 	add.w	sl, r4, #25
 80096ca:	68e3      	ldr	r3, [r4, #12]
 80096cc:	6832      	ldr	r2, [r6, #0]
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc26      	bgt.n	8009722 <_printf_common+0x96>
 80096d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	3b00      	subs	r3, #0
 80096dc:	bf18      	it	ne
 80096de:	2301      	movne	r3, #1
 80096e0:	0692      	lsls	r2, r2, #26
 80096e2:	d42b      	bmi.n	800973c <_printf_common+0xb0>
 80096e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096e8:	4641      	mov	r1, r8
 80096ea:	4638      	mov	r0, r7
 80096ec:	47c8      	blx	r9
 80096ee:	3001      	adds	r0, #1
 80096f0:	d01e      	beq.n	8009730 <_printf_common+0xa4>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	f003 0306 	and.w	r3, r3, #6
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	bf02      	ittt	eq
 80096fe:	68e5      	ldreq	r5, [r4, #12]
 8009700:	6833      	ldreq	r3, [r6, #0]
 8009702:	1aed      	subeq	r5, r5, r3
 8009704:	68a3      	ldr	r3, [r4, #8]
 8009706:	bf0c      	ite	eq
 8009708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800970c:	2500      	movne	r5, #0
 800970e:	4293      	cmp	r3, r2
 8009710:	bfc4      	itt	gt
 8009712:	1a9b      	subgt	r3, r3, r2
 8009714:	18ed      	addgt	r5, r5, r3
 8009716:	2600      	movs	r6, #0
 8009718:	341a      	adds	r4, #26
 800971a:	42b5      	cmp	r5, r6
 800971c:	d11a      	bne.n	8009754 <_printf_common+0xc8>
 800971e:	2000      	movs	r0, #0
 8009720:	e008      	b.n	8009734 <_printf_common+0xa8>
 8009722:	2301      	movs	r3, #1
 8009724:	4652      	mov	r2, sl
 8009726:	4641      	mov	r1, r8
 8009728:	4638      	mov	r0, r7
 800972a:	47c8      	blx	r9
 800972c:	3001      	adds	r0, #1
 800972e:	d103      	bne.n	8009738 <_printf_common+0xac>
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	3501      	adds	r5, #1
 800973a:	e7c6      	b.n	80096ca <_printf_common+0x3e>
 800973c:	18e1      	adds	r1, r4, r3
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	2030      	movs	r0, #48	@ 0x30
 8009742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009746:	4422      	add	r2, r4
 8009748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800974c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009750:	3302      	adds	r3, #2
 8009752:	e7c7      	b.n	80096e4 <_printf_common+0x58>
 8009754:	2301      	movs	r3, #1
 8009756:	4622      	mov	r2, r4
 8009758:	4641      	mov	r1, r8
 800975a:	4638      	mov	r0, r7
 800975c:	47c8      	blx	r9
 800975e:	3001      	adds	r0, #1
 8009760:	d0e6      	beq.n	8009730 <_printf_common+0xa4>
 8009762:	3601      	adds	r6, #1
 8009764:	e7d9      	b.n	800971a <_printf_common+0x8e>
	...

08009768 <_printf_i>:
 8009768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	7e0f      	ldrb	r7, [r1, #24]
 800976e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009770:	2f78      	cmp	r7, #120	@ 0x78
 8009772:	4691      	mov	r9, r2
 8009774:	4680      	mov	r8, r0
 8009776:	460c      	mov	r4, r1
 8009778:	469a      	mov	sl, r3
 800977a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800977e:	d807      	bhi.n	8009790 <_printf_i+0x28>
 8009780:	2f62      	cmp	r7, #98	@ 0x62
 8009782:	d80a      	bhi.n	800979a <_printf_i+0x32>
 8009784:	2f00      	cmp	r7, #0
 8009786:	f000 80d1 	beq.w	800992c <_printf_i+0x1c4>
 800978a:	2f58      	cmp	r7, #88	@ 0x58
 800978c:	f000 80b8 	beq.w	8009900 <_printf_i+0x198>
 8009790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009798:	e03a      	b.n	8009810 <_printf_i+0xa8>
 800979a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800979e:	2b15      	cmp	r3, #21
 80097a0:	d8f6      	bhi.n	8009790 <_printf_i+0x28>
 80097a2:	a101      	add	r1, pc, #4	@ (adr r1, 80097a8 <_printf_i+0x40>)
 80097a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a8:	08009801 	.word	0x08009801
 80097ac:	08009815 	.word	0x08009815
 80097b0:	08009791 	.word	0x08009791
 80097b4:	08009791 	.word	0x08009791
 80097b8:	08009791 	.word	0x08009791
 80097bc:	08009791 	.word	0x08009791
 80097c0:	08009815 	.word	0x08009815
 80097c4:	08009791 	.word	0x08009791
 80097c8:	08009791 	.word	0x08009791
 80097cc:	08009791 	.word	0x08009791
 80097d0:	08009791 	.word	0x08009791
 80097d4:	08009913 	.word	0x08009913
 80097d8:	0800983f 	.word	0x0800983f
 80097dc:	080098cd 	.word	0x080098cd
 80097e0:	08009791 	.word	0x08009791
 80097e4:	08009791 	.word	0x08009791
 80097e8:	08009935 	.word	0x08009935
 80097ec:	08009791 	.word	0x08009791
 80097f0:	0800983f 	.word	0x0800983f
 80097f4:	08009791 	.word	0x08009791
 80097f8:	08009791 	.word	0x08009791
 80097fc:	080098d5 	.word	0x080098d5
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	1d1a      	adds	r2, r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6032      	str	r2, [r6, #0]
 8009808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800980c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009810:	2301      	movs	r3, #1
 8009812:	e09c      	b.n	800994e <_printf_i+0x1e6>
 8009814:	6833      	ldr	r3, [r6, #0]
 8009816:	6820      	ldr	r0, [r4, #0]
 8009818:	1d19      	adds	r1, r3, #4
 800981a:	6031      	str	r1, [r6, #0]
 800981c:	0606      	lsls	r6, r0, #24
 800981e:	d501      	bpl.n	8009824 <_printf_i+0xbc>
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	e003      	b.n	800982c <_printf_i+0xc4>
 8009824:	0645      	lsls	r5, r0, #25
 8009826:	d5fb      	bpl.n	8009820 <_printf_i+0xb8>
 8009828:	f9b3 5000 	ldrsh.w	r5, [r3]
 800982c:	2d00      	cmp	r5, #0
 800982e:	da03      	bge.n	8009838 <_printf_i+0xd0>
 8009830:	232d      	movs	r3, #45	@ 0x2d
 8009832:	426d      	negs	r5, r5
 8009834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009838:	4858      	ldr	r0, [pc, #352]	@ (800999c <_printf_i+0x234>)
 800983a:	230a      	movs	r3, #10
 800983c:	e011      	b.n	8009862 <_printf_i+0xfa>
 800983e:	6821      	ldr	r1, [r4, #0]
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	0608      	lsls	r0, r1, #24
 8009844:	f853 5b04 	ldr.w	r5, [r3], #4
 8009848:	d402      	bmi.n	8009850 <_printf_i+0xe8>
 800984a:	0649      	lsls	r1, r1, #25
 800984c:	bf48      	it	mi
 800984e:	b2ad      	uxthmi	r5, r5
 8009850:	2f6f      	cmp	r7, #111	@ 0x6f
 8009852:	4852      	ldr	r0, [pc, #328]	@ (800999c <_printf_i+0x234>)
 8009854:	6033      	str	r3, [r6, #0]
 8009856:	bf14      	ite	ne
 8009858:	230a      	movne	r3, #10
 800985a:	2308      	moveq	r3, #8
 800985c:	2100      	movs	r1, #0
 800985e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009862:	6866      	ldr	r6, [r4, #4]
 8009864:	60a6      	str	r6, [r4, #8]
 8009866:	2e00      	cmp	r6, #0
 8009868:	db05      	blt.n	8009876 <_printf_i+0x10e>
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	432e      	orrs	r6, r5
 800986e:	f021 0104 	bic.w	r1, r1, #4
 8009872:	6021      	str	r1, [r4, #0]
 8009874:	d04b      	beq.n	800990e <_printf_i+0x1a6>
 8009876:	4616      	mov	r6, r2
 8009878:	fbb5 f1f3 	udiv	r1, r5, r3
 800987c:	fb03 5711 	mls	r7, r3, r1, r5
 8009880:	5dc7      	ldrb	r7, [r0, r7]
 8009882:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009886:	462f      	mov	r7, r5
 8009888:	42bb      	cmp	r3, r7
 800988a:	460d      	mov	r5, r1
 800988c:	d9f4      	bls.n	8009878 <_printf_i+0x110>
 800988e:	2b08      	cmp	r3, #8
 8009890:	d10b      	bne.n	80098aa <_printf_i+0x142>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	07df      	lsls	r7, r3, #31
 8009896:	d508      	bpl.n	80098aa <_printf_i+0x142>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	6861      	ldr	r1, [r4, #4]
 800989c:	4299      	cmp	r1, r3
 800989e:	bfde      	ittt	le
 80098a0:	2330      	movle	r3, #48	@ 0x30
 80098a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098aa:	1b92      	subs	r2, r2, r6
 80098ac:	6122      	str	r2, [r4, #16]
 80098ae:	f8cd a000 	str.w	sl, [sp]
 80098b2:	464b      	mov	r3, r9
 80098b4:	aa03      	add	r2, sp, #12
 80098b6:	4621      	mov	r1, r4
 80098b8:	4640      	mov	r0, r8
 80098ba:	f7ff fee7 	bl	800968c <_printf_common>
 80098be:	3001      	adds	r0, #1
 80098c0:	d14a      	bne.n	8009958 <_printf_i+0x1f0>
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295
 80098c6:	b004      	add	sp, #16
 80098c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	f043 0320 	orr.w	r3, r3, #32
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	4832      	ldr	r0, [pc, #200]	@ (80099a0 <_printf_i+0x238>)
 80098d6:	2778      	movs	r7, #120	@ 0x78
 80098d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	6831      	ldr	r1, [r6, #0]
 80098e0:	061f      	lsls	r7, r3, #24
 80098e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80098e6:	d402      	bmi.n	80098ee <_printf_i+0x186>
 80098e8:	065f      	lsls	r7, r3, #25
 80098ea:	bf48      	it	mi
 80098ec:	b2ad      	uxthmi	r5, r5
 80098ee:	6031      	str	r1, [r6, #0]
 80098f0:	07d9      	lsls	r1, r3, #31
 80098f2:	bf44      	itt	mi
 80098f4:	f043 0320 	orrmi.w	r3, r3, #32
 80098f8:	6023      	strmi	r3, [r4, #0]
 80098fa:	b11d      	cbz	r5, 8009904 <_printf_i+0x19c>
 80098fc:	2310      	movs	r3, #16
 80098fe:	e7ad      	b.n	800985c <_printf_i+0xf4>
 8009900:	4826      	ldr	r0, [pc, #152]	@ (800999c <_printf_i+0x234>)
 8009902:	e7e9      	b.n	80098d8 <_printf_i+0x170>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	f023 0320 	bic.w	r3, r3, #32
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	e7f6      	b.n	80098fc <_printf_i+0x194>
 800990e:	4616      	mov	r6, r2
 8009910:	e7bd      	b.n	800988e <_printf_i+0x126>
 8009912:	6833      	ldr	r3, [r6, #0]
 8009914:	6825      	ldr	r5, [r4, #0]
 8009916:	6961      	ldr	r1, [r4, #20]
 8009918:	1d18      	adds	r0, r3, #4
 800991a:	6030      	str	r0, [r6, #0]
 800991c:	062e      	lsls	r6, r5, #24
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	d501      	bpl.n	8009926 <_printf_i+0x1be>
 8009922:	6019      	str	r1, [r3, #0]
 8009924:	e002      	b.n	800992c <_printf_i+0x1c4>
 8009926:	0668      	lsls	r0, r5, #25
 8009928:	d5fb      	bpl.n	8009922 <_printf_i+0x1ba>
 800992a:	8019      	strh	r1, [r3, #0]
 800992c:	2300      	movs	r3, #0
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	4616      	mov	r6, r2
 8009932:	e7bc      	b.n	80098ae <_printf_i+0x146>
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	1d1a      	adds	r2, r3, #4
 8009938:	6032      	str	r2, [r6, #0]
 800993a:	681e      	ldr	r6, [r3, #0]
 800993c:	6862      	ldr	r2, [r4, #4]
 800993e:	2100      	movs	r1, #0
 8009940:	4630      	mov	r0, r6
 8009942:	f7f6 fc65 	bl	8000210 <memchr>
 8009946:	b108      	cbz	r0, 800994c <_printf_i+0x1e4>
 8009948:	1b80      	subs	r0, r0, r6
 800994a:	6060      	str	r0, [r4, #4]
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	2300      	movs	r3, #0
 8009952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009956:	e7aa      	b.n	80098ae <_printf_i+0x146>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	4632      	mov	r2, r6
 800995c:	4649      	mov	r1, r9
 800995e:	4640      	mov	r0, r8
 8009960:	47d0      	blx	sl
 8009962:	3001      	adds	r0, #1
 8009964:	d0ad      	beq.n	80098c2 <_printf_i+0x15a>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	079b      	lsls	r3, r3, #30
 800996a:	d413      	bmi.n	8009994 <_printf_i+0x22c>
 800996c:	68e0      	ldr	r0, [r4, #12]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	4298      	cmp	r0, r3
 8009972:	bfb8      	it	lt
 8009974:	4618      	movlt	r0, r3
 8009976:	e7a6      	b.n	80098c6 <_printf_i+0x15e>
 8009978:	2301      	movs	r3, #1
 800997a:	4632      	mov	r2, r6
 800997c:	4649      	mov	r1, r9
 800997e:	4640      	mov	r0, r8
 8009980:	47d0      	blx	sl
 8009982:	3001      	adds	r0, #1
 8009984:	d09d      	beq.n	80098c2 <_printf_i+0x15a>
 8009986:	3501      	adds	r5, #1
 8009988:	68e3      	ldr	r3, [r4, #12]
 800998a:	9903      	ldr	r1, [sp, #12]
 800998c:	1a5b      	subs	r3, r3, r1
 800998e:	42ab      	cmp	r3, r5
 8009990:	dcf2      	bgt.n	8009978 <_printf_i+0x210>
 8009992:	e7eb      	b.n	800996c <_printf_i+0x204>
 8009994:	2500      	movs	r5, #0
 8009996:	f104 0619 	add.w	r6, r4, #25
 800999a:	e7f5      	b.n	8009988 <_printf_i+0x220>
 800999c:	0800bffa 	.word	0x0800bffa
 80099a0:	0800c00b 	.word	0x0800c00b

080099a4 <std>:
 80099a4:	2300      	movs	r3, #0
 80099a6:	b510      	push	{r4, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	e9c0 3300 	strd	r3, r3, [r0]
 80099ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099b2:	6083      	str	r3, [r0, #8]
 80099b4:	8181      	strh	r1, [r0, #12]
 80099b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099b8:	81c2      	strh	r2, [r0, #14]
 80099ba:	6183      	str	r3, [r0, #24]
 80099bc:	4619      	mov	r1, r3
 80099be:	2208      	movs	r2, #8
 80099c0:	305c      	adds	r0, #92	@ 0x5c
 80099c2:	f000 f916 	bl	8009bf2 <memset>
 80099c6:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <std+0x58>)
 80099c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009a00 <std+0x5c>)
 80099cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <std+0x60>)
 80099d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <std+0x64>)
 80099d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80099d6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a0c <std+0x68>)
 80099d8:	6224      	str	r4, [r4, #32]
 80099da:	429c      	cmp	r4, r3
 80099dc:	d006      	beq.n	80099ec <std+0x48>
 80099de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099e2:	4294      	cmp	r4, r2
 80099e4:	d002      	beq.n	80099ec <std+0x48>
 80099e6:	33d0      	adds	r3, #208	@ 0xd0
 80099e8:	429c      	cmp	r4, r3
 80099ea:	d105      	bne.n	80099f8 <std+0x54>
 80099ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f4:	f000 b9d8 	b.w	8009da8 <__retarget_lock_init_recursive>
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	bf00      	nop
 80099fc:	08009b6d 	.word	0x08009b6d
 8009a00:	08009b8f 	.word	0x08009b8f
 8009a04:	08009bc7 	.word	0x08009bc7
 8009a08:	08009beb 	.word	0x08009beb
 8009a0c:	20004d8c 	.word	0x20004d8c

08009a10 <stdio_exit_handler>:
 8009a10:	4a02      	ldr	r2, [pc, #8]	@ (8009a1c <stdio_exit_handler+0xc>)
 8009a12:	4903      	ldr	r1, [pc, #12]	@ (8009a20 <stdio_exit_handler+0x10>)
 8009a14:	4803      	ldr	r0, [pc, #12]	@ (8009a24 <stdio_exit_handler+0x14>)
 8009a16:	f000 b869 	b.w	8009aec <_fwalk_sglue>
 8009a1a:	bf00      	nop
 8009a1c:	20000010 	.word	0x20000010
 8009a20:	0800b72d 	.word	0x0800b72d
 8009a24:	20000020 	.word	0x20000020

08009a28 <cleanup_stdio>:
 8009a28:	6841      	ldr	r1, [r0, #4]
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a5c <cleanup_stdio+0x34>)
 8009a2c:	4299      	cmp	r1, r3
 8009a2e:	b510      	push	{r4, lr}
 8009a30:	4604      	mov	r4, r0
 8009a32:	d001      	beq.n	8009a38 <cleanup_stdio+0x10>
 8009a34:	f001 fe7a 	bl	800b72c <_fflush_r>
 8009a38:	68a1      	ldr	r1, [r4, #8]
 8009a3a:	4b09      	ldr	r3, [pc, #36]	@ (8009a60 <cleanup_stdio+0x38>)
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	d002      	beq.n	8009a46 <cleanup_stdio+0x1e>
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 fe73 	bl	800b72c <_fflush_r>
 8009a46:	68e1      	ldr	r1, [r4, #12]
 8009a48:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <cleanup_stdio+0x3c>)
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	d004      	beq.n	8009a58 <cleanup_stdio+0x30>
 8009a4e:	4620      	mov	r0, r4
 8009a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a54:	f001 be6a 	b.w	800b72c <_fflush_r>
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20004d8c 	.word	0x20004d8c
 8009a60:	20004df4 	.word	0x20004df4
 8009a64:	20004e5c 	.word	0x20004e5c

08009a68 <global_stdio_init.part.0>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <global_stdio_init.part.0+0x30>)
 8009a6c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a9c <global_stdio_init.part.0+0x34>)
 8009a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa0 <global_stdio_init.part.0+0x38>)
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	4620      	mov	r0, r4
 8009a74:	2200      	movs	r2, #0
 8009a76:	2104      	movs	r1, #4
 8009a78:	f7ff ff94 	bl	80099a4 <std>
 8009a7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a80:	2201      	movs	r2, #1
 8009a82:	2109      	movs	r1, #9
 8009a84:	f7ff ff8e 	bl	80099a4 <std>
 8009a88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a92:	2112      	movs	r1, #18
 8009a94:	f7ff bf86 	b.w	80099a4 <std>
 8009a98:	20004ec4 	.word	0x20004ec4
 8009a9c:	20004d8c 	.word	0x20004d8c
 8009aa0:	08009a11 	.word	0x08009a11

08009aa4 <__sfp_lock_acquire>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	@ (8009aac <__sfp_lock_acquire+0x8>)
 8009aa6:	f000 b980 	b.w	8009daa <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20004ecd 	.word	0x20004ecd

08009ab0 <__sfp_lock_release>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	@ (8009ab8 <__sfp_lock_release+0x8>)
 8009ab2:	f000 b97b 	b.w	8009dac <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20004ecd 	.word	0x20004ecd

08009abc <__sinit>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	4604      	mov	r4, r0
 8009ac0:	f7ff fff0 	bl	8009aa4 <__sfp_lock_acquire>
 8009ac4:	6a23      	ldr	r3, [r4, #32]
 8009ac6:	b11b      	cbz	r3, 8009ad0 <__sinit+0x14>
 8009ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009acc:	f7ff bff0 	b.w	8009ab0 <__sfp_lock_release>
 8009ad0:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <__sinit+0x28>)
 8009ad2:	6223      	str	r3, [r4, #32]
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <__sinit+0x2c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1f5      	bne.n	8009ac8 <__sinit+0xc>
 8009adc:	f7ff ffc4 	bl	8009a68 <global_stdio_init.part.0>
 8009ae0:	e7f2      	b.n	8009ac8 <__sinit+0xc>
 8009ae2:	bf00      	nop
 8009ae4:	08009a29 	.word	0x08009a29
 8009ae8:	20004ec4 	.word	0x20004ec4

08009aec <_fwalk_sglue>:
 8009aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af0:	4607      	mov	r7, r0
 8009af2:	4688      	mov	r8, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	2600      	movs	r6, #0
 8009af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009afc:	f1b9 0901 	subs.w	r9, r9, #1
 8009b00:	d505      	bpl.n	8009b0e <_fwalk_sglue+0x22>
 8009b02:	6824      	ldr	r4, [r4, #0]
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	d1f7      	bne.n	8009af8 <_fwalk_sglue+0xc>
 8009b08:	4630      	mov	r0, r6
 8009b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d907      	bls.n	8009b24 <_fwalk_sglue+0x38>
 8009b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	d003      	beq.n	8009b24 <_fwalk_sglue+0x38>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4638      	mov	r0, r7
 8009b20:	47c0      	blx	r8
 8009b22:	4306      	orrs	r6, r0
 8009b24:	3568      	adds	r5, #104	@ 0x68
 8009b26:	e7e9      	b.n	8009afc <_fwalk_sglue+0x10>

08009b28 <siprintf>:
 8009b28:	b40e      	push	{r1, r2, r3}
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	b09d      	sub	sp, #116	@ 0x74
 8009b2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b30:	9002      	str	r0, [sp, #8]
 8009b32:	9006      	str	r0, [sp, #24]
 8009b34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b38:	480a      	ldr	r0, [pc, #40]	@ (8009b64 <siprintf+0x3c>)
 8009b3a:	9107      	str	r1, [sp, #28]
 8009b3c:	9104      	str	r1, [sp, #16]
 8009b3e:	490a      	ldr	r1, [pc, #40]	@ (8009b68 <siprintf+0x40>)
 8009b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b44:	9105      	str	r1, [sp, #20]
 8009b46:	2400      	movs	r4, #0
 8009b48:	a902      	add	r1, sp, #8
 8009b4a:	6800      	ldr	r0, [r0, #0]
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009b50:	f001 fc6c 	bl	800b42c <_svfiprintf_r>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	701c      	strb	r4, [r3, #0]
 8009b58:	b01d      	add	sp, #116	@ 0x74
 8009b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b5e:	b003      	add	sp, #12
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	2000001c 	.word	0x2000001c
 8009b68:	ffff0208 	.word	0xffff0208

08009b6c <__sread>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b74:	f000 f8ca 	bl	8009d0c <_read_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	bfab      	itete	ge
 8009b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b80:	181b      	addge	r3, r3, r0
 8009b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b86:	bfac      	ite	ge
 8009b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b8a:	81a3      	strhlt	r3, [r4, #12]
 8009b8c:	bd10      	pop	{r4, pc}

08009b8e <__swrite>:
 8009b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b92:	461f      	mov	r7, r3
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	05db      	lsls	r3, r3, #23
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	d505      	bpl.n	8009bac <__swrite+0x1e>
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f000 f89e 	bl	8009ce8 <_lseek_r>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc2:	f000 b8b5 	b.w	8009d30 <_write_r>

08009bc6 <__sseek>:
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	460c      	mov	r4, r1
 8009bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bce:	f000 f88b 	bl	8009ce8 <_lseek_r>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	bf15      	itete	ne
 8009bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009be2:	81a3      	strheq	r3, [r4, #12]
 8009be4:	bf18      	it	ne
 8009be6:	81a3      	strhne	r3, [r4, #12]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__sclose>:
 8009bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bee:	f000 b80d 	b.w	8009c0c <_close_r>

08009bf2 <memset>:
 8009bf2:	4402      	add	r2, r0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d100      	bne.n	8009bfc <memset+0xa>
 8009bfa:	4770      	bx	lr
 8009bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8009c00:	e7f9      	b.n	8009bf6 <memset+0x4>
	...

08009c04 <_localeconv_r>:
 8009c04:	4800      	ldr	r0, [pc, #0]	@ (8009c08 <_localeconv_r+0x4>)
 8009c06:	4770      	bx	lr
 8009c08:	2000015c 	.word	0x2000015c

08009c0c <_close_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	@ (8009c28 <_close_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 f888 	bl	8001d2c <_close>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_close_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_close_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20004ec8 	.word	0x20004ec8

08009c2c <_reclaim_reent>:
 8009c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce4 <_reclaim_reent+0xb8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4283      	cmp	r3, r0
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	d053      	beq.n	8009ce0 <_reclaim_reent+0xb4>
 8009c38:	69c3      	ldr	r3, [r0, #28]
 8009c3a:	b31b      	cbz	r3, 8009c84 <_reclaim_reent+0x58>
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	b163      	cbz	r3, 8009c5a <_reclaim_reent+0x2e>
 8009c40:	2500      	movs	r5, #0
 8009c42:	69e3      	ldr	r3, [r4, #28]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	5959      	ldr	r1, [r3, r5]
 8009c48:	b9b1      	cbnz	r1, 8009c78 <_reclaim_reent+0x4c>
 8009c4a:	3504      	adds	r5, #4
 8009c4c:	2d80      	cmp	r5, #128	@ 0x80
 8009c4e:	d1f8      	bne.n	8009c42 <_reclaim_reent+0x16>
 8009c50:	69e3      	ldr	r3, [r4, #28]
 8009c52:	4620      	mov	r0, r4
 8009c54:	68d9      	ldr	r1, [r3, #12]
 8009c56:	f000 ff13 	bl	800aa80 <_free_r>
 8009c5a:	69e3      	ldr	r3, [r4, #28]
 8009c5c:	6819      	ldr	r1, [r3, #0]
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x3a>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 ff0d 	bl	800aa80 <_free_r>
 8009c66:	69e3      	ldr	r3, [r4, #28]
 8009c68:	689d      	ldr	r5, [r3, #8]
 8009c6a:	b15d      	cbz	r5, 8009c84 <_reclaim_reent+0x58>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4620      	mov	r0, r4
 8009c70:	682d      	ldr	r5, [r5, #0]
 8009c72:	f000 ff05 	bl	800aa80 <_free_r>
 8009c76:	e7f8      	b.n	8009c6a <_reclaim_reent+0x3e>
 8009c78:	680e      	ldr	r6, [r1, #0]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 ff00 	bl	800aa80 <_free_r>
 8009c80:	4631      	mov	r1, r6
 8009c82:	e7e1      	b.n	8009c48 <_reclaim_reent+0x1c>
 8009c84:	6961      	ldr	r1, [r4, #20]
 8009c86:	b111      	cbz	r1, 8009c8e <_reclaim_reent+0x62>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 fef9 	bl	800aa80 <_free_r>
 8009c8e:	69e1      	ldr	r1, [r4, #28]
 8009c90:	b111      	cbz	r1, 8009c98 <_reclaim_reent+0x6c>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fef4 	bl	800aa80 <_free_r>
 8009c98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c9a:	b111      	cbz	r1, 8009ca2 <_reclaim_reent+0x76>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 feef 	bl	800aa80 <_free_r>
 8009ca2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ca4:	b111      	cbz	r1, 8009cac <_reclaim_reent+0x80>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 feea 	bl	800aa80 <_free_r>
 8009cac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009cae:	b111      	cbz	r1, 8009cb6 <_reclaim_reent+0x8a>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fee5 	bl	800aa80 <_free_r>
 8009cb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009cb8:	b111      	cbz	r1, 8009cc0 <_reclaim_reent+0x94>
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fee0 	bl	800aa80 <_free_r>
 8009cc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009cc2:	b111      	cbz	r1, 8009cca <_reclaim_reent+0x9e>
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fedb 	bl	800aa80 <_free_r>
 8009cca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ccc:	b111      	cbz	r1, 8009cd4 <_reclaim_reent+0xa8>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fed6 	bl	800aa80 <_free_r>
 8009cd4:	6a23      	ldr	r3, [r4, #32]
 8009cd6:	b11b      	cbz	r3, 8009ce0 <_reclaim_reent+0xb4>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cde:	4718      	bx	r3
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
 8009ce2:	bf00      	nop
 8009ce4:	2000001c 	.word	0x2000001c

08009ce8 <_lseek_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	@ (8009d08 <_lseek_r+0x20>)
 8009cec:	4604      	mov	r4, r0
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7f8 f83f 	bl	8001d7a <_lseek>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_lseek_r+0x1e>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_lseek_r+0x1e>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	20004ec8 	.word	0x20004ec8

08009d0c <_read_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	@ (8009d2c <_read_r+0x20>)
 8009d10:	4604      	mov	r4, r0
 8009d12:	4608      	mov	r0, r1
 8009d14:	4611      	mov	r1, r2
 8009d16:	2200      	movs	r2, #0
 8009d18:	602a      	str	r2, [r5, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f7f7 ffcd 	bl	8001cba <_read>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_read_r+0x1e>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_read_r+0x1e>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20004ec8 	.word	0x20004ec8

08009d30 <_write_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	@ (8009d50 <_write_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f7 ffd8 	bl	8001cf4 <_write>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_write_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_write_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20004ec8 	.word	0x20004ec8

08009d54 <__errno>:
 8009d54:	4b01      	ldr	r3, [pc, #4]	@ (8009d5c <__errno+0x8>)
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	2000001c 	.word	0x2000001c

08009d60 <__libc_init_array>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4d0d      	ldr	r5, [pc, #52]	@ (8009d98 <__libc_init_array+0x38>)
 8009d64:	4c0d      	ldr	r4, [pc, #52]	@ (8009d9c <__libc_init_array+0x3c>)
 8009d66:	1b64      	subs	r4, r4, r5
 8009d68:	10a4      	asrs	r4, r4, #2
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	42a6      	cmp	r6, r4
 8009d6e:	d109      	bne.n	8009d84 <__libc_init_array+0x24>
 8009d70:	4d0b      	ldr	r5, [pc, #44]	@ (8009da0 <__libc_init_array+0x40>)
 8009d72:	4c0c      	ldr	r4, [pc, #48]	@ (8009da4 <__libc_init_array+0x44>)
 8009d74:	f002 f86a 	bl	800be4c <_init>
 8009d78:	1b64      	subs	r4, r4, r5
 8009d7a:	10a4      	asrs	r4, r4, #2
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	42a6      	cmp	r6, r4
 8009d80:	d105      	bne.n	8009d8e <__libc_init_array+0x2e>
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d88:	4798      	blx	r3
 8009d8a:	3601      	adds	r6, #1
 8009d8c:	e7ee      	b.n	8009d6c <__libc_init_array+0xc>
 8009d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d92:	4798      	blx	r3
 8009d94:	3601      	adds	r6, #1
 8009d96:	e7f2      	b.n	8009d7e <__libc_init_array+0x1e>
 8009d98:	0800c364 	.word	0x0800c364
 8009d9c:	0800c364 	.word	0x0800c364
 8009da0:	0800c364 	.word	0x0800c364
 8009da4:	0800c368 	.word	0x0800c368

08009da8 <__retarget_lock_init_recursive>:
 8009da8:	4770      	bx	lr

08009daa <__retarget_lock_acquire_recursive>:
 8009daa:	4770      	bx	lr

08009dac <__retarget_lock_release_recursive>:
 8009dac:	4770      	bx	lr

08009dae <memcpy>:
 8009dae:	440a      	add	r2, r1
 8009db0:	4291      	cmp	r1, r2
 8009db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db6:	d100      	bne.n	8009dba <memcpy+0xc>
 8009db8:	4770      	bx	lr
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc4:	4291      	cmp	r1, r2
 8009dc6:	d1f9      	bne.n	8009dbc <memcpy+0xe>
 8009dc8:	bd10      	pop	{r4, pc}

08009dca <quorem>:
 8009dca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dce:	6903      	ldr	r3, [r0, #16]
 8009dd0:	690c      	ldr	r4, [r1, #16]
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	db7e      	blt.n	8009ed6 <quorem+0x10c>
 8009dd8:	3c01      	subs	r4, #1
 8009dda:	f101 0814 	add.w	r8, r1, #20
 8009dde:	00a3      	lsls	r3, r4, #2
 8009de0:	f100 0514 	add.w	r5, r0, #20
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009df0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009df4:	3301      	adds	r3, #1
 8009df6:	429a      	cmp	r2, r3
 8009df8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e00:	d32e      	bcc.n	8009e60 <quorem+0x96>
 8009e02:	f04f 0a00 	mov.w	sl, #0
 8009e06:	46c4      	mov	ip, r8
 8009e08:	46ae      	mov	lr, r5
 8009e0a:	46d3      	mov	fp, sl
 8009e0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e10:	b298      	uxth	r0, r3
 8009e12:	fb06 a000 	mla	r0, r6, r0, sl
 8009e16:	0c02      	lsrs	r2, r0, #16
 8009e18:	0c1b      	lsrs	r3, r3, #16
 8009e1a:	fb06 2303 	mla	r3, r6, r3, r2
 8009e1e:	f8de 2000 	ldr.w	r2, [lr]
 8009e22:	b280      	uxth	r0, r0
 8009e24:	b292      	uxth	r2, r2
 8009e26:	1a12      	subs	r2, r2, r0
 8009e28:	445a      	add	r2, fp
 8009e2a:	f8de 0000 	ldr.w	r0, [lr]
 8009e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e3c:	b292      	uxth	r2, r2
 8009e3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e42:	45e1      	cmp	r9, ip
 8009e44:	f84e 2b04 	str.w	r2, [lr], #4
 8009e48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e4c:	d2de      	bcs.n	8009e0c <quorem+0x42>
 8009e4e:	9b00      	ldr	r3, [sp, #0]
 8009e50:	58eb      	ldr	r3, [r5, r3]
 8009e52:	b92b      	cbnz	r3, 8009e60 <quorem+0x96>
 8009e54:	9b01      	ldr	r3, [sp, #4]
 8009e56:	3b04      	subs	r3, #4
 8009e58:	429d      	cmp	r5, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	d32f      	bcc.n	8009ebe <quorem+0xf4>
 8009e5e:	613c      	str	r4, [r7, #16]
 8009e60:	4638      	mov	r0, r7
 8009e62:	f001 f97f 	bl	800b164 <__mcmp>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	db25      	blt.n	8009eb6 <quorem+0xec>
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e72:	f8d1 c000 	ldr.w	ip, [r1]
 8009e76:	fa1f fe82 	uxth.w	lr, r2
 8009e7a:	fa1f f38c 	uxth.w	r3, ip
 8009e7e:	eba3 030e 	sub.w	r3, r3, lr
 8009e82:	4403      	add	r3, r0
 8009e84:	0c12      	lsrs	r2, r2, #16
 8009e86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e94:	45c1      	cmp	r9, r8
 8009e96:	f841 3b04 	str.w	r3, [r1], #4
 8009e9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e9e:	d2e6      	bcs.n	8009e6e <quorem+0xa4>
 8009ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ea8:	b922      	cbnz	r2, 8009eb4 <quorem+0xea>
 8009eaa:	3b04      	subs	r3, #4
 8009eac:	429d      	cmp	r5, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	d30b      	bcc.n	8009eca <quorem+0x100>
 8009eb2:	613c      	str	r4, [r7, #16]
 8009eb4:	3601      	adds	r6, #1
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	b003      	add	sp, #12
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d1cb      	bne.n	8009e5e <quorem+0x94>
 8009ec6:	3c01      	subs	r4, #1
 8009ec8:	e7c6      	b.n	8009e58 <quorem+0x8e>
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d1ef      	bne.n	8009eb2 <quorem+0xe8>
 8009ed2:	3c01      	subs	r4, #1
 8009ed4:	e7ea      	b.n	8009eac <quorem+0xe2>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e7ee      	b.n	8009eb8 <quorem+0xee>
 8009eda:	0000      	movs	r0, r0
 8009edc:	0000      	movs	r0, r0
	...

08009ee0 <_dtoa_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	69c7      	ldr	r7, [r0, #28]
 8009ee6:	b097      	sub	sp, #92	@ 0x5c
 8009ee8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009eec:	ec55 4b10 	vmov	r4, r5, d0
 8009ef0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009efa:	b97f      	cbnz	r7, 8009f1c <_dtoa_r+0x3c>
 8009efc:	2010      	movs	r0, #16
 8009efe:	f000 fe09 	bl	800ab14 <malloc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	f8c9 001c 	str.w	r0, [r9, #28]
 8009f08:	b920      	cbnz	r0, 8009f14 <_dtoa_r+0x34>
 8009f0a:	4ba9      	ldr	r3, [pc, #676]	@ (800a1b0 <_dtoa_r+0x2d0>)
 8009f0c:	21ef      	movs	r1, #239	@ 0xef
 8009f0e:	48a9      	ldr	r0, [pc, #676]	@ (800a1b4 <_dtoa_r+0x2d4>)
 8009f10:	f001 fc5e 	bl	800b7d0 <__assert_func>
 8009f14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f18:	6007      	str	r7, [r0, #0]
 8009f1a:	60c7      	str	r7, [r0, #12]
 8009f1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f20:	6819      	ldr	r1, [r3, #0]
 8009f22:	b159      	cbz	r1, 8009f3c <_dtoa_r+0x5c>
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	604a      	str	r2, [r1, #4]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4093      	lsls	r3, r2
 8009f2c:	608b      	str	r3, [r1, #8]
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f000 fee6 	bl	800ad00 <_Bfree>
 8009f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	1e2b      	subs	r3, r5, #0
 8009f3e:	bfb9      	ittee	lt
 8009f40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f44:	9305      	strlt	r3, [sp, #20]
 8009f46:	2300      	movge	r3, #0
 8009f48:	6033      	strge	r3, [r6, #0]
 8009f4a:	9f05      	ldr	r7, [sp, #20]
 8009f4c:	4b9a      	ldr	r3, [pc, #616]	@ (800a1b8 <_dtoa_r+0x2d8>)
 8009f4e:	bfbc      	itt	lt
 8009f50:	2201      	movlt	r2, #1
 8009f52:	6032      	strlt	r2, [r6, #0]
 8009f54:	43bb      	bics	r3, r7
 8009f56:	d112      	bne.n	8009f7e <_dtoa_r+0x9e>
 8009f58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f64:	4323      	orrs	r3, r4
 8009f66:	f000 855a 	beq.w	800aa1e <_dtoa_r+0xb3e>
 8009f6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a1cc <_dtoa_r+0x2ec>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 855c 	beq.w	800aa2e <_dtoa_r+0xb4e>
 8009f76:	f10a 0303 	add.w	r3, sl, #3
 8009f7a:	f000 bd56 	b.w	800aa2a <_dtoa_r+0xb4a>
 8009f7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009f82:	2200      	movs	r2, #0
 8009f84:	ec51 0b17 	vmov	r0, r1, d7
 8009f88:	2300      	movs	r3, #0
 8009f8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009f8e:	f7f6 fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 8009f92:	4680      	mov	r8, r0
 8009f94:	b158      	cbz	r0, 8009fae <_dtoa_r+0xce>
 8009f96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f98:	2301      	movs	r3, #1
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f9e:	b113      	cbz	r3, 8009fa6 <_dtoa_r+0xc6>
 8009fa0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009fa2:	4b86      	ldr	r3, [pc, #536]	@ (800a1bc <_dtoa_r+0x2dc>)
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a1d0 <_dtoa_r+0x2f0>
 8009faa:	f000 bd40 	b.w	800aa2e <_dtoa_r+0xb4e>
 8009fae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009fb2:	aa14      	add	r2, sp, #80	@ 0x50
 8009fb4:	a915      	add	r1, sp, #84	@ 0x54
 8009fb6:	4648      	mov	r0, r9
 8009fb8:	f001 f984 	bl	800b2c4 <__d2b>
 8009fbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009fc0:	9002      	str	r0, [sp, #8]
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d078      	beq.n	800a0b8 <_dtoa_r+0x1d8>
 8009fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009fd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4b76      	ldr	r3, [pc, #472]	@ (800a1c0 <_dtoa_r+0x2e0>)
 8009fe6:	f7f6 f96f 	bl	80002c8 <__aeabi_dsub>
 8009fea:	a36b      	add	r3, pc, #428	@ (adr r3, 800a198 <_dtoa_r+0x2b8>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 fb22 	bl	8000638 <__aeabi_dmul>
 8009ff4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a1a0 <_dtoa_r+0x2c0>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	f7f6 f967 	bl	80002cc <__adddf3>
 8009ffe:	4604      	mov	r4, r0
 800a000:	4630      	mov	r0, r6
 800a002:	460d      	mov	r5, r1
 800a004:	f7f6 faae 	bl	8000564 <__aeabi_i2d>
 800a008:	a367      	add	r3, pc, #412	@ (adr r3, 800a1a8 <_dtoa_r+0x2c8>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 fb13 	bl	8000638 <__aeabi_dmul>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 f957 	bl	80002cc <__adddf3>
 800a01e:	4604      	mov	r4, r0
 800a020:	460d      	mov	r5, r1
 800a022:	f7f6 fdb9 	bl	8000b98 <__aeabi_d2iz>
 800a026:	2200      	movs	r2, #0
 800a028:	4607      	mov	r7, r0
 800a02a:	2300      	movs	r3, #0
 800a02c:	4620      	mov	r0, r4
 800a02e:	4629      	mov	r1, r5
 800a030:	f7f6 fd74 	bl	8000b1c <__aeabi_dcmplt>
 800a034:	b140      	cbz	r0, 800a048 <_dtoa_r+0x168>
 800a036:	4638      	mov	r0, r7
 800a038:	f7f6 fa94 	bl	8000564 <__aeabi_i2d>
 800a03c:	4622      	mov	r2, r4
 800a03e:	462b      	mov	r3, r5
 800a040:	f7f6 fd62 	bl	8000b08 <__aeabi_dcmpeq>
 800a044:	b900      	cbnz	r0, 800a048 <_dtoa_r+0x168>
 800a046:	3f01      	subs	r7, #1
 800a048:	2f16      	cmp	r7, #22
 800a04a:	d852      	bhi.n	800a0f2 <_dtoa_r+0x212>
 800a04c:	4b5d      	ldr	r3, [pc, #372]	@ (800a1c4 <_dtoa_r+0x2e4>)
 800a04e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a05a:	f7f6 fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d049      	beq.n	800a0f6 <_dtoa_r+0x216>
 800a062:	3f01      	subs	r7, #1
 800a064:	2300      	movs	r3, #0
 800a066:	9310      	str	r3, [sp, #64]	@ 0x40
 800a068:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a06a:	1b9b      	subs	r3, r3, r6
 800a06c:	1e5a      	subs	r2, r3, #1
 800a06e:	bf45      	ittet	mi
 800a070:	f1c3 0301 	rsbmi	r3, r3, #1
 800a074:	9300      	strmi	r3, [sp, #0]
 800a076:	2300      	movpl	r3, #0
 800a078:	2300      	movmi	r3, #0
 800a07a:	9206      	str	r2, [sp, #24]
 800a07c:	bf54      	ite	pl
 800a07e:	9300      	strpl	r3, [sp, #0]
 800a080:	9306      	strmi	r3, [sp, #24]
 800a082:	2f00      	cmp	r7, #0
 800a084:	db39      	blt.n	800a0fa <_dtoa_r+0x21a>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	970d      	str	r7, [sp, #52]	@ 0x34
 800a08a:	443b      	add	r3, r7
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	2300      	movs	r3, #0
 800a090:	9308      	str	r3, [sp, #32]
 800a092:	9b07      	ldr	r3, [sp, #28]
 800a094:	2b09      	cmp	r3, #9
 800a096:	d863      	bhi.n	800a160 <_dtoa_r+0x280>
 800a098:	2b05      	cmp	r3, #5
 800a09a:	bfc4      	itt	gt
 800a09c:	3b04      	subgt	r3, #4
 800a09e:	9307      	strgt	r3, [sp, #28]
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0a6:	bfcc      	ite	gt
 800a0a8:	2400      	movgt	r4, #0
 800a0aa:	2401      	movle	r4, #1
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d863      	bhi.n	800a178 <_dtoa_r+0x298>
 800a0b0:	e8df f003 	tbb	[pc, r3]
 800a0b4:	2b375452 	.word	0x2b375452
 800a0b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a0bc:	441e      	add	r6, r3
 800a0be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	bfc1      	itttt	gt
 800a0c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a0ca:	409f      	lslgt	r7, r3
 800a0cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a0d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a0d4:	bfd6      	itet	le
 800a0d6:	f1c3 0320 	rsble	r3, r3, #32
 800a0da:	ea47 0003 	orrgt.w	r0, r7, r3
 800a0de:	fa04 f003 	lslle.w	r0, r4, r3
 800a0e2:	f7f6 fa2f 	bl	8000544 <__aeabi_ui2d>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0ec:	3e01      	subs	r6, #1
 800a0ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800a0f0:	e776      	b.n	8009fe0 <_dtoa_r+0x100>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e7b7      	b.n	800a066 <_dtoa_r+0x186>
 800a0f6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a0f8:	e7b6      	b.n	800a068 <_dtoa_r+0x188>
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	1bdb      	subs	r3, r3, r7
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	427b      	negs	r3, r7
 800a102:	9308      	str	r3, [sp, #32]
 800a104:	2300      	movs	r3, #0
 800a106:	930d      	str	r3, [sp, #52]	@ 0x34
 800a108:	e7c3      	b.n	800a092 <_dtoa_r+0x1b2>
 800a10a:	2301      	movs	r3, #1
 800a10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a10e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a110:	eb07 0b03 	add.w	fp, r7, r3
 800a114:	f10b 0301 	add.w	r3, fp, #1
 800a118:	2b01      	cmp	r3, #1
 800a11a:	9303      	str	r3, [sp, #12]
 800a11c:	bfb8      	it	lt
 800a11e:	2301      	movlt	r3, #1
 800a120:	e006      	b.n	800a130 <_dtoa_r+0x250>
 800a122:	2301      	movs	r3, #1
 800a124:	9309      	str	r3, [sp, #36]	@ 0x24
 800a126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dd28      	ble.n	800a17e <_dtoa_r+0x29e>
 800a12c:	469b      	mov	fp, r3
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a134:	2100      	movs	r1, #0
 800a136:	2204      	movs	r2, #4
 800a138:	f102 0514 	add.w	r5, r2, #20
 800a13c:	429d      	cmp	r5, r3
 800a13e:	d926      	bls.n	800a18e <_dtoa_r+0x2ae>
 800a140:	6041      	str	r1, [r0, #4]
 800a142:	4648      	mov	r0, r9
 800a144:	f000 fd9c 	bl	800ac80 <_Balloc>
 800a148:	4682      	mov	sl, r0
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d142      	bne.n	800a1d4 <_dtoa_r+0x2f4>
 800a14e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c8 <_dtoa_r+0x2e8>)
 800a150:	4602      	mov	r2, r0
 800a152:	f240 11af 	movw	r1, #431	@ 0x1af
 800a156:	e6da      	b.n	8009f0e <_dtoa_r+0x2e>
 800a158:	2300      	movs	r3, #0
 800a15a:	e7e3      	b.n	800a124 <_dtoa_r+0x244>
 800a15c:	2300      	movs	r3, #0
 800a15e:	e7d5      	b.n	800a10c <_dtoa_r+0x22c>
 800a160:	2401      	movs	r4, #1
 800a162:	2300      	movs	r3, #0
 800a164:	9307      	str	r3, [sp, #28]
 800a166:	9409      	str	r4, [sp, #36]	@ 0x24
 800a168:	f04f 3bff 	mov.w	fp, #4294967295
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a172:	2312      	movs	r3, #18
 800a174:	920c      	str	r2, [sp, #48]	@ 0x30
 800a176:	e7db      	b.n	800a130 <_dtoa_r+0x250>
 800a178:	2301      	movs	r3, #1
 800a17a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a17c:	e7f4      	b.n	800a168 <_dtoa_r+0x288>
 800a17e:	f04f 0b01 	mov.w	fp, #1
 800a182:	f8cd b00c 	str.w	fp, [sp, #12]
 800a186:	465b      	mov	r3, fp
 800a188:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a18c:	e7d0      	b.n	800a130 <_dtoa_r+0x250>
 800a18e:	3101      	adds	r1, #1
 800a190:	0052      	lsls	r2, r2, #1
 800a192:	e7d1      	b.n	800a138 <_dtoa_r+0x258>
 800a194:	f3af 8000 	nop.w
 800a198:	636f4361 	.word	0x636f4361
 800a19c:	3fd287a7 	.word	0x3fd287a7
 800a1a0:	8b60c8b3 	.word	0x8b60c8b3
 800a1a4:	3fc68a28 	.word	0x3fc68a28
 800a1a8:	509f79fb 	.word	0x509f79fb
 800a1ac:	3fd34413 	.word	0x3fd34413
 800a1b0:	0800c029 	.word	0x0800c029
 800a1b4:	0800c040 	.word	0x0800c040
 800a1b8:	7ff00000 	.word	0x7ff00000
 800a1bc:	0800bff9 	.word	0x0800bff9
 800a1c0:	3ff80000 	.word	0x3ff80000
 800a1c4:	0800c190 	.word	0x0800c190
 800a1c8:	0800c098 	.word	0x0800c098
 800a1cc:	0800c025 	.word	0x0800c025
 800a1d0:	0800bff8 	.word	0x0800bff8
 800a1d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a1d8:	6018      	str	r0, [r3, #0]
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	2b0e      	cmp	r3, #14
 800a1de:	f200 80a1 	bhi.w	800a324 <_dtoa_r+0x444>
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	f000 809e 	beq.w	800a324 <_dtoa_r+0x444>
 800a1e8:	2f00      	cmp	r7, #0
 800a1ea:	dd33      	ble.n	800a254 <_dtoa_r+0x374>
 800a1ec:	4b9c      	ldr	r3, [pc, #624]	@ (800a460 <_dtoa_r+0x580>)
 800a1ee:	f007 020f 	and.w	r2, r7, #15
 800a1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1f6:	ed93 7b00 	vldr	d7, [r3]
 800a1fa:	05f8      	lsls	r0, r7, #23
 800a1fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a200:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a204:	d516      	bpl.n	800a234 <_dtoa_r+0x354>
 800a206:	4b97      	ldr	r3, [pc, #604]	@ (800a464 <_dtoa_r+0x584>)
 800a208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a210:	f7f6 fb3c 	bl	800088c <__aeabi_ddiv>
 800a214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a218:	f004 040f 	and.w	r4, r4, #15
 800a21c:	2603      	movs	r6, #3
 800a21e:	4d91      	ldr	r5, [pc, #580]	@ (800a464 <_dtoa_r+0x584>)
 800a220:	b954      	cbnz	r4, 800a238 <_dtoa_r+0x358>
 800a222:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a22a:	f7f6 fb2f 	bl	800088c <__aeabi_ddiv>
 800a22e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a232:	e028      	b.n	800a286 <_dtoa_r+0x3a6>
 800a234:	2602      	movs	r6, #2
 800a236:	e7f2      	b.n	800a21e <_dtoa_r+0x33e>
 800a238:	07e1      	lsls	r1, r4, #31
 800a23a:	d508      	bpl.n	800a24e <_dtoa_r+0x36e>
 800a23c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a244:	f7f6 f9f8 	bl	8000638 <__aeabi_dmul>
 800a248:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a24c:	3601      	adds	r6, #1
 800a24e:	1064      	asrs	r4, r4, #1
 800a250:	3508      	adds	r5, #8
 800a252:	e7e5      	b.n	800a220 <_dtoa_r+0x340>
 800a254:	f000 80af 	beq.w	800a3b6 <_dtoa_r+0x4d6>
 800a258:	427c      	negs	r4, r7
 800a25a:	4b81      	ldr	r3, [pc, #516]	@ (800a460 <_dtoa_r+0x580>)
 800a25c:	4d81      	ldr	r5, [pc, #516]	@ (800a464 <_dtoa_r+0x584>)
 800a25e:	f004 020f 	and.w	r2, r4, #15
 800a262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a26e:	f7f6 f9e3 	bl	8000638 <__aeabi_dmul>
 800a272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a276:	1124      	asrs	r4, r4, #4
 800a278:	2300      	movs	r3, #0
 800a27a:	2602      	movs	r6, #2
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	f040 808f 	bne.w	800a3a0 <_dtoa_r+0x4c0>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1d3      	bne.n	800a22e <_dtoa_r+0x34e>
 800a286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a288:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8094 	beq.w	800a3ba <_dtoa_r+0x4da>
 800a292:	4b75      	ldr	r3, [pc, #468]	@ (800a468 <_dtoa_r+0x588>)
 800a294:	2200      	movs	r2, #0
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f6 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f000 808b 	beq.w	800a3ba <_dtoa_r+0x4da>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 8087 	beq.w	800a3ba <_dtoa_r+0x4da>
 800a2ac:	f1bb 0f00 	cmp.w	fp, #0
 800a2b0:	dd34      	ble.n	800a31c <_dtoa_r+0x43c>
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	4b6d      	ldr	r3, [pc, #436]	@ (800a46c <_dtoa_r+0x58c>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f6 f9bd 	bl	8000638 <__aeabi_dmul>
 800a2be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a2c6:	3601      	adds	r6, #1
 800a2c8:	465c      	mov	r4, fp
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7f6 f94a 	bl	8000564 <__aeabi_i2d>
 800a2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d4:	f7f6 f9b0 	bl	8000638 <__aeabi_dmul>
 800a2d8:	4b65      	ldr	r3, [pc, #404]	@ (800a470 <_dtoa_r+0x590>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f5 fff6 	bl	80002cc <__adddf3>
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a2e6:	2c00      	cmp	r4, #0
 800a2e8:	d16a      	bne.n	800a3c0 <_dtoa_r+0x4e0>
 800a2ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2ee:	4b61      	ldr	r3, [pc, #388]	@ (800a474 <_dtoa_r+0x594>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f7f5 ffe9 	bl	80002c8 <__aeabi_dsub>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2fe:	462a      	mov	r2, r5
 800a300:	4633      	mov	r3, r6
 800a302:	f7f6 fc29 	bl	8000b58 <__aeabi_dcmpgt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f040 8298 	bne.w	800a83c <_dtoa_r+0x95c>
 800a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a310:	462a      	mov	r2, r5
 800a312:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a316:	f7f6 fc01 	bl	8000b1c <__aeabi_dcmplt>
 800a31a:	bb38      	cbnz	r0, 800a36c <_dtoa_r+0x48c>
 800a31c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a320:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a324:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a326:	2b00      	cmp	r3, #0
 800a328:	f2c0 8157 	blt.w	800a5da <_dtoa_r+0x6fa>
 800a32c:	2f0e      	cmp	r7, #14
 800a32e:	f300 8154 	bgt.w	800a5da <_dtoa_r+0x6fa>
 800a332:	4b4b      	ldr	r3, [pc, #300]	@ (800a460 <_dtoa_r+0x580>)
 800a334:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a338:	ed93 7b00 	vldr	d7, [r3]
 800a33c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a33e:	2b00      	cmp	r3, #0
 800a340:	ed8d 7b00 	vstr	d7, [sp]
 800a344:	f280 80e5 	bge.w	800a512 <_dtoa_r+0x632>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f300 80e1 	bgt.w	800a512 <_dtoa_r+0x632>
 800a350:	d10c      	bne.n	800a36c <_dtoa_r+0x48c>
 800a352:	4b48      	ldr	r3, [pc, #288]	@ (800a474 <_dtoa_r+0x594>)
 800a354:	2200      	movs	r2, #0
 800a356:	ec51 0b17 	vmov	r0, r1, d7
 800a35a:	f7f6 f96d 	bl	8000638 <__aeabi_dmul>
 800a35e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a362:	f7f6 fbef 	bl	8000b44 <__aeabi_dcmpge>
 800a366:	2800      	cmp	r0, #0
 800a368:	f000 8266 	beq.w	800a838 <_dtoa_r+0x958>
 800a36c:	2400      	movs	r4, #0
 800a36e:	4625      	mov	r5, r4
 800a370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a372:	4656      	mov	r6, sl
 800a374:	ea6f 0803 	mvn.w	r8, r3
 800a378:	2700      	movs	r7, #0
 800a37a:	4621      	mov	r1, r4
 800a37c:	4648      	mov	r0, r9
 800a37e:	f000 fcbf 	bl	800ad00 <_Bfree>
 800a382:	2d00      	cmp	r5, #0
 800a384:	f000 80bd 	beq.w	800a502 <_dtoa_r+0x622>
 800a388:	b12f      	cbz	r7, 800a396 <_dtoa_r+0x4b6>
 800a38a:	42af      	cmp	r7, r5
 800a38c:	d003      	beq.n	800a396 <_dtoa_r+0x4b6>
 800a38e:	4639      	mov	r1, r7
 800a390:	4648      	mov	r0, r9
 800a392:	f000 fcb5 	bl	800ad00 <_Bfree>
 800a396:	4629      	mov	r1, r5
 800a398:	4648      	mov	r0, r9
 800a39a:	f000 fcb1 	bl	800ad00 <_Bfree>
 800a39e:	e0b0      	b.n	800a502 <_dtoa_r+0x622>
 800a3a0:	07e2      	lsls	r2, r4, #31
 800a3a2:	d505      	bpl.n	800a3b0 <_dtoa_r+0x4d0>
 800a3a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3a8:	f7f6 f946 	bl	8000638 <__aeabi_dmul>
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	1064      	asrs	r4, r4, #1
 800a3b2:	3508      	adds	r5, #8
 800a3b4:	e762      	b.n	800a27c <_dtoa_r+0x39c>
 800a3b6:	2602      	movs	r6, #2
 800a3b8:	e765      	b.n	800a286 <_dtoa_r+0x3a6>
 800a3ba:	9c03      	ldr	r4, [sp, #12]
 800a3bc:	46b8      	mov	r8, r7
 800a3be:	e784      	b.n	800a2ca <_dtoa_r+0x3ea>
 800a3c0:	4b27      	ldr	r3, [pc, #156]	@ (800a460 <_dtoa_r+0x580>)
 800a3c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3cc:	4454      	add	r4, sl
 800a3ce:	2900      	cmp	r1, #0
 800a3d0:	d054      	beq.n	800a47c <_dtoa_r+0x59c>
 800a3d2:	4929      	ldr	r1, [pc, #164]	@ (800a478 <_dtoa_r+0x598>)
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	f7f6 fa59 	bl	800088c <__aeabi_ddiv>
 800a3da:	4633      	mov	r3, r6
 800a3dc:	462a      	mov	r2, r5
 800a3de:	f7f5 ff73 	bl	80002c8 <__aeabi_dsub>
 800a3e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a3e6:	4656      	mov	r6, sl
 800a3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ec:	f7f6 fbd4 	bl	8000b98 <__aeabi_d2iz>
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	f7f6 f8b7 	bl	8000564 <__aeabi_i2d>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3fe:	f7f5 ff63 	bl	80002c8 <__aeabi_dsub>
 800a402:	3530      	adds	r5, #48	@ 0x30
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a40c:	f806 5b01 	strb.w	r5, [r6], #1
 800a410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a414:	f7f6 fb82 	bl	8000b1c <__aeabi_dcmplt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d172      	bne.n	800a502 <_dtoa_r+0x622>
 800a41c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a420:	4911      	ldr	r1, [pc, #68]	@ (800a468 <_dtoa_r+0x588>)
 800a422:	2000      	movs	r0, #0
 800a424:	f7f5 ff50 	bl	80002c8 <__aeabi_dsub>
 800a428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a42c:	f7f6 fb76 	bl	8000b1c <__aeabi_dcmplt>
 800a430:	2800      	cmp	r0, #0
 800a432:	f040 80b4 	bne.w	800a59e <_dtoa_r+0x6be>
 800a436:	42a6      	cmp	r6, r4
 800a438:	f43f af70 	beq.w	800a31c <_dtoa_r+0x43c>
 800a43c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a440:	4b0a      	ldr	r3, [pc, #40]	@ (800a46c <_dtoa_r+0x58c>)
 800a442:	2200      	movs	r2, #0
 800a444:	f7f6 f8f8 	bl	8000638 <__aeabi_dmul>
 800a448:	4b08      	ldr	r3, [pc, #32]	@ (800a46c <_dtoa_r+0x58c>)
 800a44a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a44e:	2200      	movs	r2, #0
 800a450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a454:	f7f6 f8f0 	bl	8000638 <__aeabi_dmul>
 800a458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a45c:	e7c4      	b.n	800a3e8 <_dtoa_r+0x508>
 800a45e:	bf00      	nop
 800a460:	0800c190 	.word	0x0800c190
 800a464:	0800c168 	.word	0x0800c168
 800a468:	3ff00000 	.word	0x3ff00000
 800a46c:	40240000 	.word	0x40240000
 800a470:	401c0000 	.word	0x401c0000
 800a474:	40140000 	.word	0x40140000
 800a478:	3fe00000 	.word	0x3fe00000
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	f7f6 f8da 	bl	8000638 <__aeabi_dmul>
 800a484:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a488:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a48a:	4656      	mov	r6, sl
 800a48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a490:	f7f6 fb82 	bl	8000b98 <__aeabi_d2iz>
 800a494:	4605      	mov	r5, r0
 800a496:	f7f6 f865 	bl	8000564 <__aeabi_i2d>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a2:	f7f5 ff11 	bl	80002c8 <__aeabi_dsub>
 800a4a6:	3530      	adds	r5, #48	@ 0x30
 800a4a8:	f806 5b01 	strb.w	r5, [r6], #1
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	42a6      	cmp	r6, r4
 800a4b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4b6:	f04f 0200 	mov.w	r2, #0
 800a4ba:	d124      	bne.n	800a506 <_dtoa_r+0x626>
 800a4bc:	4baf      	ldr	r3, [pc, #700]	@ (800a77c <_dtoa_r+0x89c>)
 800a4be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a4c2:	f7f5 ff03 	bl	80002cc <__adddf3>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ce:	f7f6 fb43 	bl	8000b58 <__aeabi_dcmpgt>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d163      	bne.n	800a59e <_dtoa_r+0x6be>
 800a4d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4da:	49a8      	ldr	r1, [pc, #672]	@ (800a77c <_dtoa_r+0x89c>)
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f7f5 fef3 	bl	80002c8 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ea:	f7f6 fb17 	bl	8000b1c <__aeabi_dcmplt>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f43f af14 	beq.w	800a31c <_dtoa_r+0x43c>
 800a4f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a4f6:	1e73      	subs	r3, r6, #1
 800a4f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4fe:	2b30      	cmp	r3, #48	@ 0x30
 800a500:	d0f8      	beq.n	800a4f4 <_dtoa_r+0x614>
 800a502:	4647      	mov	r7, r8
 800a504:	e03b      	b.n	800a57e <_dtoa_r+0x69e>
 800a506:	4b9e      	ldr	r3, [pc, #632]	@ (800a780 <_dtoa_r+0x8a0>)
 800a508:	f7f6 f896 	bl	8000638 <__aeabi_dmul>
 800a50c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a510:	e7bc      	b.n	800a48c <_dtoa_r+0x5ac>
 800a512:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a516:	4656      	mov	r6, sl
 800a518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f6 f9b4 	bl	800088c <__aeabi_ddiv>
 800a524:	f7f6 fb38 	bl	8000b98 <__aeabi_d2iz>
 800a528:	4680      	mov	r8, r0
 800a52a:	f7f6 f81b 	bl	8000564 <__aeabi_i2d>
 800a52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a532:	f7f6 f881 	bl	8000638 <__aeabi_dmul>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a542:	f7f5 fec1 	bl	80002c8 <__aeabi_dsub>
 800a546:	f806 4b01 	strb.w	r4, [r6], #1
 800a54a:	9d03      	ldr	r5, [sp, #12]
 800a54c:	eba6 040a 	sub.w	r4, r6, sl
 800a550:	42a5      	cmp	r5, r4
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	d133      	bne.n	800a5c0 <_dtoa_r+0x6e0>
 800a558:	f7f5 feb8 	bl	80002cc <__adddf3>
 800a55c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a560:	4604      	mov	r4, r0
 800a562:	460d      	mov	r5, r1
 800a564:	f7f6 faf8 	bl	8000b58 <__aeabi_dcmpgt>
 800a568:	b9c0      	cbnz	r0, 800a59c <_dtoa_r+0x6bc>
 800a56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a56e:	4620      	mov	r0, r4
 800a570:	4629      	mov	r1, r5
 800a572:	f7f6 fac9 	bl	8000b08 <__aeabi_dcmpeq>
 800a576:	b110      	cbz	r0, 800a57e <_dtoa_r+0x69e>
 800a578:	f018 0f01 	tst.w	r8, #1
 800a57c:	d10e      	bne.n	800a59c <_dtoa_r+0x6bc>
 800a57e:	9902      	ldr	r1, [sp, #8]
 800a580:	4648      	mov	r0, r9
 800a582:	f000 fbbd 	bl	800ad00 <_Bfree>
 800a586:	2300      	movs	r3, #0
 800a588:	7033      	strb	r3, [r6, #0]
 800a58a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a58c:	3701      	adds	r7, #1
 800a58e:	601f      	str	r7, [r3, #0]
 800a590:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 824b 	beq.w	800aa2e <_dtoa_r+0xb4e>
 800a598:	601e      	str	r6, [r3, #0]
 800a59a:	e248      	b.n	800aa2e <_dtoa_r+0xb4e>
 800a59c:	46b8      	mov	r8, r7
 800a59e:	4633      	mov	r3, r6
 800a5a0:	461e      	mov	r6, r3
 800a5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5a6:	2a39      	cmp	r2, #57	@ 0x39
 800a5a8:	d106      	bne.n	800a5b8 <_dtoa_r+0x6d8>
 800a5aa:	459a      	cmp	sl, r3
 800a5ac:	d1f8      	bne.n	800a5a0 <_dtoa_r+0x6c0>
 800a5ae:	2230      	movs	r2, #48	@ 0x30
 800a5b0:	f108 0801 	add.w	r8, r8, #1
 800a5b4:	f88a 2000 	strb.w	r2, [sl]
 800a5b8:	781a      	ldrb	r2, [r3, #0]
 800a5ba:	3201      	adds	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e7a0      	b.n	800a502 <_dtoa_r+0x622>
 800a5c0:	4b6f      	ldr	r3, [pc, #444]	@ (800a780 <_dtoa_r+0x8a0>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7f6 f838 	bl	8000638 <__aeabi_dmul>
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	f7f6 fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d09f      	beq.n	800a518 <_dtoa_r+0x638>
 800a5d8:	e7d1      	b.n	800a57e <_dtoa_r+0x69e>
 800a5da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	f000 80ea 	beq.w	800a7b6 <_dtoa_r+0x8d6>
 800a5e2:	9a07      	ldr	r2, [sp, #28]
 800a5e4:	2a01      	cmp	r2, #1
 800a5e6:	f300 80cd 	bgt.w	800a784 <_dtoa_r+0x8a4>
 800a5ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	f000 80c1 	beq.w	800a774 <_dtoa_r+0x894>
 800a5f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a5f6:	9c08      	ldr	r4, [sp, #32]
 800a5f8:	9e00      	ldr	r6, [sp, #0]
 800a5fa:	9a00      	ldr	r2, [sp, #0]
 800a5fc:	441a      	add	r2, r3
 800a5fe:	9200      	str	r2, [sp, #0]
 800a600:	9a06      	ldr	r2, [sp, #24]
 800a602:	2101      	movs	r1, #1
 800a604:	441a      	add	r2, r3
 800a606:	4648      	mov	r0, r9
 800a608:	9206      	str	r2, [sp, #24]
 800a60a:	f000 fc2d 	bl	800ae68 <__i2b>
 800a60e:	4605      	mov	r5, r0
 800a610:	b166      	cbz	r6, 800a62c <_dtoa_r+0x74c>
 800a612:	9b06      	ldr	r3, [sp, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dd09      	ble.n	800a62c <_dtoa_r+0x74c>
 800a618:	42b3      	cmp	r3, r6
 800a61a:	9a00      	ldr	r2, [sp, #0]
 800a61c:	bfa8      	it	ge
 800a61e:	4633      	movge	r3, r6
 800a620:	1ad2      	subs	r2, r2, r3
 800a622:	9200      	str	r2, [sp, #0]
 800a624:	9a06      	ldr	r2, [sp, #24]
 800a626:	1af6      	subs	r6, r6, r3
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	9b08      	ldr	r3, [sp, #32]
 800a62e:	b30b      	cbz	r3, 800a674 <_dtoa_r+0x794>
 800a630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80c6 	beq.w	800a7c4 <_dtoa_r+0x8e4>
 800a638:	2c00      	cmp	r4, #0
 800a63a:	f000 80c0 	beq.w	800a7be <_dtoa_r+0x8de>
 800a63e:	4629      	mov	r1, r5
 800a640:	4622      	mov	r2, r4
 800a642:	4648      	mov	r0, r9
 800a644:	f000 fcc8 	bl	800afd8 <__pow5mult>
 800a648:	9a02      	ldr	r2, [sp, #8]
 800a64a:	4601      	mov	r1, r0
 800a64c:	4605      	mov	r5, r0
 800a64e:	4648      	mov	r0, r9
 800a650:	f000 fc20 	bl	800ae94 <__multiply>
 800a654:	9902      	ldr	r1, [sp, #8]
 800a656:	4680      	mov	r8, r0
 800a658:	4648      	mov	r0, r9
 800a65a:	f000 fb51 	bl	800ad00 <_Bfree>
 800a65e:	9b08      	ldr	r3, [sp, #32]
 800a660:	1b1b      	subs	r3, r3, r4
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	f000 80b1 	beq.w	800a7ca <_dtoa_r+0x8ea>
 800a668:	9a08      	ldr	r2, [sp, #32]
 800a66a:	4641      	mov	r1, r8
 800a66c:	4648      	mov	r0, r9
 800a66e:	f000 fcb3 	bl	800afd8 <__pow5mult>
 800a672:	9002      	str	r0, [sp, #8]
 800a674:	2101      	movs	r1, #1
 800a676:	4648      	mov	r0, r9
 800a678:	f000 fbf6 	bl	800ae68 <__i2b>
 800a67c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a67e:	4604      	mov	r4, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 81d8 	beq.w	800aa36 <_dtoa_r+0xb56>
 800a686:	461a      	mov	r2, r3
 800a688:	4601      	mov	r1, r0
 800a68a:	4648      	mov	r0, r9
 800a68c:	f000 fca4 	bl	800afd8 <__pow5mult>
 800a690:	9b07      	ldr	r3, [sp, #28]
 800a692:	2b01      	cmp	r3, #1
 800a694:	4604      	mov	r4, r0
 800a696:	f300 809f 	bgt.w	800a7d8 <_dtoa_r+0x8f8>
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 8097 	bne.w	800a7d0 <_dtoa_r+0x8f0>
 800a6a2:	9b05      	ldr	r3, [sp, #20]
 800a6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f040 8093 	bne.w	800a7d4 <_dtoa_r+0x8f4>
 800a6ae:	9b05      	ldr	r3, [sp, #20]
 800a6b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6b4:	0d1b      	lsrs	r3, r3, #20
 800a6b6:	051b      	lsls	r3, r3, #20
 800a6b8:	b133      	cbz	r3, 800a6c8 <_dtoa_r+0x7e8>
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	9b06      	ldr	r3, [sp, #24]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	9306      	str	r3, [sp, #24]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 81b8 	beq.w	800aa42 <_dtoa_r+0xb62>
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6d8:	6918      	ldr	r0, [r3, #16]
 800a6da:	f000 fb79 	bl	800add0 <__hi0bits>
 800a6de:	f1c0 0020 	rsb	r0, r0, #32
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	4418      	add	r0, r3
 800a6e6:	f010 001f 	ands.w	r0, r0, #31
 800a6ea:	f000 8082 	beq.w	800a7f2 <_dtoa_r+0x912>
 800a6ee:	f1c0 0320 	rsb	r3, r0, #32
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	dd73      	ble.n	800a7de <_dtoa_r+0x8fe>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	f1c0 001c 	rsb	r0, r0, #28
 800a6fc:	4403      	add	r3, r0
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	9b06      	ldr	r3, [sp, #24]
 800a702:	4403      	add	r3, r0
 800a704:	4406      	add	r6, r0
 800a706:	9306      	str	r3, [sp, #24]
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dd05      	ble.n	800a71a <_dtoa_r+0x83a>
 800a70e:	9902      	ldr	r1, [sp, #8]
 800a710:	461a      	mov	r2, r3
 800a712:	4648      	mov	r0, r9
 800a714:	f000 fcba 	bl	800b08c <__lshift>
 800a718:	9002      	str	r0, [sp, #8]
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dd05      	ble.n	800a72c <_dtoa_r+0x84c>
 800a720:	4621      	mov	r1, r4
 800a722:	461a      	mov	r2, r3
 800a724:	4648      	mov	r0, r9
 800a726:	f000 fcb1 	bl	800b08c <__lshift>
 800a72a:	4604      	mov	r4, r0
 800a72c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d061      	beq.n	800a7f6 <_dtoa_r+0x916>
 800a732:	9802      	ldr	r0, [sp, #8]
 800a734:	4621      	mov	r1, r4
 800a736:	f000 fd15 	bl	800b164 <__mcmp>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	da5b      	bge.n	800a7f6 <_dtoa_r+0x916>
 800a73e:	2300      	movs	r3, #0
 800a740:	9902      	ldr	r1, [sp, #8]
 800a742:	220a      	movs	r2, #10
 800a744:	4648      	mov	r0, r9
 800a746:	f000 fafd 	bl	800ad44 <__multadd>
 800a74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74c:	9002      	str	r0, [sp, #8]
 800a74e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 8177 	beq.w	800aa46 <_dtoa_r+0xb66>
 800a758:	4629      	mov	r1, r5
 800a75a:	2300      	movs	r3, #0
 800a75c:	220a      	movs	r2, #10
 800a75e:	4648      	mov	r0, r9
 800a760:	f000 faf0 	bl	800ad44 <__multadd>
 800a764:	f1bb 0f00 	cmp.w	fp, #0
 800a768:	4605      	mov	r5, r0
 800a76a:	dc6f      	bgt.n	800a84c <_dtoa_r+0x96c>
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	dc49      	bgt.n	800a806 <_dtoa_r+0x926>
 800a772:	e06b      	b.n	800a84c <_dtoa_r+0x96c>
 800a774:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a776:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a77a:	e73c      	b.n	800a5f6 <_dtoa_r+0x716>
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	40240000 	.word	0x40240000
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1e5c      	subs	r4, r3, #1
 800a788:	9b08      	ldr	r3, [sp, #32]
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	db09      	blt.n	800a7a2 <_dtoa_r+0x8c2>
 800a78e:	1b1c      	subs	r4, r3, r4
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f6bf af30 	bge.w	800a5f8 <_dtoa_r+0x718>
 800a798:	9b00      	ldr	r3, [sp, #0]
 800a79a:	9a03      	ldr	r2, [sp, #12]
 800a79c:	1a9e      	subs	r6, r3, r2
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e72b      	b.n	800a5fa <_dtoa_r+0x71a>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7a6:	9408      	str	r4, [sp, #32]
 800a7a8:	1ae3      	subs	r3, r4, r3
 800a7aa:	441a      	add	r2, r3
 800a7ac:	9e00      	ldr	r6, [sp, #0]
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a7b2:	2400      	movs	r4, #0
 800a7b4:	e721      	b.n	800a5fa <_dtoa_r+0x71a>
 800a7b6:	9c08      	ldr	r4, [sp, #32]
 800a7b8:	9e00      	ldr	r6, [sp, #0]
 800a7ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a7bc:	e728      	b.n	800a610 <_dtoa_r+0x730>
 800a7be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a7c2:	e751      	b.n	800a668 <_dtoa_r+0x788>
 800a7c4:	9a08      	ldr	r2, [sp, #32]
 800a7c6:	9902      	ldr	r1, [sp, #8]
 800a7c8:	e750      	b.n	800a66c <_dtoa_r+0x78c>
 800a7ca:	f8cd 8008 	str.w	r8, [sp, #8]
 800a7ce:	e751      	b.n	800a674 <_dtoa_r+0x794>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e779      	b.n	800a6c8 <_dtoa_r+0x7e8>
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	e777      	b.n	800a6c8 <_dtoa_r+0x7e8>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9308      	str	r3, [sp, #32]
 800a7dc:	e779      	b.n	800a6d2 <_dtoa_r+0x7f2>
 800a7de:	d093      	beq.n	800a708 <_dtoa_r+0x828>
 800a7e0:	9a00      	ldr	r2, [sp, #0]
 800a7e2:	331c      	adds	r3, #28
 800a7e4:	441a      	add	r2, r3
 800a7e6:	9200      	str	r2, [sp, #0]
 800a7e8:	9a06      	ldr	r2, [sp, #24]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	441e      	add	r6, r3
 800a7ee:	9206      	str	r2, [sp, #24]
 800a7f0:	e78a      	b.n	800a708 <_dtoa_r+0x828>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	e7f4      	b.n	800a7e0 <_dtoa_r+0x900>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	46b8      	mov	r8, r7
 800a7fc:	dc20      	bgt.n	800a840 <_dtoa_r+0x960>
 800a7fe:	469b      	mov	fp, r3
 800a800:	9b07      	ldr	r3, [sp, #28]
 800a802:	2b02      	cmp	r3, #2
 800a804:	dd1e      	ble.n	800a844 <_dtoa_r+0x964>
 800a806:	f1bb 0f00 	cmp.w	fp, #0
 800a80a:	f47f adb1 	bne.w	800a370 <_dtoa_r+0x490>
 800a80e:	4621      	mov	r1, r4
 800a810:	465b      	mov	r3, fp
 800a812:	2205      	movs	r2, #5
 800a814:	4648      	mov	r0, r9
 800a816:	f000 fa95 	bl	800ad44 <__multadd>
 800a81a:	4601      	mov	r1, r0
 800a81c:	4604      	mov	r4, r0
 800a81e:	9802      	ldr	r0, [sp, #8]
 800a820:	f000 fca0 	bl	800b164 <__mcmp>
 800a824:	2800      	cmp	r0, #0
 800a826:	f77f ada3 	ble.w	800a370 <_dtoa_r+0x490>
 800a82a:	4656      	mov	r6, sl
 800a82c:	2331      	movs	r3, #49	@ 0x31
 800a82e:	f806 3b01 	strb.w	r3, [r6], #1
 800a832:	f108 0801 	add.w	r8, r8, #1
 800a836:	e59f      	b.n	800a378 <_dtoa_r+0x498>
 800a838:	9c03      	ldr	r4, [sp, #12]
 800a83a:	46b8      	mov	r8, r7
 800a83c:	4625      	mov	r5, r4
 800a83e:	e7f4      	b.n	800a82a <_dtoa_r+0x94a>
 800a840:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 8101 	beq.w	800aa4e <_dtoa_r+0xb6e>
 800a84c:	2e00      	cmp	r6, #0
 800a84e:	dd05      	ble.n	800a85c <_dtoa_r+0x97c>
 800a850:	4629      	mov	r1, r5
 800a852:	4632      	mov	r2, r6
 800a854:	4648      	mov	r0, r9
 800a856:	f000 fc19 	bl	800b08c <__lshift>
 800a85a:	4605      	mov	r5, r0
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d05c      	beq.n	800a91c <_dtoa_r+0xa3c>
 800a862:	6869      	ldr	r1, [r5, #4]
 800a864:	4648      	mov	r0, r9
 800a866:	f000 fa0b 	bl	800ac80 <_Balloc>
 800a86a:	4606      	mov	r6, r0
 800a86c:	b928      	cbnz	r0, 800a87a <_dtoa_r+0x99a>
 800a86e:	4b82      	ldr	r3, [pc, #520]	@ (800aa78 <_dtoa_r+0xb98>)
 800a870:	4602      	mov	r2, r0
 800a872:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a876:	f7ff bb4a 	b.w	8009f0e <_dtoa_r+0x2e>
 800a87a:	692a      	ldr	r2, [r5, #16]
 800a87c:	3202      	adds	r2, #2
 800a87e:	0092      	lsls	r2, r2, #2
 800a880:	f105 010c 	add.w	r1, r5, #12
 800a884:	300c      	adds	r0, #12
 800a886:	f7ff fa92 	bl	8009dae <memcpy>
 800a88a:	2201      	movs	r2, #1
 800a88c:	4631      	mov	r1, r6
 800a88e:	4648      	mov	r0, r9
 800a890:	f000 fbfc 	bl	800b08c <__lshift>
 800a894:	f10a 0301 	add.w	r3, sl, #1
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	eb0a 030b 	add.w	r3, sl, fp
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	9b04      	ldr	r3, [sp, #16]
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	462f      	mov	r7, r5
 800a8a8:	9306      	str	r3, [sp, #24]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	9b00      	ldr	r3, [sp, #0]
 800a8ae:	9802      	ldr	r0, [sp, #8]
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a8b6:	f7ff fa88 	bl	8009dca <quorem>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	3330      	adds	r3, #48	@ 0x30
 800a8be:	9003      	str	r0, [sp, #12]
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	9802      	ldr	r0, [sp, #8]
 800a8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c6:	f000 fc4d 	bl	800b164 <__mcmp>
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	9004      	str	r0, [sp, #16]
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	4648      	mov	r0, r9
 800a8d2:	f000 fc63 	bl	800b19c <__mdiff>
 800a8d6:	68c2      	ldr	r2, [r0, #12]
 800a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8da:	4606      	mov	r6, r0
 800a8dc:	bb02      	cbnz	r2, 800a920 <_dtoa_r+0xa40>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	9802      	ldr	r0, [sp, #8]
 800a8e2:	f000 fc3f 	bl	800b164 <__mcmp>
 800a8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4648      	mov	r0, r9
 800a8ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800a8f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f2:	f000 fa05 	bl	800ad00 <_Bfree>
 800a8f6:	9b07      	ldr	r3, [sp, #28]
 800a8f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a8fa:	9e00      	ldr	r6, [sp, #0]
 800a8fc:	ea42 0103 	orr.w	r1, r2, r3
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	4319      	orrs	r1, r3
 800a904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a906:	d10d      	bne.n	800a924 <_dtoa_r+0xa44>
 800a908:	2b39      	cmp	r3, #57	@ 0x39
 800a90a:	d027      	beq.n	800a95c <_dtoa_r+0xa7c>
 800a90c:	9a04      	ldr	r2, [sp, #16]
 800a90e:	2a00      	cmp	r2, #0
 800a910:	dd01      	ble.n	800a916 <_dtoa_r+0xa36>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	3331      	adds	r3, #49	@ 0x31
 800a916:	f88b 3000 	strb.w	r3, [fp]
 800a91a:	e52e      	b.n	800a37a <_dtoa_r+0x49a>
 800a91c:	4628      	mov	r0, r5
 800a91e:	e7b9      	b.n	800a894 <_dtoa_r+0x9b4>
 800a920:	2201      	movs	r2, #1
 800a922:	e7e2      	b.n	800a8ea <_dtoa_r+0xa0a>
 800a924:	9904      	ldr	r1, [sp, #16]
 800a926:	2900      	cmp	r1, #0
 800a928:	db04      	blt.n	800a934 <_dtoa_r+0xa54>
 800a92a:	9807      	ldr	r0, [sp, #28]
 800a92c:	4301      	orrs	r1, r0
 800a92e:	9806      	ldr	r0, [sp, #24]
 800a930:	4301      	orrs	r1, r0
 800a932:	d120      	bne.n	800a976 <_dtoa_r+0xa96>
 800a934:	2a00      	cmp	r2, #0
 800a936:	ddee      	ble.n	800a916 <_dtoa_r+0xa36>
 800a938:	9902      	ldr	r1, [sp, #8]
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2201      	movs	r2, #1
 800a93e:	4648      	mov	r0, r9
 800a940:	f000 fba4 	bl	800b08c <__lshift>
 800a944:	4621      	mov	r1, r4
 800a946:	9002      	str	r0, [sp, #8]
 800a948:	f000 fc0c 	bl	800b164 <__mcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	dc02      	bgt.n	800a958 <_dtoa_r+0xa78>
 800a952:	d1e0      	bne.n	800a916 <_dtoa_r+0xa36>
 800a954:	07da      	lsls	r2, r3, #31
 800a956:	d5de      	bpl.n	800a916 <_dtoa_r+0xa36>
 800a958:	2b39      	cmp	r3, #57	@ 0x39
 800a95a:	d1da      	bne.n	800a912 <_dtoa_r+0xa32>
 800a95c:	2339      	movs	r3, #57	@ 0x39
 800a95e:	f88b 3000 	strb.w	r3, [fp]
 800a962:	4633      	mov	r3, r6
 800a964:	461e      	mov	r6, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a96c:	2a39      	cmp	r2, #57	@ 0x39
 800a96e:	d04e      	beq.n	800aa0e <_dtoa_r+0xb2e>
 800a970:	3201      	adds	r2, #1
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	e501      	b.n	800a37a <_dtoa_r+0x49a>
 800a976:	2a00      	cmp	r2, #0
 800a978:	dd03      	ble.n	800a982 <_dtoa_r+0xaa2>
 800a97a:	2b39      	cmp	r3, #57	@ 0x39
 800a97c:	d0ee      	beq.n	800a95c <_dtoa_r+0xa7c>
 800a97e:	3301      	adds	r3, #1
 800a980:	e7c9      	b.n	800a916 <_dtoa_r+0xa36>
 800a982:	9a00      	ldr	r2, [sp, #0]
 800a984:	9908      	ldr	r1, [sp, #32]
 800a986:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a98a:	428a      	cmp	r2, r1
 800a98c:	d028      	beq.n	800a9e0 <_dtoa_r+0xb00>
 800a98e:	9902      	ldr	r1, [sp, #8]
 800a990:	2300      	movs	r3, #0
 800a992:	220a      	movs	r2, #10
 800a994:	4648      	mov	r0, r9
 800a996:	f000 f9d5 	bl	800ad44 <__multadd>
 800a99a:	42af      	cmp	r7, r5
 800a99c:	9002      	str	r0, [sp, #8]
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	f04f 020a 	mov.w	r2, #10
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4648      	mov	r0, r9
 800a9aa:	d107      	bne.n	800a9bc <_dtoa_r+0xadc>
 800a9ac:	f000 f9ca 	bl	800ad44 <__multadd>
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	e777      	b.n	800a8ac <_dtoa_r+0x9cc>
 800a9bc:	f000 f9c2 	bl	800ad44 <__multadd>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	220a      	movs	r2, #10
 800a9c8:	4648      	mov	r0, r9
 800a9ca:	f000 f9bb 	bl	800ad44 <__multadd>
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	e7f0      	b.n	800a9b4 <_dtoa_r+0xad4>
 800a9d2:	f1bb 0f00 	cmp.w	fp, #0
 800a9d6:	bfcc      	ite	gt
 800a9d8:	465e      	movgt	r6, fp
 800a9da:	2601      	movle	r6, #1
 800a9dc:	4456      	add	r6, sl
 800a9de:	2700      	movs	r7, #0
 800a9e0:	9902      	ldr	r1, [sp, #8]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	f000 fb50 	bl	800b08c <__lshift>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	9002      	str	r0, [sp, #8]
 800a9f0:	f000 fbb8 	bl	800b164 <__mcmp>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	dcb4      	bgt.n	800a962 <_dtoa_r+0xa82>
 800a9f8:	d102      	bne.n	800aa00 <_dtoa_r+0xb20>
 800a9fa:	9b00      	ldr	r3, [sp, #0]
 800a9fc:	07db      	lsls	r3, r3, #31
 800a9fe:	d4b0      	bmi.n	800a962 <_dtoa_r+0xa82>
 800aa00:	4633      	mov	r3, r6
 800aa02:	461e      	mov	r6, r3
 800aa04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa08:	2a30      	cmp	r2, #48	@ 0x30
 800aa0a:	d0fa      	beq.n	800aa02 <_dtoa_r+0xb22>
 800aa0c:	e4b5      	b.n	800a37a <_dtoa_r+0x49a>
 800aa0e:	459a      	cmp	sl, r3
 800aa10:	d1a8      	bne.n	800a964 <_dtoa_r+0xa84>
 800aa12:	2331      	movs	r3, #49	@ 0x31
 800aa14:	f108 0801 	add.w	r8, r8, #1
 800aa18:	f88a 3000 	strb.w	r3, [sl]
 800aa1c:	e4ad      	b.n	800a37a <_dtoa_r+0x49a>
 800aa1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800aa7c <_dtoa_r+0xb9c>
 800aa24:	b11b      	cbz	r3, 800aa2e <_dtoa_r+0xb4e>
 800aa26:	f10a 0308 	add.w	r3, sl, #8
 800aa2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	4650      	mov	r0, sl
 800aa30:	b017      	add	sp, #92	@ 0x5c
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	f77f ae2e 	ble.w	800a69a <_dtoa_r+0x7ba>
 800aa3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa40:	9308      	str	r3, [sp, #32]
 800aa42:	2001      	movs	r0, #1
 800aa44:	e64d      	b.n	800a6e2 <_dtoa_r+0x802>
 800aa46:	f1bb 0f00 	cmp.w	fp, #0
 800aa4a:	f77f aed9 	ble.w	800a800 <_dtoa_r+0x920>
 800aa4e:	4656      	mov	r6, sl
 800aa50:	9802      	ldr	r0, [sp, #8]
 800aa52:	4621      	mov	r1, r4
 800aa54:	f7ff f9b9 	bl	8009dca <quorem>
 800aa58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aa5c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa60:	eba6 020a 	sub.w	r2, r6, sl
 800aa64:	4593      	cmp	fp, r2
 800aa66:	ddb4      	ble.n	800a9d2 <_dtoa_r+0xaf2>
 800aa68:	9902      	ldr	r1, [sp, #8]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	220a      	movs	r2, #10
 800aa6e:	4648      	mov	r0, r9
 800aa70:	f000 f968 	bl	800ad44 <__multadd>
 800aa74:	9002      	str	r0, [sp, #8]
 800aa76:	e7eb      	b.n	800aa50 <_dtoa_r+0xb70>
 800aa78:	0800c098 	.word	0x0800c098
 800aa7c:	0800c01c 	.word	0x0800c01c

0800aa80 <_free_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4605      	mov	r5, r0
 800aa84:	2900      	cmp	r1, #0
 800aa86:	d041      	beq.n	800ab0c <_free_r+0x8c>
 800aa88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa8c:	1f0c      	subs	r4, r1, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfb8      	it	lt
 800aa92:	18e4      	addlt	r4, r4, r3
 800aa94:	f000 f8e8 	bl	800ac68 <__malloc_lock>
 800aa98:	4a1d      	ldr	r2, [pc, #116]	@ (800ab10 <_free_r+0x90>)
 800aa9a:	6813      	ldr	r3, [r2, #0]
 800aa9c:	b933      	cbnz	r3, 800aaac <_free_r+0x2c>
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	6014      	str	r4, [r2, #0]
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa8:	f000 b8e4 	b.w	800ac74 <__malloc_unlock>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d908      	bls.n	800aac2 <_free_r+0x42>
 800aab0:	6820      	ldr	r0, [r4, #0]
 800aab2:	1821      	adds	r1, r4, r0
 800aab4:	428b      	cmp	r3, r1
 800aab6:	bf01      	itttt	eq
 800aab8:	6819      	ldreq	r1, [r3, #0]
 800aaba:	685b      	ldreq	r3, [r3, #4]
 800aabc:	1809      	addeq	r1, r1, r0
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	e7ed      	b.n	800aa9e <_free_r+0x1e>
 800aac2:	461a      	mov	r2, r3
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	b10b      	cbz	r3, 800aacc <_free_r+0x4c>
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	d9fa      	bls.n	800aac2 <_free_r+0x42>
 800aacc:	6811      	ldr	r1, [r2, #0]
 800aace:	1850      	adds	r0, r2, r1
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	d10b      	bne.n	800aaec <_free_r+0x6c>
 800aad4:	6820      	ldr	r0, [r4, #0]
 800aad6:	4401      	add	r1, r0
 800aad8:	1850      	adds	r0, r2, r1
 800aada:	4283      	cmp	r3, r0
 800aadc:	6011      	str	r1, [r2, #0]
 800aade:	d1e0      	bne.n	800aaa2 <_free_r+0x22>
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	6053      	str	r3, [r2, #4]
 800aae6:	4408      	add	r0, r1
 800aae8:	6010      	str	r0, [r2, #0]
 800aaea:	e7da      	b.n	800aaa2 <_free_r+0x22>
 800aaec:	d902      	bls.n	800aaf4 <_free_r+0x74>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	e7d6      	b.n	800aaa2 <_free_r+0x22>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	1821      	adds	r1, r4, r0
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf04      	itt	eq
 800aafc:	6819      	ldreq	r1, [r3, #0]
 800aafe:	685b      	ldreq	r3, [r3, #4]
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	bf04      	itt	eq
 800ab04:	1809      	addeq	r1, r1, r0
 800ab06:	6021      	streq	r1, [r4, #0]
 800ab08:	6054      	str	r4, [r2, #4]
 800ab0a:	e7ca      	b.n	800aaa2 <_free_r+0x22>
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	bf00      	nop
 800ab10:	20004ed4 	.word	0x20004ed4

0800ab14 <malloc>:
 800ab14:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <malloc+0xc>)
 800ab16:	4601      	mov	r1, r0
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f000 b825 	b.w	800ab68 <_malloc_r>
 800ab1e:	bf00      	nop
 800ab20:	2000001c 	.word	0x2000001c

0800ab24 <sbrk_aligned>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	4e0f      	ldr	r6, [pc, #60]	@ (800ab64 <sbrk_aligned+0x40>)
 800ab28:	460c      	mov	r4, r1
 800ab2a:	6831      	ldr	r1, [r6, #0]
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	b911      	cbnz	r1, 800ab36 <sbrk_aligned+0x12>
 800ab30:	f000 fe3e 	bl	800b7b0 <_sbrk_r>
 800ab34:	6030      	str	r0, [r6, #0]
 800ab36:	4621      	mov	r1, r4
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f000 fe39 	bl	800b7b0 <_sbrk_r>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d103      	bne.n	800ab4a <sbrk_aligned+0x26>
 800ab42:	f04f 34ff 	mov.w	r4, #4294967295
 800ab46:	4620      	mov	r0, r4
 800ab48:	bd70      	pop	{r4, r5, r6, pc}
 800ab4a:	1cc4      	adds	r4, r0, #3
 800ab4c:	f024 0403 	bic.w	r4, r4, #3
 800ab50:	42a0      	cmp	r0, r4
 800ab52:	d0f8      	beq.n	800ab46 <sbrk_aligned+0x22>
 800ab54:	1a21      	subs	r1, r4, r0
 800ab56:	4628      	mov	r0, r5
 800ab58:	f000 fe2a 	bl	800b7b0 <_sbrk_r>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d1f2      	bne.n	800ab46 <sbrk_aligned+0x22>
 800ab60:	e7ef      	b.n	800ab42 <sbrk_aligned+0x1e>
 800ab62:	bf00      	nop
 800ab64:	20004ed0 	.word	0x20004ed0

0800ab68 <_malloc_r>:
 800ab68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab6c:	1ccd      	adds	r5, r1, #3
 800ab6e:	f025 0503 	bic.w	r5, r5, #3
 800ab72:	3508      	adds	r5, #8
 800ab74:	2d0c      	cmp	r5, #12
 800ab76:	bf38      	it	cc
 800ab78:	250c      	movcc	r5, #12
 800ab7a:	2d00      	cmp	r5, #0
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	db01      	blt.n	800ab84 <_malloc_r+0x1c>
 800ab80:	42a9      	cmp	r1, r5
 800ab82:	d904      	bls.n	800ab8e <_malloc_r+0x26>
 800ab84:	230c      	movs	r3, #12
 800ab86:	6033      	str	r3, [r6, #0]
 800ab88:	2000      	movs	r0, #0
 800ab8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac64 <_malloc_r+0xfc>
 800ab92:	f000 f869 	bl	800ac68 <__malloc_lock>
 800ab96:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9a:	461c      	mov	r4, r3
 800ab9c:	bb44      	cbnz	r4, 800abf0 <_malloc_r+0x88>
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7ff ffbf 	bl	800ab24 <sbrk_aligned>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	4604      	mov	r4, r0
 800abaa:	d158      	bne.n	800ac5e <_malloc_r+0xf6>
 800abac:	f8d8 4000 	ldr.w	r4, [r8]
 800abb0:	4627      	mov	r7, r4
 800abb2:	2f00      	cmp	r7, #0
 800abb4:	d143      	bne.n	800ac3e <_malloc_r+0xd6>
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	d04b      	beq.n	800ac52 <_malloc_r+0xea>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	4639      	mov	r1, r7
 800abbe:	4630      	mov	r0, r6
 800abc0:	eb04 0903 	add.w	r9, r4, r3
 800abc4:	f000 fdf4 	bl	800b7b0 <_sbrk_r>
 800abc8:	4581      	cmp	r9, r0
 800abca:	d142      	bne.n	800ac52 <_malloc_r+0xea>
 800abcc:	6821      	ldr	r1, [r4, #0]
 800abce:	1a6d      	subs	r5, r5, r1
 800abd0:	4629      	mov	r1, r5
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ffa6 	bl	800ab24 <sbrk_aligned>
 800abd8:	3001      	adds	r0, #1
 800abda:	d03a      	beq.n	800ac52 <_malloc_r+0xea>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	442b      	add	r3, r5
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	f8d8 3000 	ldr.w	r3, [r8]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	bb62      	cbnz	r2, 800ac44 <_malloc_r+0xdc>
 800abea:	f8c8 7000 	str.w	r7, [r8]
 800abee:	e00f      	b.n	800ac10 <_malloc_r+0xa8>
 800abf0:	6822      	ldr	r2, [r4, #0]
 800abf2:	1b52      	subs	r2, r2, r5
 800abf4:	d420      	bmi.n	800ac38 <_malloc_r+0xd0>
 800abf6:	2a0b      	cmp	r2, #11
 800abf8:	d917      	bls.n	800ac2a <_malloc_r+0xc2>
 800abfa:	1961      	adds	r1, r4, r5
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	6025      	str	r5, [r4, #0]
 800ac00:	bf18      	it	ne
 800ac02:	6059      	strne	r1, [r3, #4]
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	bf08      	it	eq
 800ac08:	f8c8 1000 	streq.w	r1, [r8]
 800ac0c:	5162      	str	r2, [r4, r5]
 800ac0e:	604b      	str	r3, [r1, #4]
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 f82f 	bl	800ac74 <__malloc_unlock>
 800ac16:	f104 000b 	add.w	r0, r4, #11
 800ac1a:	1d23      	adds	r3, r4, #4
 800ac1c:	f020 0007 	bic.w	r0, r0, #7
 800ac20:	1ac2      	subs	r2, r0, r3
 800ac22:	bf1c      	itt	ne
 800ac24:	1a1b      	subne	r3, r3, r0
 800ac26:	50a3      	strne	r3, [r4, r2]
 800ac28:	e7af      	b.n	800ab8a <_malloc_r+0x22>
 800ac2a:	6862      	ldr	r2, [r4, #4]
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	bf0c      	ite	eq
 800ac30:	f8c8 2000 	streq.w	r2, [r8]
 800ac34:	605a      	strne	r2, [r3, #4]
 800ac36:	e7eb      	b.n	800ac10 <_malloc_r+0xa8>
 800ac38:	4623      	mov	r3, r4
 800ac3a:	6864      	ldr	r4, [r4, #4]
 800ac3c:	e7ae      	b.n	800ab9c <_malloc_r+0x34>
 800ac3e:	463c      	mov	r4, r7
 800ac40:	687f      	ldr	r7, [r7, #4]
 800ac42:	e7b6      	b.n	800abb2 <_malloc_r+0x4a>
 800ac44:	461a      	mov	r2, r3
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	42a3      	cmp	r3, r4
 800ac4a:	d1fb      	bne.n	800ac44 <_malloc_r+0xdc>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6053      	str	r3, [r2, #4]
 800ac50:	e7de      	b.n	800ac10 <_malloc_r+0xa8>
 800ac52:	230c      	movs	r3, #12
 800ac54:	6033      	str	r3, [r6, #0]
 800ac56:	4630      	mov	r0, r6
 800ac58:	f000 f80c 	bl	800ac74 <__malloc_unlock>
 800ac5c:	e794      	b.n	800ab88 <_malloc_r+0x20>
 800ac5e:	6005      	str	r5, [r0, #0]
 800ac60:	e7d6      	b.n	800ac10 <_malloc_r+0xa8>
 800ac62:	bf00      	nop
 800ac64:	20004ed4 	.word	0x20004ed4

0800ac68 <__malloc_lock>:
 800ac68:	4801      	ldr	r0, [pc, #4]	@ (800ac70 <__malloc_lock+0x8>)
 800ac6a:	f7ff b89e 	b.w	8009daa <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20004ecc 	.word	0x20004ecc

0800ac74 <__malloc_unlock>:
 800ac74:	4801      	ldr	r0, [pc, #4]	@ (800ac7c <__malloc_unlock+0x8>)
 800ac76:	f7ff b899 	b.w	8009dac <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20004ecc 	.word	0x20004ecc

0800ac80 <_Balloc>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	69c6      	ldr	r6, [r0, #28]
 800ac84:	4604      	mov	r4, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	b976      	cbnz	r6, 800aca8 <_Balloc+0x28>
 800ac8a:	2010      	movs	r0, #16
 800ac8c:	f7ff ff42 	bl	800ab14 <malloc>
 800ac90:	4602      	mov	r2, r0
 800ac92:	61e0      	str	r0, [r4, #28]
 800ac94:	b920      	cbnz	r0, 800aca0 <_Balloc+0x20>
 800ac96:	4b18      	ldr	r3, [pc, #96]	@ (800acf8 <_Balloc+0x78>)
 800ac98:	4818      	ldr	r0, [pc, #96]	@ (800acfc <_Balloc+0x7c>)
 800ac9a:	216b      	movs	r1, #107	@ 0x6b
 800ac9c:	f000 fd98 	bl	800b7d0 <__assert_func>
 800aca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca4:	6006      	str	r6, [r0, #0]
 800aca6:	60c6      	str	r6, [r0, #12]
 800aca8:	69e6      	ldr	r6, [r4, #28]
 800acaa:	68f3      	ldr	r3, [r6, #12]
 800acac:	b183      	cbz	r3, 800acd0 <_Balloc+0x50>
 800acae:	69e3      	ldr	r3, [r4, #28]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acb6:	b9b8      	cbnz	r0, 800ace8 <_Balloc+0x68>
 800acb8:	2101      	movs	r1, #1
 800acba:	fa01 f605 	lsl.w	r6, r1, r5
 800acbe:	1d72      	adds	r2, r6, #5
 800acc0:	0092      	lsls	r2, r2, #2
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 fda2 	bl	800b80c <_calloc_r>
 800acc8:	b160      	cbz	r0, 800ace4 <_Balloc+0x64>
 800acca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acce:	e00e      	b.n	800acee <_Balloc+0x6e>
 800acd0:	2221      	movs	r2, #33	@ 0x21
 800acd2:	2104      	movs	r1, #4
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fd99 	bl	800b80c <_calloc_r>
 800acda:	69e3      	ldr	r3, [r4, #28]
 800acdc:	60f0      	str	r0, [r6, #12]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e4      	bne.n	800acae <_Balloc+0x2e>
 800ace4:	2000      	movs	r0, #0
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	6802      	ldr	r2, [r0, #0]
 800acea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acee:	2300      	movs	r3, #0
 800acf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acf4:	e7f7      	b.n	800ace6 <_Balloc+0x66>
 800acf6:	bf00      	nop
 800acf8:	0800c029 	.word	0x0800c029
 800acfc:	0800c0a9 	.word	0x0800c0a9

0800ad00 <_Bfree>:
 800ad00:	b570      	push	{r4, r5, r6, lr}
 800ad02:	69c6      	ldr	r6, [r0, #28]
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	b976      	cbnz	r6, 800ad28 <_Bfree+0x28>
 800ad0a:	2010      	movs	r0, #16
 800ad0c:	f7ff ff02 	bl	800ab14 <malloc>
 800ad10:	4602      	mov	r2, r0
 800ad12:	61e8      	str	r0, [r5, #28]
 800ad14:	b920      	cbnz	r0, 800ad20 <_Bfree+0x20>
 800ad16:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <_Bfree+0x3c>)
 800ad18:	4809      	ldr	r0, [pc, #36]	@ (800ad40 <_Bfree+0x40>)
 800ad1a:	218f      	movs	r1, #143	@ 0x8f
 800ad1c:	f000 fd58 	bl	800b7d0 <__assert_func>
 800ad20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad24:	6006      	str	r6, [r0, #0]
 800ad26:	60c6      	str	r6, [r0, #12]
 800ad28:	b13c      	cbz	r4, 800ad3a <_Bfree+0x3a>
 800ad2a:	69eb      	ldr	r3, [r5, #28]
 800ad2c:	6862      	ldr	r2, [r4, #4]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad34:	6021      	str	r1, [r4, #0]
 800ad36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}
 800ad3c:	0800c029 	.word	0x0800c029
 800ad40:	0800c0a9 	.word	0x0800c0a9

0800ad44 <__multadd>:
 800ad44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad48:	690d      	ldr	r5, [r1, #16]
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	461e      	mov	r6, r3
 800ad50:	f101 0c14 	add.w	ip, r1, #20
 800ad54:	2000      	movs	r0, #0
 800ad56:	f8dc 3000 	ldr.w	r3, [ip]
 800ad5a:	b299      	uxth	r1, r3
 800ad5c:	fb02 6101 	mla	r1, r2, r1, r6
 800ad60:	0c1e      	lsrs	r6, r3, #16
 800ad62:	0c0b      	lsrs	r3, r1, #16
 800ad64:	fb02 3306 	mla	r3, r2, r6, r3
 800ad68:	b289      	uxth	r1, r1
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad70:	4285      	cmp	r5, r0
 800ad72:	f84c 1b04 	str.w	r1, [ip], #4
 800ad76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad7a:	dcec      	bgt.n	800ad56 <__multadd+0x12>
 800ad7c:	b30e      	cbz	r6, 800adc2 <__multadd+0x7e>
 800ad7e:	68a3      	ldr	r3, [r4, #8]
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	dc19      	bgt.n	800adb8 <__multadd+0x74>
 800ad84:	6861      	ldr	r1, [r4, #4]
 800ad86:	4638      	mov	r0, r7
 800ad88:	3101      	adds	r1, #1
 800ad8a:	f7ff ff79 	bl	800ac80 <_Balloc>
 800ad8e:	4680      	mov	r8, r0
 800ad90:	b928      	cbnz	r0, 800ad9e <__multadd+0x5a>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4b0c      	ldr	r3, [pc, #48]	@ (800adc8 <__multadd+0x84>)
 800ad96:	480d      	ldr	r0, [pc, #52]	@ (800adcc <__multadd+0x88>)
 800ad98:	21ba      	movs	r1, #186	@ 0xba
 800ad9a:	f000 fd19 	bl	800b7d0 <__assert_func>
 800ad9e:	6922      	ldr	r2, [r4, #16]
 800ada0:	3202      	adds	r2, #2
 800ada2:	f104 010c 	add.w	r1, r4, #12
 800ada6:	0092      	lsls	r2, r2, #2
 800ada8:	300c      	adds	r0, #12
 800adaa:	f7ff f800 	bl	8009dae <memcpy>
 800adae:	4621      	mov	r1, r4
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff ffa5 	bl	800ad00 <_Bfree>
 800adb6:	4644      	mov	r4, r8
 800adb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adbc:	3501      	adds	r5, #1
 800adbe:	615e      	str	r6, [r3, #20]
 800adc0:	6125      	str	r5, [r4, #16]
 800adc2:	4620      	mov	r0, r4
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	0800c098 	.word	0x0800c098
 800adcc:	0800c0a9 	.word	0x0800c0a9

0800add0 <__hi0bits>:
 800add0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800add4:	4603      	mov	r3, r0
 800add6:	bf36      	itet	cc
 800add8:	0403      	lslcc	r3, r0, #16
 800adda:	2000      	movcs	r0, #0
 800addc:	2010      	movcc	r0, #16
 800adde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ade2:	bf3c      	itt	cc
 800ade4:	021b      	lslcc	r3, r3, #8
 800ade6:	3008      	addcc	r0, #8
 800ade8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adec:	bf3c      	itt	cc
 800adee:	011b      	lslcc	r3, r3, #4
 800adf0:	3004      	addcc	r0, #4
 800adf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf6:	bf3c      	itt	cc
 800adf8:	009b      	lslcc	r3, r3, #2
 800adfa:	3002      	addcc	r0, #2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	db05      	blt.n	800ae0c <__hi0bits+0x3c>
 800ae00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae04:	f100 0001 	add.w	r0, r0, #1
 800ae08:	bf08      	it	eq
 800ae0a:	2020      	moveq	r0, #32
 800ae0c:	4770      	bx	lr

0800ae0e <__lo0bits>:
 800ae0e:	6803      	ldr	r3, [r0, #0]
 800ae10:	4602      	mov	r2, r0
 800ae12:	f013 0007 	ands.w	r0, r3, #7
 800ae16:	d00b      	beq.n	800ae30 <__lo0bits+0x22>
 800ae18:	07d9      	lsls	r1, r3, #31
 800ae1a:	d421      	bmi.n	800ae60 <__lo0bits+0x52>
 800ae1c:	0798      	lsls	r0, r3, #30
 800ae1e:	bf49      	itett	mi
 800ae20:	085b      	lsrmi	r3, r3, #1
 800ae22:	089b      	lsrpl	r3, r3, #2
 800ae24:	2001      	movmi	r0, #1
 800ae26:	6013      	strmi	r3, [r2, #0]
 800ae28:	bf5c      	itt	pl
 800ae2a:	6013      	strpl	r3, [r2, #0]
 800ae2c:	2002      	movpl	r0, #2
 800ae2e:	4770      	bx	lr
 800ae30:	b299      	uxth	r1, r3
 800ae32:	b909      	cbnz	r1, 800ae38 <__lo0bits+0x2a>
 800ae34:	0c1b      	lsrs	r3, r3, #16
 800ae36:	2010      	movs	r0, #16
 800ae38:	b2d9      	uxtb	r1, r3
 800ae3a:	b909      	cbnz	r1, 800ae40 <__lo0bits+0x32>
 800ae3c:	3008      	adds	r0, #8
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	0719      	lsls	r1, r3, #28
 800ae42:	bf04      	itt	eq
 800ae44:	091b      	lsreq	r3, r3, #4
 800ae46:	3004      	addeq	r0, #4
 800ae48:	0799      	lsls	r1, r3, #30
 800ae4a:	bf04      	itt	eq
 800ae4c:	089b      	lsreq	r3, r3, #2
 800ae4e:	3002      	addeq	r0, #2
 800ae50:	07d9      	lsls	r1, r3, #31
 800ae52:	d403      	bmi.n	800ae5c <__lo0bits+0x4e>
 800ae54:	085b      	lsrs	r3, r3, #1
 800ae56:	f100 0001 	add.w	r0, r0, #1
 800ae5a:	d003      	beq.n	800ae64 <__lo0bits+0x56>
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	4770      	bx	lr
 800ae60:	2000      	movs	r0, #0
 800ae62:	4770      	bx	lr
 800ae64:	2020      	movs	r0, #32
 800ae66:	4770      	bx	lr

0800ae68 <__i2b>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	f7ff ff07 	bl	800ac80 <_Balloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	b928      	cbnz	r0, 800ae82 <__i2b+0x1a>
 800ae76:	4b05      	ldr	r3, [pc, #20]	@ (800ae8c <__i2b+0x24>)
 800ae78:	4805      	ldr	r0, [pc, #20]	@ (800ae90 <__i2b+0x28>)
 800ae7a:	f240 1145 	movw	r1, #325	@ 0x145
 800ae7e:	f000 fca7 	bl	800b7d0 <__assert_func>
 800ae82:	2301      	movs	r3, #1
 800ae84:	6144      	str	r4, [r0, #20]
 800ae86:	6103      	str	r3, [r0, #16]
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0800c098 	.word	0x0800c098
 800ae90:	0800c0a9 	.word	0x0800c0a9

0800ae94 <__multiply>:
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	4617      	mov	r7, r2
 800ae9a:	690a      	ldr	r2, [r1, #16]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	bfa8      	it	ge
 800aea2:	463b      	movge	r3, r7
 800aea4:	4689      	mov	r9, r1
 800aea6:	bfa4      	itt	ge
 800aea8:	460f      	movge	r7, r1
 800aeaa:	4699      	movge	r9, r3
 800aeac:	693d      	ldr	r5, [r7, #16]
 800aeae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	eb05 060a 	add.w	r6, r5, sl
 800aeba:	42b3      	cmp	r3, r6
 800aebc:	b085      	sub	sp, #20
 800aebe:	bfb8      	it	lt
 800aec0:	3101      	addlt	r1, #1
 800aec2:	f7ff fedd 	bl	800ac80 <_Balloc>
 800aec6:	b930      	cbnz	r0, 800aed6 <__multiply+0x42>
 800aec8:	4602      	mov	r2, r0
 800aeca:	4b41      	ldr	r3, [pc, #260]	@ (800afd0 <__multiply+0x13c>)
 800aecc:	4841      	ldr	r0, [pc, #260]	@ (800afd4 <__multiply+0x140>)
 800aece:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aed2:	f000 fc7d 	bl	800b7d0 <__assert_func>
 800aed6:	f100 0414 	add.w	r4, r0, #20
 800aeda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aede:	4623      	mov	r3, r4
 800aee0:	2200      	movs	r2, #0
 800aee2:	4573      	cmp	r3, lr
 800aee4:	d320      	bcc.n	800af28 <__multiply+0x94>
 800aee6:	f107 0814 	add.w	r8, r7, #20
 800aeea:	f109 0114 	add.w	r1, r9, #20
 800aeee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800aef2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800aef6:	9302      	str	r3, [sp, #8]
 800aef8:	1beb      	subs	r3, r5, r7
 800aefa:	3b15      	subs	r3, #21
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	3304      	adds	r3, #4
 800af02:	3715      	adds	r7, #21
 800af04:	42bd      	cmp	r5, r7
 800af06:	bf38      	it	cc
 800af08:	2304      	movcc	r3, #4
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	9103      	str	r1, [sp, #12]
 800af10:	428b      	cmp	r3, r1
 800af12:	d80c      	bhi.n	800af2e <__multiply+0x9a>
 800af14:	2e00      	cmp	r6, #0
 800af16:	dd03      	ble.n	800af20 <__multiply+0x8c>
 800af18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d055      	beq.n	800afcc <__multiply+0x138>
 800af20:	6106      	str	r6, [r0, #16]
 800af22:	b005      	add	sp, #20
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	f843 2b04 	str.w	r2, [r3], #4
 800af2c:	e7d9      	b.n	800aee2 <__multiply+0x4e>
 800af2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	d01f      	beq.n	800af78 <__multiply+0xe4>
 800af38:	46c4      	mov	ip, r8
 800af3a:	46a1      	mov	r9, r4
 800af3c:	2700      	movs	r7, #0
 800af3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af42:	f8d9 3000 	ldr.w	r3, [r9]
 800af46:	fa1f fb82 	uxth.w	fp, r2
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800af50:	443b      	add	r3, r7
 800af52:	f8d9 7000 	ldr.w	r7, [r9]
 800af56:	0c12      	lsrs	r2, r2, #16
 800af58:	0c3f      	lsrs	r7, r7, #16
 800af5a:	fb0a 7202 	mla	r2, sl, r2, r7
 800af5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800af62:	b29b      	uxth	r3, r3
 800af64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af68:	4565      	cmp	r5, ip
 800af6a:	f849 3b04 	str.w	r3, [r9], #4
 800af6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800af72:	d8e4      	bhi.n	800af3e <__multiply+0xaa>
 800af74:	9b01      	ldr	r3, [sp, #4]
 800af76:	50e7      	str	r7, [r4, r3]
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af7e:	3104      	adds	r1, #4
 800af80:	f1b9 0f00 	cmp.w	r9, #0
 800af84:	d020      	beq.n	800afc8 <__multiply+0x134>
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	4647      	mov	r7, r8
 800af8a:	46a4      	mov	ip, r4
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	f8b7 b000 	ldrh.w	fp, [r7]
 800af94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800af98:	fb09 220b 	mla	r2, r9, fp, r2
 800af9c:	4452      	add	r2, sl
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa4:	f84c 3b04 	str.w	r3, [ip], #4
 800afa8:	f857 3b04 	ldr.w	r3, [r7], #4
 800afac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afb0:	f8bc 3000 	ldrh.w	r3, [ip]
 800afb4:	fb09 330a 	mla	r3, r9, sl, r3
 800afb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800afbc:	42bd      	cmp	r5, r7
 800afbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afc2:	d8e5      	bhi.n	800af90 <__multiply+0xfc>
 800afc4:	9a01      	ldr	r2, [sp, #4]
 800afc6:	50a3      	str	r3, [r4, r2]
 800afc8:	3404      	adds	r4, #4
 800afca:	e79f      	b.n	800af0c <__multiply+0x78>
 800afcc:	3e01      	subs	r6, #1
 800afce:	e7a1      	b.n	800af14 <__multiply+0x80>
 800afd0:	0800c098 	.word	0x0800c098
 800afd4:	0800c0a9 	.word	0x0800c0a9

0800afd8 <__pow5mult>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4615      	mov	r5, r2
 800afde:	f012 0203 	ands.w	r2, r2, #3
 800afe2:	4607      	mov	r7, r0
 800afe4:	460e      	mov	r6, r1
 800afe6:	d007      	beq.n	800aff8 <__pow5mult+0x20>
 800afe8:	4c25      	ldr	r4, [pc, #148]	@ (800b080 <__pow5mult+0xa8>)
 800afea:	3a01      	subs	r2, #1
 800afec:	2300      	movs	r3, #0
 800afee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aff2:	f7ff fea7 	bl	800ad44 <__multadd>
 800aff6:	4606      	mov	r6, r0
 800aff8:	10ad      	asrs	r5, r5, #2
 800affa:	d03d      	beq.n	800b078 <__pow5mult+0xa0>
 800affc:	69fc      	ldr	r4, [r7, #28]
 800affe:	b97c      	cbnz	r4, 800b020 <__pow5mult+0x48>
 800b000:	2010      	movs	r0, #16
 800b002:	f7ff fd87 	bl	800ab14 <malloc>
 800b006:	4602      	mov	r2, r0
 800b008:	61f8      	str	r0, [r7, #28]
 800b00a:	b928      	cbnz	r0, 800b018 <__pow5mult+0x40>
 800b00c:	4b1d      	ldr	r3, [pc, #116]	@ (800b084 <__pow5mult+0xac>)
 800b00e:	481e      	ldr	r0, [pc, #120]	@ (800b088 <__pow5mult+0xb0>)
 800b010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b014:	f000 fbdc 	bl	800b7d0 <__assert_func>
 800b018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b01c:	6004      	str	r4, [r0, #0]
 800b01e:	60c4      	str	r4, [r0, #12]
 800b020:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b028:	b94c      	cbnz	r4, 800b03e <__pow5mult+0x66>
 800b02a:	f240 2171 	movw	r1, #625	@ 0x271
 800b02e:	4638      	mov	r0, r7
 800b030:	f7ff ff1a 	bl	800ae68 <__i2b>
 800b034:	2300      	movs	r3, #0
 800b036:	f8c8 0008 	str.w	r0, [r8, #8]
 800b03a:	4604      	mov	r4, r0
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	07eb      	lsls	r3, r5, #31
 800b044:	d50a      	bpl.n	800b05c <__pow5mult+0x84>
 800b046:	4631      	mov	r1, r6
 800b048:	4622      	mov	r2, r4
 800b04a:	4638      	mov	r0, r7
 800b04c:	f7ff ff22 	bl	800ae94 <__multiply>
 800b050:	4631      	mov	r1, r6
 800b052:	4680      	mov	r8, r0
 800b054:	4638      	mov	r0, r7
 800b056:	f7ff fe53 	bl	800ad00 <_Bfree>
 800b05a:	4646      	mov	r6, r8
 800b05c:	106d      	asrs	r5, r5, #1
 800b05e:	d00b      	beq.n	800b078 <__pow5mult+0xa0>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	b938      	cbnz	r0, 800b074 <__pow5mult+0x9c>
 800b064:	4622      	mov	r2, r4
 800b066:	4621      	mov	r1, r4
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff ff13 	bl	800ae94 <__multiply>
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	f8c0 9000 	str.w	r9, [r0]
 800b074:	4604      	mov	r4, r0
 800b076:	e7e4      	b.n	800b042 <__pow5mult+0x6a>
 800b078:	4630      	mov	r0, r6
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	bf00      	nop
 800b080:	0800c15c 	.word	0x0800c15c
 800b084:	0800c029 	.word	0x0800c029
 800b088:	0800c0a9 	.word	0x0800c0a9

0800b08c <__lshift>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	6849      	ldr	r1, [r1, #4]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	4607      	mov	r7, r0
 800b09e:	4691      	mov	r9, r2
 800b0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0a4:	f108 0601 	add.w	r6, r8, #1
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	db0b      	blt.n	800b0c4 <__lshift+0x38>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff fde7 	bl	800ac80 <_Balloc>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	b948      	cbnz	r0, 800b0ca <__lshift+0x3e>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	4b28      	ldr	r3, [pc, #160]	@ (800b15c <__lshift+0xd0>)
 800b0ba:	4829      	ldr	r0, [pc, #164]	@ (800b160 <__lshift+0xd4>)
 800b0bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0c0:	f000 fb86 	bl	800b7d0 <__assert_func>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__lshift+0x1c>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f100 0114 	add.w	r1, r0, #20
 800b0d0:	f100 0210 	add.w	r2, r0, #16
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	4553      	cmp	r3, sl
 800b0d8:	db33      	blt.n	800b142 <__lshift+0xb6>
 800b0da:	6920      	ldr	r0, [r4, #16]
 800b0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e0:	f104 0314 	add.w	r3, r4, #20
 800b0e4:	f019 091f 	ands.w	r9, r9, #31
 800b0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0f0:	d02b      	beq.n	800b14a <__lshift+0xbe>
 800b0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0f6:	468a      	mov	sl, r1
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b100:	4310      	orrs	r0, r2
 800b102:	f84a 0b04 	str.w	r0, [sl], #4
 800b106:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10a:	459c      	cmp	ip, r3
 800b10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b110:	d8f3      	bhi.n	800b0fa <__lshift+0x6e>
 800b112:	ebac 0304 	sub.w	r3, ip, r4
 800b116:	3b15      	subs	r3, #21
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3304      	adds	r3, #4
 800b11e:	f104 0015 	add.w	r0, r4, #21
 800b122:	4560      	cmp	r0, ip
 800b124:	bf88      	it	hi
 800b126:	2304      	movhi	r3, #4
 800b128:	50ca      	str	r2, [r1, r3]
 800b12a:	b10a      	cbz	r2, 800b130 <__lshift+0xa4>
 800b12c:	f108 0602 	add.w	r6, r8, #2
 800b130:	3e01      	subs	r6, #1
 800b132:	4638      	mov	r0, r7
 800b134:	612e      	str	r6, [r5, #16]
 800b136:	4621      	mov	r1, r4
 800b138:	f7ff fde2 	bl	800ad00 <_Bfree>
 800b13c:	4628      	mov	r0, r5
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	f842 0f04 	str.w	r0, [r2, #4]!
 800b146:	3301      	adds	r3, #1
 800b148:	e7c5      	b.n	800b0d6 <__lshift+0x4a>
 800b14a:	3904      	subs	r1, #4
 800b14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b150:	f841 2f04 	str.w	r2, [r1, #4]!
 800b154:	459c      	cmp	ip, r3
 800b156:	d8f9      	bhi.n	800b14c <__lshift+0xc0>
 800b158:	e7ea      	b.n	800b130 <__lshift+0xa4>
 800b15a:	bf00      	nop
 800b15c:	0800c098 	.word	0x0800c098
 800b160:	0800c0a9 	.word	0x0800c0a9

0800b164 <__mcmp>:
 800b164:	690a      	ldr	r2, [r1, #16]
 800b166:	4603      	mov	r3, r0
 800b168:	6900      	ldr	r0, [r0, #16]
 800b16a:	1a80      	subs	r0, r0, r2
 800b16c:	b530      	push	{r4, r5, lr}
 800b16e:	d10e      	bne.n	800b18e <__mcmp+0x2a>
 800b170:	3314      	adds	r3, #20
 800b172:	3114      	adds	r1, #20
 800b174:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b17c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b184:	4295      	cmp	r5, r2
 800b186:	d003      	beq.n	800b190 <__mcmp+0x2c>
 800b188:	d205      	bcs.n	800b196 <__mcmp+0x32>
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	bd30      	pop	{r4, r5, pc}
 800b190:	42a3      	cmp	r3, r4
 800b192:	d3f3      	bcc.n	800b17c <__mcmp+0x18>
 800b194:	e7fb      	b.n	800b18e <__mcmp+0x2a>
 800b196:	2001      	movs	r0, #1
 800b198:	e7f9      	b.n	800b18e <__mcmp+0x2a>
	...

0800b19c <__mdiff>:
 800b19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	f7ff ffdb 	bl	800b164 <__mcmp>
 800b1ae:	1e05      	subs	r5, r0, #0
 800b1b0:	d112      	bne.n	800b1d8 <__mdiff+0x3c>
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff fd63 	bl	800ac80 <_Balloc>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	b928      	cbnz	r0, 800b1ca <__mdiff+0x2e>
 800b1be:	4b3f      	ldr	r3, [pc, #252]	@ (800b2bc <__mdiff+0x120>)
 800b1c0:	f240 2137 	movw	r1, #567	@ 0x237
 800b1c4:	483e      	ldr	r0, [pc, #248]	@ (800b2c0 <__mdiff+0x124>)
 800b1c6:	f000 fb03 	bl	800b7d0 <__assert_func>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	b003      	add	sp, #12
 800b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d8:	bfbc      	itt	lt
 800b1da:	464b      	movlt	r3, r9
 800b1dc:	46a1      	movlt	r9, r4
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1e4:	bfba      	itte	lt
 800b1e6:	461c      	movlt	r4, r3
 800b1e8:	2501      	movlt	r5, #1
 800b1ea:	2500      	movge	r5, #0
 800b1ec:	f7ff fd48 	bl	800ac80 <_Balloc>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	b918      	cbnz	r0, 800b1fc <__mdiff+0x60>
 800b1f4:	4b31      	ldr	r3, [pc, #196]	@ (800b2bc <__mdiff+0x120>)
 800b1f6:	f240 2145 	movw	r1, #581	@ 0x245
 800b1fa:	e7e3      	b.n	800b1c4 <__mdiff+0x28>
 800b1fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b200:	6926      	ldr	r6, [r4, #16]
 800b202:	60c5      	str	r5, [r0, #12]
 800b204:	f109 0310 	add.w	r3, r9, #16
 800b208:	f109 0514 	add.w	r5, r9, #20
 800b20c:	f104 0e14 	add.w	lr, r4, #20
 800b210:	f100 0b14 	add.w	fp, r0, #20
 800b214:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b218:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	46d9      	mov	r9, fp
 800b220:	f04f 0c00 	mov.w	ip, #0
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b22a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	fa1f f38a 	uxth.w	r3, sl
 800b234:	4619      	mov	r1, r3
 800b236:	b283      	uxth	r3, r0
 800b238:	1acb      	subs	r3, r1, r3
 800b23a:	0c00      	lsrs	r0, r0, #16
 800b23c:	4463      	add	r3, ip
 800b23e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b242:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b246:	b29b      	uxth	r3, r3
 800b248:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b24c:	4576      	cmp	r6, lr
 800b24e:	f849 3b04 	str.w	r3, [r9], #4
 800b252:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b256:	d8e5      	bhi.n	800b224 <__mdiff+0x88>
 800b258:	1b33      	subs	r3, r6, r4
 800b25a:	3b15      	subs	r3, #21
 800b25c:	f023 0303 	bic.w	r3, r3, #3
 800b260:	3415      	adds	r4, #21
 800b262:	3304      	adds	r3, #4
 800b264:	42a6      	cmp	r6, r4
 800b266:	bf38      	it	cc
 800b268:	2304      	movcc	r3, #4
 800b26a:	441d      	add	r5, r3
 800b26c:	445b      	add	r3, fp
 800b26e:	461e      	mov	r6, r3
 800b270:	462c      	mov	r4, r5
 800b272:	4544      	cmp	r4, r8
 800b274:	d30e      	bcc.n	800b294 <__mdiff+0xf8>
 800b276:	f108 0103 	add.w	r1, r8, #3
 800b27a:	1b49      	subs	r1, r1, r5
 800b27c:	f021 0103 	bic.w	r1, r1, #3
 800b280:	3d03      	subs	r5, #3
 800b282:	45a8      	cmp	r8, r5
 800b284:	bf38      	it	cc
 800b286:	2100      	movcc	r1, #0
 800b288:	440b      	add	r3, r1
 800b28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b28e:	b191      	cbz	r1, 800b2b6 <__mdiff+0x11a>
 800b290:	6117      	str	r7, [r2, #16]
 800b292:	e79d      	b.n	800b1d0 <__mdiff+0x34>
 800b294:	f854 1b04 	ldr.w	r1, [r4], #4
 800b298:	46e6      	mov	lr, ip
 800b29a:	0c08      	lsrs	r0, r1, #16
 800b29c:	fa1c fc81 	uxtah	ip, ip, r1
 800b2a0:	4471      	add	r1, lr
 800b2a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2a6:	b289      	uxth	r1, r1
 800b2a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2ac:	f846 1b04 	str.w	r1, [r6], #4
 800b2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2b4:	e7dd      	b.n	800b272 <__mdiff+0xd6>
 800b2b6:	3f01      	subs	r7, #1
 800b2b8:	e7e7      	b.n	800b28a <__mdiff+0xee>
 800b2ba:	bf00      	nop
 800b2bc:	0800c098 	.word	0x0800c098
 800b2c0:	0800c0a9 	.word	0x0800c0a9

0800b2c4 <__d2b>:
 800b2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	ec59 8b10 	vmov	r8, r9, d0
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	f7ff fcd5 	bl	800ac80 <_Balloc>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	b930      	cbnz	r0, 800b2e8 <__d2b+0x24>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4b23      	ldr	r3, [pc, #140]	@ (800b36c <__d2b+0xa8>)
 800b2de:	4824      	ldr	r0, [pc, #144]	@ (800b370 <__d2b+0xac>)
 800b2e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b2e4:	f000 fa74 	bl	800b7d0 <__assert_func>
 800b2e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2f0:	b10d      	cbz	r5, 800b2f6 <__d2b+0x32>
 800b2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b2fc:	d023      	beq.n	800b346 <__d2b+0x82>
 800b2fe:	4668      	mov	r0, sp
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	f7ff fd84 	bl	800ae0e <__lo0bits>
 800b306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b30a:	b1d0      	cbz	r0, 800b342 <__d2b+0x7e>
 800b30c:	f1c0 0320 	rsb	r3, r0, #32
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	430b      	orrs	r3, r1
 800b316:	40c2      	lsrs	r2, r0
 800b318:	6163      	str	r3, [r4, #20]
 800b31a:	9201      	str	r2, [sp, #4]
 800b31c:	9b01      	ldr	r3, [sp, #4]
 800b31e:	61a3      	str	r3, [r4, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bf0c      	ite	eq
 800b324:	2201      	moveq	r2, #1
 800b326:	2202      	movne	r2, #2
 800b328:	6122      	str	r2, [r4, #16]
 800b32a:	b1a5      	cbz	r5, 800b356 <__d2b+0x92>
 800b32c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b330:	4405      	add	r5, r0
 800b332:	603d      	str	r5, [r7, #0]
 800b334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b338:	6030      	str	r0, [r6, #0]
 800b33a:	4620      	mov	r0, r4
 800b33c:	b003      	add	sp, #12
 800b33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b342:	6161      	str	r1, [r4, #20]
 800b344:	e7ea      	b.n	800b31c <__d2b+0x58>
 800b346:	a801      	add	r0, sp, #4
 800b348:	f7ff fd61 	bl	800ae0e <__lo0bits>
 800b34c:	9b01      	ldr	r3, [sp, #4]
 800b34e:	6163      	str	r3, [r4, #20]
 800b350:	3020      	adds	r0, #32
 800b352:	2201      	movs	r2, #1
 800b354:	e7e8      	b.n	800b328 <__d2b+0x64>
 800b356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b35e:	6038      	str	r0, [r7, #0]
 800b360:	6918      	ldr	r0, [r3, #16]
 800b362:	f7ff fd35 	bl	800add0 <__hi0bits>
 800b366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b36a:	e7e5      	b.n	800b338 <__d2b+0x74>
 800b36c:	0800c098 	.word	0x0800c098
 800b370:	0800c0a9 	.word	0x0800c0a9

0800b374 <__ssputs_r>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	688e      	ldr	r6, [r1, #8]
 800b37a:	461f      	mov	r7, r3
 800b37c:	42be      	cmp	r6, r7
 800b37e:	680b      	ldr	r3, [r1, #0]
 800b380:	4682      	mov	sl, r0
 800b382:	460c      	mov	r4, r1
 800b384:	4690      	mov	r8, r2
 800b386:	d82d      	bhi.n	800b3e4 <__ssputs_r+0x70>
 800b388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b38c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b390:	d026      	beq.n	800b3e0 <__ssputs_r+0x6c>
 800b392:	6965      	ldr	r5, [r4, #20]
 800b394:	6909      	ldr	r1, [r1, #16]
 800b396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b39a:	eba3 0901 	sub.w	r9, r3, r1
 800b39e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a2:	1c7b      	adds	r3, r7, #1
 800b3a4:	444b      	add	r3, r9
 800b3a6:	106d      	asrs	r5, r5, #1
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	bf38      	it	cc
 800b3ac:	461d      	movcc	r5, r3
 800b3ae:	0553      	lsls	r3, r2, #21
 800b3b0:	d527      	bpl.n	800b402 <__ssputs_r+0x8e>
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	f7ff fbd8 	bl	800ab68 <_malloc_r>
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	b360      	cbz	r0, 800b416 <__ssputs_r+0xa2>
 800b3bc:	6921      	ldr	r1, [r4, #16]
 800b3be:	464a      	mov	r2, r9
 800b3c0:	f7fe fcf5 	bl	8009dae <memcpy>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	6126      	str	r6, [r4, #16]
 800b3d2:	6165      	str	r5, [r4, #20]
 800b3d4:	444e      	add	r6, r9
 800b3d6:	eba5 0509 	sub.w	r5, r5, r9
 800b3da:	6026      	str	r6, [r4, #0]
 800b3dc:	60a5      	str	r5, [r4, #8]
 800b3de:	463e      	mov	r6, r7
 800b3e0:	42be      	cmp	r6, r7
 800b3e2:	d900      	bls.n	800b3e6 <__ssputs_r+0x72>
 800b3e4:	463e      	mov	r6, r7
 800b3e6:	6820      	ldr	r0, [r4, #0]
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	4641      	mov	r1, r8
 800b3ec:	f000 f9c6 	bl	800b77c <memmove>
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	1b9b      	subs	r3, r3, r6
 800b3f4:	60a3      	str	r3, [r4, #8]
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	4433      	add	r3, r6
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	462a      	mov	r2, r5
 800b404:	f000 fa28 	bl	800b858 <_realloc_r>
 800b408:	4606      	mov	r6, r0
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d1e0      	bne.n	800b3d0 <__ssputs_r+0x5c>
 800b40e:	6921      	ldr	r1, [r4, #16]
 800b410:	4650      	mov	r0, sl
 800b412:	f7ff fb35 	bl	800aa80 <_free_r>
 800b416:	230c      	movs	r3, #12
 800b418:	f8ca 3000 	str.w	r3, [sl]
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b422:	81a3      	strh	r3, [r4, #12]
 800b424:	f04f 30ff 	mov.w	r0, #4294967295
 800b428:	e7e9      	b.n	800b3fe <__ssputs_r+0x8a>
	...

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	4698      	mov	r8, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	061b      	lsls	r3, r3, #24
 800b436:	b09d      	sub	sp, #116	@ 0x74
 800b438:	4607      	mov	r7, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	4614      	mov	r4, r2
 800b43e:	d510      	bpl.n	800b462 <_svfiprintf_r+0x36>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b973      	cbnz	r3, 800b462 <_svfiprintf_r+0x36>
 800b444:	2140      	movs	r1, #64	@ 0x40
 800b446:	f7ff fb8f 	bl	800ab68 <_malloc_r>
 800b44a:	6028      	str	r0, [r5, #0]
 800b44c:	6128      	str	r0, [r5, #16]
 800b44e:	b930      	cbnz	r0, 800b45e <_svfiprintf_r+0x32>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	b01d      	add	sp, #116	@ 0x74
 800b45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45e:	2340      	movs	r3, #64	@ 0x40
 800b460:	616b      	str	r3, [r5, #20]
 800b462:	2300      	movs	r3, #0
 800b464:	9309      	str	r3, [sp, #36]	@ 0x24
 800b466:	2320      	movs	r3, #32
 800b468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b470:	2330      	movs	r3, #48	@ 0x30
 800b472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b610 <_svfiprintf_r+0x1e4>
 800b476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b47a:	f04f 0901 	mov.w	r9, #1
 800b47e:	4623      	mov	r3, r4
 800b480:	469a      	mov	sl, r3
 800b482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b486:	b10a      	cbz	r2, 800b48c <_svfiprintf_r+0x60>
 800b488:	2a25      	cmp	r2, #37	@ 0x25
 800b48a:	d1f9      	bne.n	800b480 <_svfiprintf_r+0x54>
 800b48c:	ebba 0b04 	subs.w	fp, sl, r4
 800b490:	d00b      	beq.n	800b4aa <_svfiprintf_r+0x7e>
 800b492:	465b      	mov	r3, fp
 800b494:	4622      	mov	r2, r4
 800b496:	4629      	mov	r1, r5
 800b498:	4638      	mov	r0, r7
 800b49a:	f7ff ff6b 	bl	800b374 <__ssputs_r>
 800b49e:	3001      	adds	r0, #1
 800b4a0:	f000 80a7 	beq.w	800b5f2 <_svfiprintf_r+0x1c6>
 800b4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a6:	445a      	add	r2, fp
 800b4a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 809f 	beq.w	800b5f2 <_svfiprintf_r+0x1c6>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4be:	f10a 0a01 	add.w	sl, sl, #1
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	9307      	str	r3, [sp, #28]
 800b4c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4cc:	4654      	mov	r4, sl
 800b4ce:	2205      	movs	r2, #5
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	484e      	ldr	r0, [pc, #312]	@ (800b610 <_svfiprintf_r+0x1e4>)
 800b4d6:	f7f4 fe9b 	bl	8000210 <memchr>
 800b4da:	9a04      	ldr	r2, [sp, #16]
 800b4dc:	b9d8      	cbnz	r0, 800b516 <_svfiprintf_r+0xea>
 800b4de:	06d0      	lsls	r0, r2, #27
 800b4e0:	bf44      	itt	mi
 800b4e2:	2320      	movmi	r3, #32
 800b4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e8:	0711      	lsls	r1, r2, #28
 800b4ea:	bf44      	itt	mi
 800b4ec:	232b      	movmi	r3, #43	@ 0x2b
 800b4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f8:	d015      	beq.n	800b526 <_svfiprintf_r+0xfa>
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	4654      	mov	r4, sl
 800b4fe:	2000      	movs	r0, #0
 800b500:	f04f 0c0a 	mov.w	ip, #10
 800b504:	4621      	mov	r1, r4
 800b506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b50a:	3b30      	subs	r3, #48	@ 0x30
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	d94b      	bls.n	800b5a8 <_svfiprintf_r+0x17c>
 800b510:	b1b0      	cbz	r0, 800b540 <_svfiprintf_r+0x114>
 800b512:	9207      	str	r2, [sp, #28]
 800b514:	e014      	b.n	800b540 <_svfiprintf_r+0x114>
 800b516:	eba0 0308 	sub.w	r3, r0, r8
 800b51a:	fa09 f303 	lsl.w	r3, r9, r3
 800b51e:	4313      	orrs	r3, r2
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	46a2      	mov	sl, r4
 800b524:	e7d2      	b.n	800b4cc <_svfiprintf_r+0xa0>
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	1d19      	adds	r1, r3, #4
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	9103      	str	r1, [sp, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfbb      	ittet	lt
 800b532:	425b      	neglt	r3, r3
 800b534:	f042 0202 	orrlt.w	r2, r2, #2
 800b538:	9307      	strge	r3, [sp, #28]
 800b53a:	9307      	strlt	r3, [sp, #28]
 800b53c:	bfb8      	it	lt
 800b53e:	9204      	strlt	r2, [sp, #16]
 800b540:	7823      	ldrb	r3, [r4, #0]
 800b542:	2b2e      	cmp	r3, #46	@ 0x2e
 800b544:	d10a      	bne.n	800b55c <_svfiprintf_r+0x130>
 800b546:	7863      	ldrb	r3, [r4, #1]
 800b548:	2b2a      	cmp	r3, #42	@ 0x2a
 800b54a:	d132      	bne.n	800b5b2 <_svfiprintf_r+0x186>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	9203      	str	r2, [sp, #12]
 800b554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b558:	3402      	adds	r4, #2
 800b55a:	9305      	str	r3, [sp, #20]
 800b55c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b620 <_svfiprintf_r+0x1f4>
 800b560:	7821      	ldrb	r1, [r4, #0]
 800b562:	2203      	movs	r2, #3
 800b564:	4650      	mov	r0, sl
 800b566:	f7f4 fe53 	bl	8000210 <memchr>
 800b56a:	b138      	cbz	r0, 800b57c <_svfiprintf_r+0x150>
 800b56c:	9b04      	ldr	r3, [sp, #16]
 800b56e:	eba0 000a 	sub.w	r0, r0, sl
 800b572:	2240      	movs	r2, #64	@ 0x40
 800b574:	4082      	lsls	r2, r0
 800b576:	4313      	orrs	r3, r2
 800b578:	3401      	adds	r4, #1
 800b57a:	9304      	str	r3, [sp, #16]
 800b57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b580:	4824      	ldr	r0, [pc, #144]	@ (800b614 <_svfiprintf_r+0x1e8>)
 800b582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b586:	2206      	movs	r2, #6
 800b588:	f7f4 fe42 	bl	8000210 <memchr>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d036      	beq.n	800b5fe <_svfiprintf_r+0x1d2>
 800b590:	4b21      	ldr	r3, [pc, #132]	@ (800b618 <_svfiprintf_r+0x1ec>)
 800b592:	bb1b      	cbnz	r3, 800b5dc <_svfiprintf_r+0x1b0>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	3307      	adds	r3, #7
 800b598:	f023 0307 	bic.w	r3, r3, #7
 800b59c:	3308      	adds	r3, #8
 800b59e:	9303      	str	r3, [sp, #12]
 800b5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a2:	4433      	add	r3, r6
 800b5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5a6:	e76a      	b.n	800b47e <_svfiprintf_r+0x52>
 800b5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e7a8      	b.n	800b504 <_svfiprintf_r+0xd8>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	3401      	adds	r4, #1
 800b5b6:	9305      	str	r3, [sp, #20]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	f04f 0c0a 	mov.w	ip, #10
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c4:	3a30      	subs	r2, #48	@ 0x30
 800b5c6:	2a09      	cmp	r2, #9
 800b5c8:	d903      	bls.n	800b5d2 <_svfiprintf_r+0x1a6>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0c6      	beq.n	800b55c <_svfiprintf_r+0x130>
 800b5ce:	9105      	str	r1, [sp, #20]
 800b5d0:	e7c4      	b.n	800b55c <_svfiprintf_r+0x130>
 800b5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e7f0      	b.n	800b5be <_svfiprintf_r+0x192>
 800b5dc:	ab03      	add	r3, sp, #12
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	462a      	mov	r2, r5
 800b5e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b61c <_svfiprintf_r+0x1f0>)
 800b5e4:	a904      	add	r1, sp, #16
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f7fd fe26 	bl	8009238 <_printf_float>
 800b5ec:	1c42      	adds	r2, r0, #1
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	d1d6      	bne.n	800b5a0 <_svfiprintf_r+0x174>
 800b5f2:	89ab      	ldrh	r3, [r5, #12]
 800b5f4:	065b      	lsls	r3, r3, #25
 800b5f6:	f53f af2d 	bmi.w	800b454 <_svfiprintf_r+0x28>
 800b5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5fc:	e72c      	b.n	800b458 <_svfiprintf_r+0x2c>
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <_svfiprintf_r+0x1f0>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4638      	mov	r0, r7
 800b60a:	f7fe f8ad 	bl	8009768 <_printf_i>
 800b60e:	e7ed      	b.n	800b5ec <_svfiprintf_r+0x1c0>
 800b610:	0800c102 	.word	0x0800c102
 800b614:	0800c10c 	.word	0x0800c10c
 800b618:	08009239 	.word	0x08009239
 800b61c:	0800b375 	.word	0x0800b375
 800b620:	0800c108 	.word	0x0800c108

0800b624 <__sflush_r>:
 800b624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	0716      	lsls	r6, r2, #28
 800b62e:	4605      	mov	r5, r0
 800b630:	460c      	mov	r4, r1
 800b632:	d454      	bmi.n	800b6de <__sflush_r+0xba>
 800b634:	684b      	ldr	r3, [r1, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	dc02      	bgt.n	800b640 <__sflush_r+0x1c>
 800b63a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dd48      	ble.n	800b6d2 <__sflush_r+0xae>
 800b640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b642:	2e00      	cmp	r6, #0
 800b644:	d045      	beq.n	800b6d2 <__sflush_r+0xae>
 800b646:	2300      	movs	r3, #0
 800b648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b64c:	682f      	ldr	r7, [r5, #0]
 800b64e:	6a21      	ldr	r1, [r4, #32]
 800b650:	602b      	str	r3, [r5, #0]
 800b652:	d030      	beq.n	800b6b6 <__sflush_r+0x92>
 800b654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	0759      	lsls	r1, r3, #29
 800b65a:	d505      	bpl.n	800b668 <__sflush_r+0x44>
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	1ad2      	subs	r2, r2, r3
 800b660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b662:	b10b      	cbz	r3, 800b668 <__sflush_r+0x44>
 800b664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	2300      	movs	r3, #0
 800b66a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b66c:	6a21      	ldr	r1, [r4, #32]
 800b66e:	4628      	mov	r0, r5
 800b670:	47b0      	blx	r6
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	d106      	bne.n	800b686 <__sflush_r+0x62>
 800b678:	6829      	ldr	r1, [r5, #0]
 800b67a:	291d      	cmp	r1, #29
 800b67c:	d82b      	bhi.n	800b6d6 <__sflush_r+0xb2>
 800b67e:	4a2a      	ldr	r2, [pc, #168]	@ (800b728 <__sflush_r+0x104>)
 800b680:	40ca      	lsrs	r2, r1
 800b682:	07d6      	lsls	r6, r2, #31
 800b684:	d527      	bpl.n	800b6d6 <__sflush_r+0xb2>
 800b686:	2200      	movs	r2, #0
 800b688:	6062      	str	r2, [r4, #4]
 800b68a:	04d9      	lsls	r1, r3, #19
 800b68c:	6922      	ldr	r2, [r4, #16]
 800b68e:	6022      	str	r2, [r4, #0]
 800b690:	d504      	bpl.n	800b69c <__sflush_r+0x78>
 800b692:	1c42      	adds	r2, r0, #1
 800b694:	d101      	bne.n	800b69a <__sflush_r+0x76>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	b903      	cbnz	r3, 800b69c <__sflush_r+0x78>
 800b69a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b69e:	602f      	str	r7, [r5, #0]
 800b6a0:	b1b9      	cbz	r1, 800b6d2 <__sflush_r+0xae>
 800b6a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6a6:	4299      	cmp	r1, r3
 800b6a8:	d002      	beq.n	800b6b0 <__sflush_r+0x8c>
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7ff f9e8 	bl	800aa80 <_free_r>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6b4:	e00d      	b.n	800b6d2 <__sflush_r+0xae>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	47b0      	blx	r6
 800b6bc:	4602      	mov	r2, r0
 800b6be:	1c50      	adds	r0, r2, #1
 800b6c0:	d1c9      	bne.n	800b656 <__sflush_r+0x32>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0c6      	beq.n	800b656 <__sflush_r+0x32>
 800b6c8:	2b1d      	cmp	r3, #29
 800b6ca:	d001      	beq.n	800b6d0 <__sflush_r+0xac>
 800b6cc:	2b16      	cmp	r3, #22
 800b6ce:	d11e      	bne.n	800b70e <__sflush_r+0xea>
 800b6d0:	602f      	str	r7, [r5, #0]
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e022      	b.n	800b71c <__sflush_r+0xf8>
 800b6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6da:	b21b      	sxth	r3, r3
 800b6dc:	e01b      	b.n	800b716 <__sflush_r+0xf2>
 800b6de:	690f      	ldr	r7, [r1, #16]
 800b6e0:	2f00      	cmp	r7, #0
 800b6e2:	d0f6      	beq.n	800b6d2 <__sflush_r+0xae>
 800b6e4:	0793      	lsls	r3, r2, #30
 800b6e6:	680e      	ldr	r6, [r1, #0]
 800b6e8:	bf08      	it	eq
 800b6ea:	694b      	ldreq	r3, [r1, #20]
 800b6ec:	600f      	str	r7, [r1, #0]
 800b6ee:	bf18      	it	ne
 800b6f0:	2300      	movne	r3, #0
 800b6f2:	eba6 0807 	sub.w	r8, r6, r7
 800b6f6:	608b      	str	r3, [r1, #8]
 800b6f8:	f1b8 0f00 	cmp.w	r8, #0
 800b6fc:	dde9      	ble.n	800b6d2 <__sflush_r+0xae>
 800b6fe:	6a21      	ldr	r1, [r4, #32]
 800b700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b702:	4643      	mov	r3, r8
 800b704:	463a      	mov	r2, r7
 800b706:	4628      	mov	r0, r5
 800b708:	47b0      	blx	r6
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dc08      	bgt.n	800b720 <__sflush_r+0xfc>
 800b70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b716:	81a3      	strh	r3, [r4, #12]
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b720:	4407      	add	r7, r0
 800b722:	eba8 0800 	sub.w	r8, r8, r0
 800b726:	e7e7      	b.n	800b6f8 <__sflush_r+0xd4>
 800b728:	20400001 	.word	0x20400001

0800b72c <_fflush_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	690b      	ldr	r3, [r1, #16]
 800b730:	4605      	mov	r5, r0
 800b732:	460c      	mov	r4, r1
 800b734:	b913      	cbnz	r3, 800b73c <_fflush_r+0x10>
 800b736:	2500      	movs	r5, #0
 800b738:	4628      	mov	r0, r5
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	b118      	cbz	r0, 800b746 <_fflush_r+0x1a>
 800b73e:	6a03      	ldr	r3, [r0, #32]
 800b740:	b90b      	cbnz	r3, 800b746 <_fflush_r+0x1a>
 800b742:	f7fe f9bb 	bl	8009abc <__sinit>
 800b746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f3      	beq.n	800b736 <_fflush_r+0xa>
 800b74e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b750:	07d0      	lsls	r0, r2, #31
 800b752:	d404      	bmi.n	800b75e <_fflush_r+0x32>
 800b754:	0599      	lsls	r1, r3, #22
 800b756:	d402      	bmi.n	800b75e <_fflush_r+0x32>
 800b758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b75a:	f7fe fb26 	bl	8009daa <__retarget_lock_acquire_recursive>
 800b75e:	4628      	mov	r0, r5
 800b760:	4621      	mov	r1, r4
 800b762:	f7ff ff5f 	bl	800b624 <__sflush_r>
 800b766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b768:	07da      	lsls	r2, r3, #31
 800b76a:	4605      	mov	r5, r0
 800b76c:	d4e4      	bmi.n	800b738 <_fflush_r+0xc>
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	059b      	lsls	r3, r3, #22
 800b772:	d4e1      	bmi.n	800b738 <_fflush_r+0xc>
 800b774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b776:	f7fe fb19 	bl	8009dac <__retarget_lock_release_recursive>
 800b77a:	e7dd      	b.n	800b738 <_fflush_r+0xc>

0800b77c <memmove>:
 800b77c:	4288      	cmp	r0, r1
 800b77e:	b510      	push	{r4, lr}
 800b780:	eb01 0402 	add.w	r4, r1, r2
 800b784:	d902      	bls.n	800b78c <memmove+0x10>
 800b786:	4284      	cmp	r4, r0
 800b788:	4623      	mov	r3, r4
 800b78a:	d807      	bhi.n	800b79c <memmove+0x20>
 800b78c:	1e43      	subs	r3, r0, #1
 800b78e:	42a1      	cmp	r1, r4
 800b790:	d008      	beq.n	800b7a4 <memmove+0x28>
 800b792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b79a:	e7f8      	b.n	800b78e <memmove+0x12>
 800b79c:	4402      	add	r2, r0
 800b79e:	4601      	mov	r1, r0
 800b7a0:	428a      	cmp	r2, r1
 800b7a2:	d100      	bne.n	800b7a6 <memmove+0x2a>
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ae:	e7f7      	b.n	800b7a0 <memmove+0x24>

0800b7b0 <_sbrk_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d06      	ldr	r5, [pc, #24]	@ (800b7cc <_sbrk_r+0x1c>)
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	4608      	mov	r0, r1
 800b7ba:	602b      	str	r3, [r5, #0]
 800b7bc:	f7f6 faea 	bl	8001d94 <_sbrk>
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d102      	bne.n	800b7ca <_sbrk_r+0x1a>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	b103      	cbz	r3, 800b7ca <_sbrk_r+0x1a>
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	20004ec8 	.word	0x20004ec8

0800b7d0 <__assert_func>:
 800b7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7d2:	4614      	mov	r4, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b09      	ldr	r3, [pc, #36]	@ (800b7fc <__assert_func+0x2c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4605      	mov	r5, r0
 800b7dc:	68d8      	ldr	r0, [r3, #12]
 800b7de:	b14c      	cbz	r4, 800b7f4 <__assert_func+0x24>
 800b7e0:	4b07      	ldr	r3, [pc, #28]	@ (800b800 <__assert_func+0x30>)
 800b7e2:	9100      	str	r1, [sp, #0]
 800b7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7e8:	4906      	ldr	r1, [pc, #24]	@ (800b804 <__assert_func+0x34>)
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	f000 f870 	bl	800b8d0 <fiprintf>
 800b7f0:	f000 f880 	bl	800b8f4 <abort>
 800b7f4:	4b04      	ldr	r3, [pc, #16]	@ (800b808 <__assert_func+0x38>)
 800b7f6:	461c      	mov	r4, r3
 800b7f8:	e7f3      	b.n	800b7e2 <__assert_func+0x12>
 800b7fa:	bf00      	nop
 800b7fc:	2000001c 	.word	0x2000001c
 800b800:	0800c11d 	.word	0x0800c11d
 800b804:	0800c12a 	.word	0x0800c12a
 800b808:	0800c158 	.word	0x0800c158

0800b80c <_calloc_r>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	fba1 5402 	umull	r5, r4, r1, r2
 800b812:	b934      	cbnz	r4, 800b822 <_calloc_r+0x16>
 800b814:	4629      	mov	r1, r5
 800b816:	f7ff f9a7 	bl	800ab68 <_malloc_r>
 800b81a:	4606      	mov	r6, r0
 800b81c:	b928      	cbnz	r0, 800b82a <_calloc_r+0x1e>
 800b81e:	4630      	mov	r0, r6
 800b820:	bd70      	pop	{r4, r5, r6, pc}
 800b822:	220c      	movs	r2, #12
 800b824:	6002      	str	r2, [r0, #0]
 800b826:	2600      	movs	r6, #0
 800b828:	e7f9      	b.n	800b81e <_calloc_r+0x12>
 800b82a:	462a      	mov	r2, r5
 800b82c:	4621      	mov	r1, r4
 800b82e:	f7fe f9e0 	bl	8009bf2 <memset>
 800b832:	e7f4      	b.n	800b81e <_calloc_r+0x12>

0800b834 <__ascii_mbtowc>:
 800b834:	b082      	sub	sp, #8
 800b836:	b901      	cbnz	r1, 800b83a <__ascii_mbtowc+0x6>
 800b838:	a901      	add	r1, sp, #4
 800b83a:	b142      	cbz	r2, 800b84e <__ascii_mbtowc+0x1a>
 800b83c:	b14b      	cbz	r3, 800b852 <__ascii_mbtowc+0x1e>
 800b83e:	7813      	ldrb	r3, [r2, #0]
 800b840:	600b      	str	r3, [r1, #0]
 800b842:	7812      	ldrb	r2, [r2, #0]
 800b844:	1e10      	subs	r0, r2, #0
 800b846:	bf18      	it	ne
 800b848:	2001      	movne	r0, #1
 800b84a:	b002      	add	sp, #8
 800b84c:	4770      	bx	lr
 800b84e:	4610      	mov	r0, r2
 800b850:	e7fb      	b.n	800b84a <__ascii_mbtowc+0x16>
 800b852:	f06f 0001 	mvn.w	r0, #1
 800b856:	e7f8      	b.n	800b84a <__ascii_mbtowc+0x16>

0800b858 <_realloc_r>:
 800b858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85c:	4607      	mov	r7, r0
 800b85e:	4614      	mov	r4, r2
 800b860:	460d      	mov	r5, r1
 800b862:	b921      	cbnz	r1, 800b86e <_realloc_r+0x16>
 800b864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b868:	4611      	mov	r1, r2
 800b86a:	f7ff b97d 	b.w	800ab68 <_malloc_r>
 800b86e:	b92a      	cbnz	r2, 800b87c <_realloc_r+0x24>
 800b870:	f7ff f906 	bl	800aa80 <_free_r>
 800b874:	4625      	mov	r5, r4
 800b876:	4628      	mov	r0, r5
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	f000 f841 	bl	800b902 <_malloc_usable_size_r>
 800b880:	4284      	cmp	r4, r0
 800b882:	4606      	mov	r6, r0
 800b884:	d802      	bhi.n	800b88c <_realloc_r+0x34>
 800b886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88a:	d8f4      	bhi.n	800b876 <_realloc_r+0x1e>
 800b88c:	4621      	mov	r1, r4
 800b88e:	4638      	mov	r0, r7
 800b890:	f7ff f96a 	bl	800ab68 <_malloc_r>
 800b894:	4680      	mov	r8, r0
 800b896:	b908      	cbnz	r0, 800b89c <_realloc_r+0x44>
 800b898:	4645      	mov	r5, r8
 800b89a:	e7ec      	b.n	800b876 <_realloc_r+0x1e>
 800b89c:	42b4      	cmp	r4, r6
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	bf28      	it	cs
 800b8a4:	4632      	movcs	r2, r6
 800b8a6:	f7fe fa82 	bl	8009dae <memcpy>
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff f8e7 	bl	800aa80 <_free_r>
 800b8b2:	e7f1      	b.n	800b898 <_realloc_r+0x40>

0800b8b4 <__ascii_wctomb>:
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	b141      	cbz	r1, 800b8cc <__ascii_wctomb+0x18>
 800b8ba:	2aff      	cmp	r2, #255	@ 0xff
 800b8bc:	d904      	bls.n	800b8c8 <__ascii_wctomb+0x14>
 800b8be:	228a      	movs	r2, #138	@ 0x8a
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c6:	4770      	bx	lr
 800b8c8:	700a      	strb	r2, [r1, #0]
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <fiprintf>:
 800b8d0:	b40e      	push	{r1, r2, r3}
 800b8d2:	b503      	push	{r0, r1, lr}
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	4805      	ldr	r0, [pc, #20]	@ (800b8f0 <fiprintf+0x20>)
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	f000 f83f 	bl	800b964 <_vfiprintf_r>
 800b8e6:	b002      	add	sp, #8
 800b8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8ec:	b003      	add	sp, #12
 800b8ee:	4770      	bx	lr
 800b8f0:	2000001c 	.word	0x2000001c

0800b8f4 <abort>:
 800b8f4:	b508      	push	{r3, lr}
 800b8f6:	2006      	movs	r0, #6
 800b8f8:	f000 fa08 	bl	800bd0c <raise>
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	f7f6 f9d1 	bl	8001ca4 <_exit>

0800b902 <_malloc_usable_size_r>:
 800b902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b906:	1f18      	subs	r0, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfbc      	itt	lt
 800b90c:	580b      	ldrlt	r3, [r1, r0]
 800b90e:	18c0      	addlt	r0, r0, r3
 800b910:	4770      	bx	lr

0800b912 <__sfputc_r>:
 800b912:	6893      	ldr	r3, [r2, #8]
 800b914:	3b01      	subs	r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	b410      	push	{r4}
 800b91a:	6093      	str	r3, [r2, #8]
 800b91c:	da08      	bge.n	800b930 <__sfputc_r+0x1e>
 800b91e:	6994      	ldr	r4, [r2, #24]
 800b920:	42a3      	cmp	r3, r4
 800b922:	db01      	blt.n	800b928 <__sfputc_r+0x16>
 800b924:	290a      	cmp	r1, #10
 800b926:	d103      	bne.n	800b930 <__sfputc_r+0x1e>
 800b928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92c:	f000 b932 	b.w	800bb94 <__swbuf_r>
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	1c58      	adds	r0, r3, #1
 800b934:	6010      	str	r0, [r2, #0]
 800b936:	7019      	strb	r1, [r3, #0]
 800b938:	4608      	mov	r0, r1
 800b93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <__sfputs_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	4614      	mov	r4, r2
 800b948:	18d5      	adds	r5, r2, r3
 800b94a:	42ac      	cmp	r4, r5
 800b94c:	d101      	bne.n	800b952 <__sfputs_r+0x12>
 800b94e:	2000      	movs	r0, #0
 800b950:	e007      	b.n	800b962 <__sfputs_r+0x22>
 800b952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b956:	463a      	mov	r2, r7
 800b958:	4630      	mov	r0, r6
 800b95a:	f7ff ffda 	bl	800b912 <__sfputc_r>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d1f3      	bne.n	800b94a <__sfputs_r+0xa>
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b964 <_vfiprintf_r>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	460d      	mov	r5, r1
 800b96a:	b09d      	sub	sp, #116	@ 0x74
 800b96c:	4614      	mov	r4, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	4606      	mov	r6, r0
 800b972:	b118      	cbz	r0, 800b97c <_vfiprintf_r+0x18>
 800b974:	6a03      	ldr	r3, [r0, #32]
 800b976:	b90b      	cbnz	r3, 800b97c <_vfiprintf_r+0x18>
 800b978:	f7fe f8a0 	bl	8009abc <__sinit>
 800b97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b97e:	07d9      	lsls	r1, r3, #31
 800b980:	d405      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	059a      	lsls	r2, r3, #22
 800b986:	d402      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b98a:	f7fe fa0e 	bl	8009daa <__retarget_lock_acquire_recursive>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	071b      	lsls	r3, r3, #28
 800b992:	d501      	bpl.n	800b998 <_vfiprintf_r+0x34>
 800b994:	692b      	ldr	r3, [r5, #16]
 800b996:	b99b      	cbnz	r3, 800b9c0 <_vfiprintf_r+0x5c>
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f000 f938 	bl	800bc10 <__swsetup_r>
 800b9a0:	b170      	cbz	r0, 800b9c0 <_vfiprintf_r+0x5c>
 800b9a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9a4:	07dc      	lsls	r4, r3, #31
 800b9a6:	d504      	bpl.n	800b9b2 <_vfiprintf_r+0x4e>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	b01d      	add	sp, #116	@ 0x74
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	89ab      	ldrh	r3, [r5, #12]
 800b9b4:	0598      	lsls	r0, r3, #22
 800b9b6:	d4f7      	bmi.n	800b9a8 <_vfiprintf_r+0x44>
 800b9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9ba:	f7fe f9f7 	bl	8009dac <__retarget_lock_release_recursive>
 800b9be:	e7f3      	b.n	800b9a8 <_vfiprintf_r+0x44>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c4:	2320      	movs	r3, #32
 800b9c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ce:	2330      	movs	r3, #48	@ 0x30
 800b9d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb80 <_vfiprintf_r+0x21c>
 800b9d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9d8:	f04f 0901 	mov.w	r9, #1
 800b9dc:	4623      	mov	r3, r4
 800b9de:	469a      	mov	sl, r3
 800b9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e4:	b10a      	cbz	r2, 800b9ea <_vfiprintf_r+0x86>
 800b9e6:	2a25      	cmp	r2, #37	@ 0x25
 800b9e8:	d1f9      	bne.n	800b9de <_vfiprintf_r+0x7a>
 800b9ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ee:	d00b      	beq.n	800ba08 <_vfiprintf_r+0xa4>
 800b9f0:	465b      	mov	r3, fp
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ffa2 	bl	800b940 <__sfputs_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f000 80a7 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba04:	445a      	add	r2, fp
 800ba06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba08:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 809f 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295
 800ba18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba1c:	f10a 0a01 	add.w	sl, sl, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba2a:	4654      	mov	r4, sl
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4853      	ldr	r0, [pc, #332]	@ (800bb80 <_vfiprintf_r+0x21c>)
 800ba34:	f7f4 fbec 	bl	8000210 <memchr>
 800ba38:	9a04      	ldr	r2, [sp, #16]
 800ba3a:	b9d8      	cbnz	r0, 800ba74 <_vfiprintf_r+0x110>
 800ba3c:	06d1      	lsls	r1, r2, #27
 800ba3e:	bf44      	itt	mi
 800ba40:	2320      	movmi	r3, #32
 800ba42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba46:	0713      	lsls	r3, r2, #28
 800ba48:	bf44      	itt	mi
 800ba4a:	232b      	movmi	r3, #43	@ 0x2b
 800ba4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba50:	f89a 3000 	ldrb.w	r3, [sl]
 800ba54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba56:	d015      	beq.n	800ba84 <_vfiprintf_r+0x120>
 800ba58:	9a07      	ldr	r2, [sp, #28]
 800ba5a:	4654      	mov	r4, sl
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f04f 0c0a 	mov.w	ip, #10
 800ba62:	4621      	mov	r1, r4
 800ba64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba68:	3b30      	subs	r3, #48	@ 0x30
 800ba6a:	2b09      	cmp	r3, #9
 800ba6c:	d94b      	bls.n	800bb06 <_vfiprintf_r+0x1a2>
 800ba6e:	b1b0      	cbz	r0, 800ba9e <_vfiprintf_r+0x13a>
 800ba70:	9207      	str	r2, [sp, #28]
 800ba72:	e014      	b.n	800ba9e <_vfiprintf_r+0x13a>
 800ba74:	eba0 0308 	sub.w	r3, r0, r8
 800ba78:	fa09 f303 	lsl.w	r3, r9, r3
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	46a2      	mov	sl, r4
 800ba82:	e7d2      	b.n	800ba2a <_vfiprintf_r+0xc6>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	1d19      	adds	r1, r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	9103      	str	r1, [sp, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bfbb      	ittet	lt
 800ba90:	425b      	neglt	r3, r3
 800ba92:	f042 0202 	orrlt.w	r2, r2, #2
 800ba96:	9307      	strge	r3, [sp, #28]
 800ba98:	9307      	strlt	r3, [sp, #28]
 800ba9a:	bfb8      	it	lt
 800ba9c:	9204      	strlt	r2, [sp, #16]
 800ba9e:	7823      	ldrb	r3, [r4, #0]
 800baa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800baa2:	d10a      	bne.n	800baba <_vfiprintf_r+0x156>
 800baa4:	7863      	ldrb	r3, [r4, #1]
 800baa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800baa8:	d132      	bne.n	800bb10 <_vfiprintf_r+0x1ac>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	1d1a      	adds	r2, r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	9203      	str	r2, [sp, #12]
 800bab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bab6:	3402      	adds	r4, #2
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb90 <_vfiprintf_r+0x22c>
 800babe:	7821      	ldrb	r1, [r4, #0]
 800bac0:	2203      	movs	r2, #3
 800bac2:	4650      	mov	r0, sl
 800bac4:	f7f4 fba4 	bl	8000210 <memchr>
 800bac8:	b138      	cbz	r0, 800bada <_vfiprintf_r+0x176>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	eba0 000a 	sub.w	r0, r0, sl
 800bad0:	2240      	movs	r2, #64	@ 0x40
 800bad2:	4082      	lsls	r2, r0
 800bad4:	4313      	orrs	r3, r2
 800bad6:	3401      	adds	r4, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bade:	4829      	ldr	r0, [pc, #164]	@ (800bb84 <_vfiprintf_r+0x220>)
 800bae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bae4:	2206      	movs	r2, #6
 800bae6:	f7f4 fb93 	bl	8000210 <memchr>
 800baea:	2800      	cmp	r0, #0
 800baec:	d03f      	beq.n	800bb6e <_vfiprintf_r+0x20a>
 800baee:	4b26      	ldr	r3, [pc, #152]	@ (800bb88 <_vfiprintf_r+0x224>)
 800baf0:	bb1b      	cbnz	r3, 800bb3a <_vfiprintf_r+0x1d6>
 800baf2:	9b03      	ldr	r3, [sp, #12]
 800baf4:	3307      	adds	r3, #7
 800baf6:	f023 0307 	bic.w	r3, r3, #7
 800bafa:	3308      	adds	r3, #8
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	443b      	add	r3, r7
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb04:	e76a      	b.n	800b9dc <_vfiprintf_r+0x78>
 800bb06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	e7a8      	b.n	800ba62 <_vfiprintf_r+0xfe>
 800bb10:	2300      	movs	r3, #0
 800bb12:	3401      	adds	r4, #1
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	4619      	mov	r1, r3
 800bb18:	f04f 0c0a 	mov.w	ip, #10
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb22:	3a30      	subs	r2, #48	@ 0x30
 800bb24:	2a09      	cmp	r2, #9
 800bb26:	d903      	bls.n	800bb30 <_vfiprintf_r+0x1cc>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0c6      	beq.n	800baba <_vfiprintf_r+0x156>
 800bb2c:	9105      	str	r1, [sp, #20]
 800bb2e:	e7c4      	b.n	800baba <_vfiprintf_r+0x156>
 800bb30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb34:	4604      	mov	r4, r0
 800bb36:	2301      	movs	r3, #1
 800bb38:	e7f0      	b.n	800bb1c <_vfiprintf_r+0x1b8>
 800bb3a:	ab03      	add	r3, sp, #12
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4b12      	ldr	r3, [pc, #72]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb42:	a904      	add	r1, sp, #16
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7fd fb77 	bl	8009238 <_printf_float>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	1c78      	adds	r0, r7, #1
 800bb4e:	d1d6      	bne.n	800bafe <_vfiprintf_r+0x19a>
 800bb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d405      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	059a      	lsls	r2, r3, #22
 800bb5a:	d402      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5e:	f7fe f925 	bl	8009dac <__retarget_lock_release_recursive>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	065b      	lsls	r3, r3, #25
 800bb66:	f53f af1f 	bmi.w	800b9a8 <_vfiprintf_r+0x44>
 800bb6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb6c:	e71e      	b.n	800b9ac <_vfiprintf_r+0x48>
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	462a      	mov	r2, r5
 800bb74:	4b05      	ldr	r3, [pc, #20]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7fd fdf5 	bl	8009768 <_printf_i>
 800bb7e:	e7e4      	b.n	800bb4a <_vfiprintf_r+0x1e6>
 800bb80:	0800c102 	.word	0x0800c102
 800bb84:	0800c10c 	.word	0x0800c10c
 800bb88:	08009239 	.word	0x08009239
 800bb8c:	0800b941 	.word	0x0800b941
 800bb90:	0800c108 	.word	0x0800c108

0800bb94 <__swbuf_r>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	460e      	mov	r6, r1
 800bb98:	4614      	mov	r4, r2
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	b118      	cbz	r0, 800bba6 <__swbuf_r+0x12>
 800bb9e:	6a03      	ldr	r3, [r0, #32]
 800bba0:	b90b      	cbnz	r3, 800bba6 <__swbuf_r+0x12>
 800bba2:	f7fd ff8b 	bl	8009abc <__sinit>
 800bba6:	69a3      	ldr	r3, [r4, #24]
 800bba8:	60a3      	str	r3, [r4, #8]
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	071a      	lsls	r2, r3, #28
 800bbae:	d501      	bpl.n	800bbb4 <__swbuf_r+0x20>
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	b943      	cbnz	r3, 800bbc6 <__swbuf_r+0x32>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 f82a 	bl	800bc10 <__swsetup_r>
 800bbbc:	b118      	cbz	r0, 800bbc6 <__swbuf_r+0x32>
 800bbbe:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	6922      	ldr	r2, [r4, #16]
 800bbca:	1a98      	subs	r0, r3, r2
 800bbcc:	6963      	ldr	r3, [r4, #20]
 800bbce:	b2f6      	uxtb	r6, r6
 800bbd0:	4283      	cmp	r3, r0
 800bbd2:	4637      	mov	r7, r6
 800bbd4:	dc05      	bgt.n	800bbe2 <__swbuf_r+0x4e>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7ff fda7 	bl	800b72c <_fflush_r>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1ed      	bne.n	800bbbe <__swbuf_r+0x2a>
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	60a3      	str	r3, [r4, #8]
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	701e      	strb	r6, [r3, #0]
 800bbf0:	6962      	ldr	r2, [r4, #20]
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d004      	beq.n	800bc02 <__swbuf_r+0x6e>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	07db      	lsls	r3, r3, #31
 800bbfc:	d5e1      	bpl.n	800bbc2 <__swbuf_r+0x2e>
 800bbfe:	2e0a      	cmp	r6, #10
 800bc00:	d1df      	bne.n	800bbc2 <__swbuf_r+0x2e>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f7ff fd91 	bl	800b72c <_fflush_r>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0d9      	beq.n	800bbc2 <__swbuf_r+0x2e>
 800bc0e:	e7d6      	b.n	800bbbe <__swbuf_r+0x2a>

0800bc10 <__swsetup_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4b29      	ldr	r3, [pc, #164]	@ (800bcb8 <__swsetup_r+0xa8>)
 800bc14:	4605      	mov	r5, r0
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	460c      	mov	r4, r1
 800bc1a:	b118      	cbz	r0, 800bc24 <__swsetup_r+0x14>
 800bc1c:	6a03      	ldr	r3, [r0, #32]
 800bc1e:	b90b      	cbnz	r3, 800bc24 <__swsetup_r+0x14>
 800bc20:	f7fd ff4c 	bl	8009abc <__sinit>
 800bc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc28:	0719      	lsls	r1, r3, #28
 800bc2a:	d422      	bmi.n	800bc72 <__swsetup_r+0x62>
 800bc2c:	06da      	lsls	r2, r3, #27
 800bc2e:	d407      	bmi.n	800bc40 <__swsetup_r+0x30>
 800bc30:	2209      	movs	r2, #9
 800bc32:	602a      	str	r2, [r5, #0]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	e033      	b.n	800bca8 <__swsetup_r+0x98>
 800bc40:	0758      	lsls	r0, r3, #29
 800bc42:	d512      	bpl.n	800bc6a <__swsetup_r+0x5a>
 800bc44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc46:	b141      	cbz	r1, 800bc5a <__swsetup_r+0x4a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__swsetup_r+0x46>
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7fe ff15 	bl	800aa80 <_free_r>
 800bc56:	2300      	movs	r3, #0
 800bc58:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	2300      	movs	r3, #0
 800bc64:	6063      	str	r3, [r4, #4]
 800bc66:	6923      	ldr	r3, [r4, #16]
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f043 0308 	orr.w	r3, r3, #8
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	b94b      	cbnz	r3, 800bc8a <__swsetup_r+0x7a>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc80:	d003      	beq.n	800bc8a <__swsetup_r+0x7a>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f883 	bl	800bd90 <__smakebuf_r>
 800bc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc8e:	f013 0201 	ands.w	r2, r3, #1
 800bc92:	d00a      	beq.n	800bcaa <__swsetup_r+0x9a>
 800bc94:	2200      	movs	r2, #0
 800bc96:	60a2      	str	r2, [r4, #8]
 800bc98:	6962      	ldr	r2, [r4, #20]
 800bc9a:	4252      	negs	r2, r2
 800bc9c:	61a2      	str	r2, [r4, #24]
 800bc9e:	6922      	ldr	r2, [r4, #16]
 800bca0:	b942      	cbnz	r2, 800bcb4 <__swsetup_r+0xa4>
 800bca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bca6:	d1c5      	bne.n	800bc34 <__swsetup_r+0x24>
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	0799      	lsls	r1, r3, #30
 800bcac:	bf58      	it	pl
 800bcae:	6962      	ldrpl	r2, [r4, #20]
 800bcb0:	60a2      	str	r2, [r4, #8]
 800bcb2:	e7f4      	b.n	800bc9e <__swsetup_r+0x8e>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7f7      	b.n	800bca8 <__swsetup_r+0x98>
 800bcb8:	2000001c 	.word	0x2000001c

0800bcbc <_raise_r>:
 800bcbc:	291f      	cmp	r1, #31
 800bcbe:	b538      	push	{r3, r4, r5, lr}
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	d904      	bls.n	800bcd0 <_raise_r+0x14>
 800bcc6:	2316      	movs	r3, #22
 800bcc8:	6003      	str	r3, [r0, #0]
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bcd2:	b112      	cbz	r2, 800bcda <_raise_r+0x1e>
 800bcd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcd8:	b94b      	cbnz	r3, 800bcee <_raise_r+0x32>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f830 	bl	800bd40 <_getpid_r>
 800bce0:	4622      	mov	r2, r4
 800bce2:	4601      	mov	r1, r0
 800bce4:	4628      	mov	r0, r5
 800bce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcea:	f000 b817 	b.w	800bd1c <_kill_r>
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d00a      	beq.n	800bd08 <_raise_r+0x4c>
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	d103      	bne.n	800bcfe <_raise_r+0x42>
 800bcf6:	2316      	movs	r3, #22
 800bcf8:	6003      	str	r3, [r0, #0]
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	e7e7      	b.n	800bcce <_raise_r+0x12>
 800bcfe:	2100      	movs	r1, #0
 800bd00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd04:	4620      	mov	r0, r4
 800bd06:	4798      	blx	r3
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e7e0      	b.n	800bcce <_raise_r+0x12>

0800bd0c <raise>:
 800bd0c:	4b02      	ldr	r3, [pc, #8]	@ (800bd18 <raise+0xc>)
 800bd0e:	4601      	mov	r1, r0
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	f7ff bfd3 	b.w	800bcbc <_raise_r>
 800bd16:	bf00      	nop
 800bd18:	2000001c 	.word	0x2000001c

0800bd1c <_kill_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d07      	ldr	r5, [pc, #28]	@ (800bd3c <_kill_r+0x20>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	f7f5 ffab 	bl	8001c84 <_kill>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d102      	bne.n	800bd38 <_kill_r+0x1c>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b103      	cbz	r3, 800bd38 <_kill_r+0x1c>
 800bd36:	6023      	str	r3, [r4, #0]
 800bd38:	bd38      	pop	{r3, r4, r5, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20004ec8 	.word	0x20004ec8

0800bd40 <_getpid_r>:
 800bd40:	f7f5 bf98 	b.w	8001c74 <_getpid>

0800bd44 <__swhatbuf_r>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	460c      	mov	r4, r1
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	b096      	sub	sp, #88	@ 0x58
 800bd50:	4615      	mov	r5, r2
 800bd52:	461e      	mov	r6, r3
 800bd54:	da0d      	bge.n	800bd72 <__swhatbuf_r+0x2e>
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd5c:	f04f 0100 	mov.w	r1, #0
 800bd60:	bf14      	ite	ne
 800bd62:	2340      	movne	r3, #64	@ 0x40
 800bd64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd68:	2000      	movs	r0, #0
 800bd6a:	6031      	str	r1, [r6, #0]
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	b016      	add	sp, #88	@ 0x58
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	466a      	mov	r2, sp
 800bd74:	f000 f848 	bl	800be08 <_fstat_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dbec      	blt.n	800bd56 <__swhatbuf_r+0x12>
 800bd7c:	9901      	ldr	r1, [sp, #4]
 800bd7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd86:	4259      	negs	r1, r3
 800bd88:	4159      	adcs	r1, r3
 800bd8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd8e:	e7eb      	b.n	800bd68 <__swhatbuf_r+0x24>

0800bd90 <__smakebuf_r>:
 800bd90:	898b      	ldrh	r3, [r1, #12]
 800bd92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd94:	079d      	lsls	r5, r3, #30
 800bd96:	4606      	mov	r6, r0
 800bd98:	460c      	mov	r4, r1
 800bd9a:	d507      	bpl.n	800bdac <__smakebuf_r+0x1c>
 800bd9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	6123      	str	r3, [r4, #16]
 800bda4:	2301      	movs	r3, #1
 800bda6:	6163      	str	r3, [r4, #20]
 800bda8:	b003      	add	sp, #12
 800bdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdac:	ab01      	add	r3, sp, #4
 800bdae:	466a      	mov	r2, sp
 800bdb0:	f7ff ffc8 	bl	800bd44 <__swhatbuf_r>
 800bdb4:	9f00      	ldr	r7, [sp, #0]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	4639      	mov	r1, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fe fed4 	bl	800ab68 <_malloc_r>
 800bdc0:	b948      	cbnz	r0, 800bdd6 <__smakebuf_r+0x46>
 800bdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc6:	059a      	lsls	r2, r3, #22
 800bdc8:	d4ee      	bmi.n	800bda8 <__smakebuf_r+0x18>
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	f043 0302 	orr.w	r3, r3, #2
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	e7e2      	b.n	800bd9c <__smakebuf_r+0xc>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	6020      	str	r0, [r4, #0]
 800bdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bde6:	b15b      	cbz	r3, 800be00 <__smakebuf_r+0x70>
 800bde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdec:	4630      	mov	r0, r6
 800bdee:	f000 f81d 	bl	800be2c <_isatty_r>
 800bdf2:	b128      	cbz	r0, 800be00 <__smakebuf_r+0x70>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f023 0303 	bic.w	r3, r3, #3
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	431d      	orrs	r5, r3
 800be04:	81a5      	strh	r5, [r4, #12]
 800be06:	e7cf      	b.n	800bda8 <__smakebuf_r+0x18>

0800be08 <_fstat_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d07      	ldr	r5, [pc, #28]	@ (800be28 <_fstat_r+0x20>)
 800be0c:	2300      	movs	r3, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	4611      	mov	r1, r2
 800be14:	602b      	str	r3, [r5, #0]
 800be16:	f7f5 ff95 	bl	8001d44 <_fstat>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d102      	bne.n	800be24 <_fstat_r+0x1c>
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	b103      	cbz	r3, 800be24 <_fstat_r+0x1c>
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	20004ec8 	.word	0x20004ec8

0800be2c <_isatty_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d06      	ldr	r5, [pc, #24]	@ (800be48 <_isatty_r+0x1c>)
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	f7f5 ff94 	bl	8001d64 <_isatty>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_isatty_r+0x1a>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_isatty_r+0x1a>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	20004ec8 	.word	0x20004ec8

0800be4c <_init>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	bf00      	nop
 800be50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be52:	bc08      	pop	{r3}
 800be54:	469e      	mov	lr, r3
 800be56:	4770      	bx	lr

0800be58 <_fini>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr
